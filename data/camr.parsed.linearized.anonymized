contrast :arg1 ( horrible :domain ( person :arg2-of staff )  )
contrast :arg1 ( fair :arg1-of complete )  :arg1 ( food :domain ( factor :mod only :arg0-of redeem )  )  :arg2 ( make :arg0 factor :beneficiary ( deficient :quant all :mod other :poss teodora )  )  :arg1 ( thing :location ( above :op1 average )  )
exceptional :domain food :mod uniformly :prep-with ( kitchen :arg1-of ( capable :degree very )  :arg1-of ( whip :manner proudly :arg1 ( whatever :arg1-of ( feel :arg0 you :arg2 eat )  )  :arg2 ( or :op2 menu )  )  )
exceptional :domain food :mod uniformly :prep-with ( kitchen :arg1-of ( capable :degree very )  :arg1-of ( whip :manner proudly :arg1 ( whatever :arg1-of ( feel :arg0 you :arg2 eat )  )  :arg2 ( or :op2 menu )  )  )
exceptional :domain food :mod uniformly :prep-with ( kitchen :arg1-of ( capable :degree very )  :arg1-of ( whip :manner proudly :arg1 ( whatever :arg1-of ( feel :arg0 you :arg2 eat )  )  :arg2 ( or :op2 menu )  )  )
contrast :arg1 food :arg1 outstanding :arg2 ( great :domain ( perk :mod little )  )
and :op1 ( favor :arg1-of agree )  :op1 sausage :op2 chicken :mod usual :op2 ( enough :domain ( waiter :mod kind )  :purpose ( split :arg1 dish :degree half )  :purpose ( sample :arg0 you :arg1 meat )  )
and :op1 ( favor :arg1-of agree )  :op1 sausage :op2 chicken :mod usual :op2 ( enough :domain ( waiter :mod kind )  :purpose ( split :arg1 dish :degree half )  :purpose ( sample :arg0 you :arg1 meat )  )
and :op1 ( favor :arg1-of agree )  :op1 sausage :op2 chicken :mod usual :op2 ( enough :domain ( waiter :mod kind )  :purpose ( split :arg1 dish :degree half )  :purpose ( sample :arg0 you :arg1 meat )  )
and :op1 ( favor :arg1-of agree )  :op1 sausage :op2 chicken :mod usual :op2 ( enough :domain ( waiter :mod kind )  :purpose ( split :arg1 dish :degree half )  :purpose ( sample :arg0 you :arg1 meat )  )
have :arg0 bagel :arg1 ( taste :mod outstanding )  :prep-with ( texture :arg1-of terrific :arg1 chewy )  :arg1 ( gummy :arg1 chewy )
good :domain food :degree pretty
and :op1 they :op1 mayonnaise :op2 ( forget :arg1 toast )  :op1 ( leave :arg1 ( ingredient :mod cheese-off :mod ( omelet :location ( below :op1 ( temperature :arg1-of hot )  )  )  )  )  :op2 ( cook :arg1 bacon :arg1 ( crumble :arg1 plate :time ( touch :arg0 you :arg1 it )  )  )
and :op1 they :op1 mayonnaise :op2 ( forget :arg1 toast )  :op1 ( leave :arg1 ( ingredient :mod cheese-off :mod ( omelet :location ( below :op1 ( temperature :arg1-of hot )  )  )  )  )  :op2 ( cook :arg1 bacon :arg1 ( crumble :arg1 plate :time ( touch :arg0 you :arg1 it )  )  )
and :op1 they :op1 mayonnaise :op2 ( forget :arg1 toast )  :op1 ( leave :arg1 ( ingredient :mod cheese-off :mod ( omelet :location ( below :op1 ( temperature :arg1-of hot )  )  )  )  )  :op2 ( cook :arg1 bacon :arg1 ( crumble :arg1 plate :time ( touch :arg0 you :arg1 it )  )  )
and :op1 they :op1 mayonnaise :op2 ( forget :arg1 toast )  :op1 ( leave :arg1 ( ingredient :mod cheese-off :mod ( omelet :location ( below :op1 ( temperature :arg1-of hot )  )  )  )  )  :op2 ( cook :arg1 bacon :arg1 ( crumble :arg1 plate :time ( touch :arg0 you :arg1 it )  )  )
and :op1 they :op1 mayonnaise :op2 ( forget :arg1 toast )  :op1 ( leave :arg1 ( ingredient :mod cheese-off :mod ( omelet :location ( below :op1 ( temperature :arg1-of hot )  )  )  )  )  :op2 ( cook :arg1 bacon :arg1 ( crumble :arg1 plate :time ( touch :arg0 you :arg1 it )  )  )
and :op1 they :op1 mayonnaise :op2 ( forget :arg1 toast )  :op1 ( leave :arg1 ( ingredient :mod cheese-off :mod ( omelet :location ( below :op1 ( temperature :arg1-of hot )  )  )  )  )  :op2 ( cook :arg1 bacon :arg1 ( crumble :arg1 plate :time ( touch :arg0 you :arg1 it )  )  )
and :op1 they :op1 mayonnaise :op2 ( forget :arg1 toast )  :op1 ( leave :arg1 ( ingredient :mod cheese-off :mod ( omelet :location ( below :op1 ( temperature :arg1-of hot )  )  )  )  )  :op2 ( cook :arg1 bacon :arg1 ( crumble :arg1 plate :time ( touch :arg0 you :arg1 it )  )  )
and :op1 ( get :arg1 ( check :arg1 ( possible :arg1 perfect :arg1 ( sit :arg1 we )  )  )  )  :op2 ( have :arg1 drink )  :op2 talk
and :op1 ( get :arg1 ( check :arg1 ( possible :arg1 perfect :arg1 ( sit :arg1 we )  )  )  )  :op2 ( have :arg1 drink )  :op2 talk
good :compared-to ( and :op1 design :op2 atmosphere )  :mod just
good :compared-to ( and :op1 design :op2 atmosphere )  :mod just
and :op1 ( visit :arg0 he :arg1 ( country :name ( name :op1 thailand )  )  )  :op2 ( expert :mod quite :arg2 cuisine )
have-condition :snt2 ( like :arg1 ( good :degree most :domain pizza )  :arg0 you :arg1 ( pizza :arg1-of thin :mod crusted )  )
have-condition :snt2 ( like :arg1 ( good :degree most :domain pizza )  :arg0 you :arg1 ( pizza :arg1-of thin :mod crusted )  )
go :arg1 ( go :arg1 ( money :mod all )  :arg4 ( decoration :mod interior )  )  :arg0 none :arg4 chef
go :arg1 ( go :arg1 ( money :mod all )  :arg4 ( decoration :mod interior )  )  :arg0 none :arg4 chef
comfortable :polarity - :arg1 seat :time ( sit :arg1 you :arg2 ( against :op1 wall )  :arg2 ( bench :mod wood )  )
ask :arg0 i :arg1 ( seltzer :arg1 lime :location ( ice :polarity - )  )
go :arg1 ( t :null_edge don )  :manner alone :quant ( enough :purpose ( experience :mod ( whole :compared-to ( isn :mod even :quant 2 )  )  :arg1 ( and :op1 pickle :op2 ( select :arg1 ( and :op1 meat :op2 seafood )  )  )  )  )
go :arg1 ( t :null_edge don )  :manner alone :quant ( enough :purpose ( experience :mod ( whole :compared-to ( isn :mod even :quant 2 )  )  :arg1 ( and :op1 pickle :op2 ( select :arg1 ( and :op1 meat :op2 seafood )  )  )  )  )
thing :arg1-of suggest :arg1 ( eat :arg1 ( style :mod family :arg1-of ( cause :arg0 ( want :arg0 you :arg1 ll :arg1 ( try :arg0 you :arg1 ( dish :mod other )  )  )  )  )  )
thing :arg1-of suggest :arg1 ( eat :arg1 ( style :mod family :arg1-of ( cause :arg0 ( want :arg0 you :arg1 ll :arg1 ( try :arg0 you :arg1 ( dish :mod other )  )  )  )  )  )
xconcept :x ( good :degree most )  :x ( and :op1 ( vibe :mod warm )  :op2 ( friendly :domain good :arg1 ( person :arg0-of own )  :degree super-power )  :op2 ( fast :arg1 service )  )
xconcept :x ( good :degree most )  :x ( and :op1 ( vibe :mod warm )  :op2 ( friendly :domain good :arg1 ( person :arg0-of own )  :degree super-power )  :op2 ( fast :arg1 service )  )
xconcept :x ( good :degree most )  :x ( and :op1 ( vibe :mod warm )  :op2 ( friendly :domain good :arg1 ( person :arg0-of own )  :degree super-power )  :op2 ( fast :arg1 service )  )
xconcept :x ( get :null_edge faan :arg1 ( concept :mod great :arg1-of ( rough :degree little :arg1 deliver )  )  )  :x contrast
miss :arg1 ( serve :source ( food :mod incredible :mod ( atmosphere :arg1-of warm )  )  :arg0-of friendly )  :arg1 ( doesn :mod ( spot :mod this :location downtown :location neighborhood )  )  :arg1 beat-out
miss :arg1 ( serve :source ( food :mod incredible :mod ( atmosphere :arg1-of warm )  )  :arg0-of friendly )  :arg1 ( doesn :mod ( spot :mod this :location downtown :location neighborhood )  )  :arg1 beat-out
miss :arg1 ( serve :source ( food :mod incredible :mod ( atmosphere :arg1-of warm )  )  :arg0-of friendly )  :arg1 ( doesn :mod ( spot :mod this :location downtown :location neighborhood )  )  :arg1 beat-out
possible :arg1 ( food :mod great :topic ( thing :arg2-of price :arg1-of reasonable )  )  :arg1 ( person :arg1-of beat )
possible :arg1 ( food :mod great :topic ( thing :arg2-of price :arg1-of reasonable )  )  :arg1 ( person :arg1-of beat )
have :arg0 ( place :mod this :mod little )  :arg1 ( and :op1 ( decor :mod cute :mod interior )  :op2 ( price :arg1-of afford :location city )  )
have :arg0 ( place :mod this :mod little )  :arg1 ( and :op1 ( decor :mod cute :mod interior )  :op2 ( price :arg1-of afford :location city )  )
word :quant 2 :arg1 ( wine :arg1-of free )
reasonable :domain price :null_edge ( poor :domain service )
reasonable :domain price :null_edge ( poor :domain service )
come :arg1 ( good :domain quantity :mod also :degree very )  :arg1 you :manner ( satisfy :arg1 you )
stumble :arg0 i :arg1 ( walk :mod this :mod floor )  :time ( before :quant ( broadcast-program :name ( name :op1 fridays )  :quant 2 )  )  :arg0 ( person :arg0 i :quant 2 :arg0-of ( have-rel-role :arg2 friend :location town )  )
name :op1 a
sit :arg1 ( lover :mod serious :mod sushi )  :arg1 we :arg2 ( bar :mod sushi )  :arg2 ( close :arg1 lover :arg1 we :prep-as action )
stumble :arg0 i :arg1 ( walk :mod this :mod floor )  :time ( before :quant ( broadcast-program :name ( name :op1 fridays )  :quant 2 )  )  :arg0 ( person :arg0 i :quant 2 :arg0-of ( have-rel-role :arg2 friend :location town )  )
name :op1 a
sit :arg1 ( lover :mod serious :mod sushi )  :arg1 we :arg2 ( bar :mod sushi )  :arg2 ( close :arg1 lover :arg1 we :prep-as action )
amaze :arg0 ( rice :arg1-of fry )  :location here
course :quant 3 :null_edge ( include :arg1 ( mussel :arg1-of excellent :source ( and :op2 ( pastry :mod puff )  :op1 ( cheese-off :mod goat :prep-with ( delicious :arg1 dress )  )  :op2 salad :op2 ( and :op2 ( steak :mod hanger :location ( world :mod this )  )  )  )  )  )
course :quant 3 :null_edge ( include :arg1 ( mussel :arg1-of excellent :source ( and :op2 ( pastry :mod puff )  :op1 ( cheese-off :mod goat :prep-with ( delicious :arg1 dress )  )  :op2 salad :op2 ( and :op2 ( steak :mod hanger :location ( world :mod this )  )  )  )  )  )
course :quant 3 :null_edge ( include :arg1 ( mussel :arg1-of excellent :source ( and :op2 ( pastry :mod puff )  :op1 ( cheese-off :mod goat :prep-with ( delicious :arg1 dress )  )  :op2 salad :op2 ( and :op2 ( steak :mod hanger :location ( world :mod this )  )  )  )  )  )
course :quant 3 :null_edge ( include :arg1 ( mussel :arg1-of excellent :source ( and :op2 ( pastry :mod puff )  :op1 ( cheese-off :mod goat :prep-with ( delicious :arg1 dress )  )  :op2 salad :op2 ( and :op2 ( steak :mod hanger :location ( world :mod this )  )  )  )  )  )
course :quant 3 :null_edge ( include :arg1 ( mussel :arg1-of excellent :source ( and :op2 ( pastry :mod puff )  :op1 ( cheese-off :mod goat :prep-with ( delicious :arg1 dress )  )  :op2 salad :op2 ( and :op2 ( steak :mod hanger :location ( world :mod this )  )  )  )  )  )
place :domain it :arg1-of perfect :location-of ( have :arg1 ( food :mod amanzing :mod ( country :name ( name :op1 indian )  )  )  )
and :op1 ( cool :domain place :degree so )  :op2 ( prompt :arg0 service )
and :op1 ( cool :domain place :degree so )  :op2 ( prompt :arg0 service )
leave :time end :arg1 you :arg0 re :arg2 ( broth :mod mild :prep-with ( noodle :arg1-of ( slurp :arg0 you :arg1-of possible :arg2 cup )  )  )
wonder :arg0 i :mod just :arg1 ( possible :arg1 ( have :arg0 you :arg1 ( meal :mod such :mod delicious :arg1 ( money :mod such :quant little )  )  )  )
wonder :arg0 i :mod just :arg1 ( possible :arg1 ( have :arg0 you :arg1 ( meal :mod such :mod delicious :arg1 ( money :mod such :quant little )  )  )  )
excellent :arg1 ( list :arg2 wine )
and :op1 ( restaurant :quant many :mod thai :location manhattan )  :time before :op2 ( food :domain toon :mod ( good :degree most )  :mod thai :arg2-of ( except :arg1 ( person :arg0-of ( have-rel-role :arg2 mom )  )  )  )
wouldnt :arg0 they :null_edge ( let :arg0 they :mod even :arg1 ( finish :arg1 ( wine :quant glass )  )  :time ( before :op1 ( offer :arg1 another )  )  )
have :arg1 ( ask :arg0 whem )  :arg0 we :null_edge ( ask :arg0 we :arg2 ( question :arg0-of ( detail :degree more )  )  :arg1 ( know :arg1 special )  )
place :domain this :mod ( great :manner consistent )  :location-of ( dine :arg2 ( or :op1 lunch :op2 dinner )  )
place :domain this :mod ( great :manner consistent )  :location-of ( dine :arg2 ( or :op1 lunch :op2 dinner )  )
place :domain this :mod ( great :manner consistent )  :location-of ( dine :arg2 ( or :op1 lunch :op2 dinner )  )
and :op1 ( pleasant :domain ( atmosphere :arg1-of nice )  :domain service :degree very )  :op2 ( good :domain desert )
and :op1 ( pleasant :domain ( atmosphere :arg1-of nice )  :domain service :degree very )  :op2 ( good :domain desert )
and :op1 ( pleasant :domain ( atmosphere :arg1-of nice )  :domain service :degree very )  :op2 ( good :domain desert )
and :op1 ( sit :time ( after :op1 ( enjoy :mod really :location bar )  )  :arg1 we :arg2 table :arg1 dinner )
and :op1 ( sit :time ( after :op1 ( enjoy :mod really :location bar )  )  :arg1 we :arg2 table :arg1 dinner )
and :op1 ( sit :time ( after :op1 ( enjoy :mod really :location bar )  )  :arg1 we :arg2 table :arg1 dinner )
and :op1 ( service :arg1-of fabulous )  :op2 ( food :arg1-of fantastic )  :op2 ( and :op1 ( atmosphere :arg1-of chill )  :op2 environment )
and :op1 ( service :arg1-of fabulous )  :op2 ( food :arg1-of fantastic )  :op2 ( and :op1 ( atmosphere :arg1-of chill )  :op2 environment )
and :op1 ( service :arg1-of fabulous )  :op2 ( food :arg1-of fantastic )  :op2 ( and :op1 ( atmosphere :arg1-of chill )  :op2 environment )
and :op1 ( service :arg1-of fabulous )  :op2 ( food :arg1-of fantastic )  :op2 ( and :op1 ( atmosphere :arg1-of chill )  :op2 environment )
try :arg1 ( appetizer :mod lasagnette )
like :arg0 i :arg1 ( select :arg1 beer )
and :op1 ( food :mod great )  :op2 ( menu :mod ( size :mod good )  )  :op2 ( service :mod great )  :op2 setting
and :op1 ( food :mod great )  :op2 ( menu :mod ( size :mod good )  )  :op2 ( service :mod great )  :op2 setting
and :op1 ( food :mod great )  :op2 ( menu :mod ( size :mod good )  )  :op2 ( service :mod great )  :op2 setting
and :op1 ( food :mod great )  :op2 ( menu :mod ( size :mod good )  )  :op2 ( service :mod great )  :op2 setting
go :location here :arg1 ( dinner :mod romantic :purpose ( experience :quant ( all :mod wow )  :mod dine )  )
go :location here :arg1 ( dinner :mod romantic :purpose ( experience :quant ( all :mod wow )  :mod dine )  )
and :op1 ( grow :arg1 i :arg2 ( eat :arg0 i :arg1 dosa )  :purpose ( find :arg0 i :time yet :arg2 ( satisfy :arg1 ( taste :arg1 bud )  )  )  )
and :op1 ( good :arg2 ( list :arg2 wine :arg1-of select )  )  :op2 ( fill :arg1 ( wine :quant glass )  :manner generosity :arg2 top )
and :op1 ( good :arg2 ( list :arg2 wine :arg1-of select )  )  :op2 ( fill :arg1 ( wine :quant glass )  :manner generosity :arg2 top )
and :op1 ( eat :instrument ( variety :mod great :location menu )  :location here :frequency often )  :op2 bore
think :arg1 ( limit :arg1 menu :degree very )  :arg1 ( count :arg0 we :arg1 ( or :op1 4 :op2 5 )  :arg1 entree )
think :arg1 ( limit :arg1 menu :degree very )  :arg1 ( count :arg0 we :arg1 ( or :op1 4 :op2 5 )  :arg1 entree )
contrast :arg1 ( limit :arg1 menu )  :arg2 ( excellent :arg1 menu :arg1 ( dish :quant ( all :mod almost )  )  )
contrast :arg1 ( limit :arg1 menu )  :arg2 ( excellent :arg1 menu :arg1 ( dish :quant ( all :mod almost )  )  )
crazy :degree too :arg1 ( martini :mod sake )
hang :arg1 ( and :op1 ( bagel :mod great )  :op2 spread :op1 ( place :mod good )  )
hang :arg1 ( and :op1 ( bagel :mod great )  :op2 spread :op1 ( place :mod good )  )
feel :arg1 ( thing :quant 1 :arg1-of ( like :arg0 i :arg1 ( place :mod this )  )  )  :arg1 ( or :op1 ( rush :arg2 ( give :arg1 ( table :arg2-of ( ot :arg1 ( guest :mod incoming )  )  )  )  )  :op2 pressure )
contrast :arg1 ( outstanding :arg2-of ( fortunate :polarity - )  :domain food )  :arg2 ( pit :arg1 ( everything :mod else :topic ( restaurant :mod this )  )  )
and :op1 ( have :arg0 we :time always :arg1 ( meal :mod delicious )  )  :op2 ( leave-behind :time always :arg1 ( thing :arg1-of feel :arg1 satisfy )  )
and :op1 ( dip :arg1 ingredient :arg1 chopstick )  :op2 ( swirl :mod around )  :op2 eat
and :op1 ( dip :arg1 ingredient :arg1 chopstick )  :op2 ( swirl :mod around )  :op2 eat
go :arg0 first :location here :purpose ( enjoy :arg0 first :arg1 ( terrace :mod garden )  )
and :op1 ( good :domain pizza :degree pretty )  :op2 huge
differ :arg2 ( gather :arg1 cuisine )  :null_edge authentic :mod ( country :name ( name :op1 taiwanese )  )  :degree very :arg2 ( accustom :location taipeus )
hesititate :arg0 i :null_edge almost :arg1-of ( cause :arg0 ( and :op1 ( write :arg0 i :arg1 review )  :op1 ( great :domain atmosphere )  :op2 ( hate :arg0 i :time ( become :degree too :arg2 crowd )  )  )  )
contrast :arg2 ( crowd :arg1 they :frequency often :time weekend :arg1 ( and :op1 ( efficient :prep-with serve )  :op2 accurate )  )
contrast :arg2 ( crowd :arg1 they :frequency often :time weekend :arg1 ( and :op1 ( efficient :prep-with serve )  :op2 accurate )  )
xconcept :x ( co :null_edge all )  :x ( amaze :arg1 ( person :arg0-of work )  :null_edge ( small :mod dish )  )
and :op1 ( unheralded :arg1 atmosphere )  :op2 service :op2 ( magnificant :arg1 food )
and :op1 ( unheralded :arg1 atmosphere )  :op2 service :op2 ( magnificant :arg1 food )
and :op1 ( unheralded :arg1 atmosphere )  :op2 service :op2 ( magnificant :arg1 food )
order :arg0 we :arg1 ( branzino :arg1-of special :arg1-of grilled :arg1-of ( infuse :arg2 bone :arg1 ( difficult :domain eat )  )  )
and :op1 ( friendly :domain ( wait :arg1 ( person :arg2-of staff )  )  :arg1 ( and :op1 ( good :domain food )  :op2 good )  )
and :op1 ( friendly :domain ( wait :arg1 ( person :arg2-of staff )  )  :arg1 ( and :op1 ( good :domain food )  :op2 good )  )
contrast :arg1 ( possible :arg1 ( bit :domain it )  :arg1 ( food :mod ( good :degree most )  :arg0-of ( find :arg0 you :location area )  :mod ( country :name ( name :op1 france )  )  )  )  :arg2 ( packed :time weekend )  :arg1 ( and :op2 ( good :domain vibe )  )
contrast :arg1 ( possible :arg1 ( bit :domain it )  :arg1 ( food :mod ( good :degree most )  :arg0-of ( find :arg0 you :location area )  :mod ( country :name ( name :op1 france )  )  )  )  :arg2 ( packed :time weekend )  :arg1 ( and :op2 ( good :domain vibe )  )
contrast :arg1 ( possible :arg1 ( bit :domain it )  :arg1 ( food :mod ( good :degree most )  :arg0-of ( find :arg0 you :location area )  :mod ( country :name ( name :op1 france )  )  )  )  :arg2 ( packed :time weekend )  :arg1 ( and :op2 ( good :domain vibe )  )
place :null_edge ( brooklyn :mod right )  :domain this :arg1-of nice :mod cozy :arg2 ( pizza :mod good )
place :null_edge ( brooklyn :mod right )  :domain this :arg1-of nice :mod cozy :arg2 ( pizza :mod good )
have :arg2 le :arg1 ( menu :mod theater :mod outstanding )
and :op1 ( order :arg0 i :mod also :arg2 deliver )  :op2 ( forget :arg0 restaurant :arg1 ( order :mod half )  )
and :op1 ( order :arg0 i :mod also :arg2 deliver )  :op2 ( forget :arg0 restaurant :arg1 ( order :mod half )  )
check-out :arg0 server :time ( meal :mod entire )
check-out :arg0 server :time ( meal :mod entire )
affect :arg0 ( scent :arg1-of strong :arg1-of ( come :arg2 ( and :op1 ( left :arg1-of include )  :op2 right )  )  )  :manner negatively :arg1 ( bud :mod taste )
and :domain we :op2 ( sandwich :mod lobster )  :op2 fantastic
stall :arg0 we :arg1 ( possible :arg1 ( understand :arg0 i :arg1 ( contrast :arg1 ( come :arg1 they :arg1 ( we :mod ( less-than :op1 ( temporal-quantity :unit hour )  )  )  )  :arg2 and :arg2 ( bring :arg0 they :mod even :arg1 check :time yet )  )  )  )
shell :arg1-of ( possible :arg1 ( look :arg1 ( roll :arg1 spider )  :arg1 ( challenge :arg2 eat )  )  )  :arg1-of soft :arg1-of ( crab :arg1 ( hang :arg2 roll )  )  :arg1-of ( thing :arg2-of price :arg1-of pay )
shell :arg1-of ( possible :arg1 ( look :arg1 ( roll :arg1 spider )  :arg1 ( challenge :arg2 eat )  )  )  :arg1-of soft :arg1-of ( crab :arg1 ( hang :arg2 roll )  )  :arg1-of ( thing :arg2-of price :arg1-of pay )
and :op1 ( good :domain ( skewer :arg1-of deep )  )  :op2 ( rare :mod still :arg1 ( find :location nyc )  )
contrast :arg1 ( try :arg0 i :arg1 ( make :arg0 i :arg1 reserve )  )  :arg2 ( have :arg0 i :arg1 ( hostess :arg1 ( time :mod both )  )  :arg1 name )
contrast :arg1 ( try :arg0 i :arg1 ( make :arg0 i :arg1 reserve )  )  :arg2 ( have :arg0 i :arg1 ( hostess :arg1 ( time :mod both )  )  :arg1 name )
recommend :arg0 i :mod also :arg1 ( or :op1 ( dish :mod rice )  :op2 ( variety :arg1-of differ :null_edge congee )  )
recommend :arg0 i :mod also :arg1 ( or :op1 ( dish :mod rice )  :op2 ( variety :arg1-of differ :null_edge congee )  )
die :arg1 ( appetizer :mod ( tartar :mod tuna )  )
reach :arg0 ( oasis :mod refinement )  :arg0 ( food :arg1-of ( uneven :degree somewhat )  )  :frequency often :arg1 ( pinnacle :arg1 ( cuisine :mod new :arg1-of fine )  )  :null_edge ( evidence :domain ( passion :arg1 chef :mod ( execute :mod precise )  )  :degree most :location ( and :op1 ( dish :mod fish )  :op2 soup )  )
reach :arg0 ( oasis :mod refinement )  :arg0 ( food :arg1-of ( uneven :degree somewhat )  )  :frequency often :arg1 ( pinnacle :arg1 ( cuisine :mod new :arg1-of fine )  )  :null_edge ( evidence :domain ( passion :arg1 chef :mod ( execute :mod precise )  )  :degree most :location ( and :op1 ( dish :mod fish )  :op2 soup )  )
reach :arg0 ( oasis :mod refinement )  :arg0 ( food :arg1-of ( uneven :degree somewhat )  )  :frequency often :arg1 ( pinnacle :arg1 ( cuisine :mod new :arg1-of fine )  )  :null_edge ( evidence :domain ( passion :arg1 chef :mod ( execute :mod precise )  )  :degree most :location ( and :op1 ( dish :mod fish )  :op2 soup )  )
reach :arg0 ( oasis :mod refinement )  :arg0 ( food :arg1-of ( uneven :degree somewhat )  )  :frequency often :arg1 ( pinnacle :arg1 ( cuisine :mod new :arg1-of fine )  )  :null_edge ( evidence :domain ( passion :arg1 chef :mod ( execute :mod precise )  )  :degree most :location ( and :op1 ( dish :mod fish )  :op2 soup )  )
reach :arg0 ( oasis :mod refinement )  :arg0 ( food :arg1-of ( uneven :degree somewhat )  )  :frequency often :arg1 ( pinnacle :arg1 ( cuisine :mod new :arg1-of fine )  )  :null_edge ( evidence :domain ( passion :arg1 chef :mod ( execute :mod precise )  )  :degree most :location ( and :op1 ( dish :mod fish )  :op2 soup )  )
love :time ( love :arg0 you :arg1 ( and :op2 cheese-off :op2 ( and :op1 wine :op2 ( fare :mod delicious :mod ( country :name ( name :op1 france )  )  )  )  )  )  :arg0 you :degree ll :arg1 artisanal
love :time ( love :arg0 you :arg1 ( and :op2 cheese-off :op2 ( and :op1 wine :op2 ( fare :mod delicious :mod ( country :name ( name :op1 france )  )  )  )  )  )  :arg0 you :degree ll :arg1 artisanal
love :time ( love :arg0 you :arg1 ( and :op2 cheese-off :op2 ( and :op1 wine :op2 ( fare :mod delicious :mod ( country :name ( name :op1 france )  )  )  )  )  )  :arg0 you :degree ll :arg1 artisanal
and :op1 ( love :arg0 i :arg1 ( food :mod ( country :name ( name :op1 indian )  )  )  )  :op2 ( consider :arg0 i :arg2 ( expert :mod quite )  )
get :arg0 ( pizza :quant some :mod baby )  :arg1 wish
wait :mod overall :mod even :arg1 it
and :op1 ( incredible :domain ( dessert :mod lava :mod cake )  )  :op2 ( recommend :arg0 dessert )
vt :domain ( hope :arg0 ( pizza :mod baby )  :time grow )
horrible :domain ( experience :source ( serve :mod terrible :beneficiary ( food :mod bland )  :arg0-of ( person :arg0-of manage )  )  :mod overall )
horrible :domain ( experience :source ( serve :mod terrible :beneficiary ( food :mod bland )  :arg0-of ( person :arg0-of manage )  )  :mod overall )
horrible :domain ( experience :source ( serve :mod terrible :beneficiary ( food :mod bland )  :arg0-of ( person :arg0-of manage )  )  :mod overall )
duck :arg2 late :condition ( likely :arg1 lahore :mod great :arg1 ( need :time night :arg0 you :arg1 ( food :quant some :arg1-of ( tasty :degree really )  :arg1-of cheap )  )  :arg1 ( have :null_edge you :null_edge ll :arg1 ( finish :arg1 ( trouble :location-of ( get :arg0 you :arg3 ( monetary-quantity :unit dollar :quant 4 )  )  )  :arg1 ( amount :consist-of food )  )  )  )
duck :arg2 late :condition ( likely :arg1 lahore :mod great :arg1 ( need :time night :arg0 you :arg1 ( food :quant some :arg1-of ( tasty :degree really )  :arg1-of cheap )  )  :arg1 ( have :null_edge you :null_edge ll :arg1 ( finish :arg1 ( trouble :location-of ( get :arg0 you :arg3 ( monetary-quantity :unit dollar :quant 4 )  )  )  :arg1 ( amount :consist-of food )  )  )  )
seat :time ( go :mod last )  :arg1 we :location table :location ( corridor :mod ( next-to :op1 kitchen )  )
range :arg1 ( select :mod good :arg1 wine )  :arg3 afford :arg2 ( end :arg1-of high )
overall :topic ( restaurant :mod nice )  :prep-with ( decor :mod classic :mod upscale :mod ( country :name ( name :op1 italian )  )  )
impress :arg0 food
wonderful :arg1 ( experience :degree entire :mod dine )
and :op1 ( wonderful :domain ( select :arg0 ( and :op1 wine :op1 glass :op2 bottle )  )  )  :op2 ( recommend :time always :arg1 ( make :arg1 ( reserve :arg0 ( have-rel-role :arg2 friend )  )  )  )
and :op1 ( wonderful :domain ( select :arg0 ( and :op1 wine :op1 glass :op2 bottle )  )  )  :op2 ( recommend :time always :arg1 ( make :arg1 ( reserve :arg0 ( have-rel-role :arg2 friend )  )  )  )
refine :arg0 service :degree high :arg1 ( and :op1 ( delay :arg1 seating :arg1 ( temporal-quantity :unit minute :quant 35 )  :purpose reserve :purpose ( and :op1 ( apologize :arg1 maitre )  :op2 ( apprise :arg1-of regular :arg2 progress )  )  )  )
refine :arg0 service :degree high :arg1 ( and :op1 ( delay :arg1 seating :arg1 ( temporal-quantity :unit minute :quant 35 )  :purpose reserve :purpose ( and :op1 ( apologize :arg1 maitre )  :op2 ( apprise :arg1-of regular :arg2 progress )  )  )  )
refine :arg0 service :degree high :arg1 ( and :op1 ( delay :arg1 seating :arg1 ( temporal-quantity :unit minute :quant 35 )  :purpose reserve :purpose ( and :op1 ( apologize :arg1 maitre )  :op2 ( apprise :arg1-of regular :arg2 progress )  )  )  )
fantastic :arg1 ( order :arg1 ( duck :mod panang )  )
good :domain food :mod usual :degree very :condition ( wonder :manner ocasionally :arg0 i :arg1 ( freshmess :arg1 ( vegatable :mod raw :arg1-of ( order :mod side )  )  )  )
great :domain ( serve :source ( individual :quant 2 )  )
have :arg0 they :arg1 ( country :name ( name :op1 indian )  :mod authentic )  :arg1 ( thing :arg2-of price :arg1 amazin )
have :arg0 they :arg1 ( country :name ( name :op1 indian )  :mod authentic )  :arg1 ( thing :arg2-of price :arg1 amazin )
and :op1 ( relax :arg1 ambiance )  :op2 stylish
save :manner lucky :arg0 we :arg1 ( room :purpose ( and :op1 ( salmon :mod bbq )  :op2 ( bass :mod sea )  :op2 ( duck :mod crispy )  )  )
save :manner lucky :arg0 we :arg1 ( room :purpose ( and :op1 ( salmon :mod bbq )  :op2 ( bass :mod sea )  :op2 ( duck :mod crispy )  )  )
save :manner lucky :arg0 we :arg1 ( room :purpose ( and :op1 ( salmon :mod bbq )  :op2 ( bass :mod sea )  :op2 ( duck :mod crispy )  )  )
contrast :arg1 ( use :arg0 they :arg1 ( ingredient :arg1-of fancy )  :arg2 ( make :arg0 they :arg0 ( ingredient :mod even :mod fancy )  :arg1 don :arg1 ( pizza :mod good )  :null_edge ( know :arg0 someone :arg1 ( right :arg1 crust )  )  )  )
contrast :arg1 ( use :arg0 they :arg1 ( ingredient :arg1-of fancy )  :arg2 ( make :arg0 they :arg0 ( ingredient :mod even :mod fancy )  :arg1 don :arg1 ( pizza :mod good )  :null_edge ( know :arg0 someone :arg1 ( right :arg1 crust )  )  )  )
contrast :arg1 ( use :arg0 they :arg1 ( ingredient :arg1-of fancy )  :arg2 ( make :arg0 they :arg0 ( ingredient :mod even :mod fancy )  :arg1 don :arg1 ( pizza :mod good )  :null_edge ( know :arg0 someone :arg1 ( right :arg1 crust )  )  )  )
contrast :arg1 ( use :arg0 they :arg1 ( ingredient :arg1-of fancy )  :arg2 ( make :arg0 they :arg0 ( ingredient :mod even :mod fancy )  :arg1 don :arg1 ( pizza :mod good )  :null_edge ( know :arg0 someone :arg1 ( right :arg1 crust )  )  )  )
and :op2 ( and :op1 ( good :mod yes :domain ( bukhara :mod dal )  :degree so :arg2 dam )  :op2 ( kabab :quant all )  )
and :op2 ( and :op1 ( good :mod yes :domain ( bukhara :mod dal )  :degree so :arg2 dam )  :op2 ( kabab :quant all )  )
look :arg0 i :direction forward :arg1 ( eat :arg0 i :location here :mod again )
and :op1 ( come :arg1 i :location here :arg2 child )  :op2 ( come :arg1 i :time always :direction back :arg1 taste )
tuk :mod tuk :arg1 ( joint :arg0-of comfortable :mod neighborhood :arg1-of ( know :arg0 you :arg1 ( have :arg0 you :time always :arg1 ( meal :mod good :arg1-of ( thing :arg2-of price :manner fair )  )  )  )  )
tuk :mod tuk :arg1 ( joint :arg0-of comfortable :mod neighborhood :arg1-of ( know :arg0 you :arg1 ( have :arg0 you :time always :arg1 ( meal :mod good :arg1-of ( thing :arg2-of price :manner fair )  )  )  )  )
have :arg0 ( and :op1 ( volume-quantity :unit glass :poss ( lizard :mod leap )  :poss ( prosecco :consist-of glass )  )  :op2 mussel )  :null_edge ( happy :null_edge everything )
have :arg0 ( and :op1 ( volume-quantity :unit glass :poss ( lizard :mod leap )  :poss ( prosecco :consist-of glass )  )  :op2 mussel )  :null_edge ( happy :null_edge everything )
have :arg0 ( and :op1 ( volume-quantity :unit glass :poss ( lizard :mod leap )  :poss ( prosecco :consist-of glass )  )  :op2 mussel )  :null_edge ( happy :null_edge everything )
and :op2 food :op1 ( average :null_edge ( char :arg1 food :arg1 sugar :arg1-of ( smell :arg1 kerosene )  )  )  :op2 ( awful :arg1 food :domain ( brulee :mod creme )  )
and :op2 food :op1 ( average :null_edge ( char :arg1 food :arg1 sugar :arg1-of ( smell :arg1 kerosene )  )  )  :op2 ( awful :arg1 food :domain ( brulee :mod creme )  )
and :op2 food :op1 ( average :null_edge ( char :arg1 food :arg1 sugar :arg1-of ( smell :arg1 kerosene )  )  )  :op2 ( awful :arg1 food :domain ( brulee :mod creme )  )
taste :arg0 food :time always :arg1 ( and :op1 fresh :op3 ( serve :manner prompt )  )
taste :arg0 food :time always :arg1 ( and :op1 fresh :op3 ( serve :manner prompt )  )
delicious :domain pizza :location here
and :op1 ( great :arg0 ( and :op1 ( pizza :mod garlic )  )  :mod well )  :op3 ( order :arg0 i :frequency ( often :mod quite )  )  :op2 ( quick :domain deliver :degree ( super-power :time always )  )
and :op1 ( great :arg0 ( and :op1 ( pizza :mod garlic )  )  :mod well )  :op3 ( order :arg0 i :frequency ( often :mod quite )  )  :op2 ( quick :domain deliver :degree ( super-power :time always )  )
and :op1 ( great :arg0 ( and :op1 ( pizza :mod garlic )  )  :mod well )  :op3 ( order :arg0 i :frequency ( often :mod quite )  )  :op2 ( quick :domain deliver :degree ( super-power :time always )  )
wu :purpose ( food :mod great :mod ( country :name ( name :op1 chinese )  )  :mod nearby )  :arg0 you :null_edge ( and :op2 liang :op2 ( sichuan :mod grand )  :op4 ( block :mod just )  )
contrast :arg1 ( say :arg1 ( s :null_edge murray )  )  :arg1 anything :arg1 serve
contrast :arg1 ( trendi :domain ( place :mod this )  :degree really )  :arg2 ( forget :arg2 ( restaurant :mod ( important :degree most )  )  )
hat :arg2 chef
contrast :arg1 ( possible :arg1 ( improve :arg1 service :arg4 ( place :mod overall :domain this :arg0-of ( understand :arg1 ( importance :poss ( thing :mod little )  )  :arg0 ( seem :arg1 ( antique :null_edge null_tag :arg1-of black :null_edge one )  )  :location ( experience :mod restaurant )  )  )  )  )
contrast :arg1 ( possible :arg1 ( improve :arg1 service :arg4 ( place :mod overall :domain this :arg0-of ( understand :arg1 ( importance :poss ( thing :mod little )  )  :arg0 ( seem :arg1 ( antique :null_edge null_tag :arg1-of black :null_edge one )  )  :location ( experience :mod restaurant )  )  )  )  )
use :arg1 ( delicious :domain pizza )  :arg1 ( mozzarellum :arg1-of fresh :arg1-of ( instead-of :arg2 ( cheese-off :arg1-of cheap :arg1-of freeze :arg1-of shredded :mod ( common :null_edge ( pizzarium :quant most )  )  )  )  )
use :arg1 ( delicious :domain pizza )  :arg1 ( mozzarellum :arg1-of fresh :arg1-of ( instead-of :arg2 ( cheese-off :arg1-of cheap :arg1-of freeze :arg1-of shredded :mod ( common :null_edge ( pizzarium :quant most )  )  )  )  )
use :arg1 ( delicious :domain pizza )  :arg1 ( mozzarellum :arg1-of fresh :arg1-of ( instead-of :arg2 ( cheese-off :arg1-of cheap :arg1-of freeze :arg1-of shredded :mod ( common :null_edge ( pizzarium :quant most )  )  )  )  )
and :op1 ( relax :arg0 ( place :arg1-of excellent )  :arg1 ( food :mod ( good :degree most :location ( city :part-of ( york :null_edge new )  )  )  )  )
and :op1 ( relax :arg0 ( place :arg1-of excellent )  :arg1 ( food :mod ( good :degree most :location ( city :part-of ( york :null_edge new )  )  )  )  )
and :op1 ( friendly :arg0 service :arg1 ( problem :topic ( and :op1 walk :op2 get )  )  )
and :op1 ( friendly :arg0 service :arg1 ( problem :topic ( and :op1 walk :op2 get )  )  )
contrast :arg1 ( crowd :arg0 atmosphere )  :arg2 ( bistro :mod great :arg1 ( vibe :mod type )  )
and :time first :domain waitress :arg1-of complete :op1 ( see :arg0 we :null_edge ( odd :null_edge 2 :arg2 ( restaurant :arg2 ( table :quant 6 )  )  )  )  :op2 ( get :arg0 waitress :arg2 wrong )
and :time first :domain waitress :arg1-of complete :op1 ( see :arg0 we :null_edge ( odd :null_edge 2 :arg2 ( restaurant :arg2 ( table :quant 6 )  )  )  )  :op2 ( get :arg0 waitress :arg2 wrong )
oily :domain food :mod bland
good :mod even :domain ( and :op1 ( good :domain food :mod really )  :op2 ( contrast :arg1 ( afford :arg1 price :degree very )  )  )
good :mod even :domain ( and :op1 ( good :domain food :mod really )  :op2 ( contrast :arg1 ( afford :arg1 price :degree very )  )  )
contrast :arg2 fish :arg1 fresh :arg2 ( fish :mod variety :mod ordinary )
contrast :arg2 fish :arg1 fresh :arg2 ( fish :mod variety :mod ordinary )
and :op1 favor :op1 ( pizza :domain meal :mod pesto :mod ( wine :quant ( bottle :mod good )  )  )  :op2 ( salad :mod house )
and :op1 favor :op1 ( pizza :domain meal :mod pesto :mod ( wine :quant ( bottle :mod good )  )  )  :op2 ( salad :mod house )
and :op1 favor :op1 ( pizza :domain meal :mod pesto :mod ( wine :quant ( bottle :mod good )  )  )  :op2 ( salad :mod house )
and :op1 favor :op1 ( pizza :domain meal :mod pesto :mod ( wine :quant ( bottle :mod good )  )  )  :op2 ( salad :mod house )
and :op2 ( bartender :mod kruno :domain ( manage :mod beverage )  :mod ( good :degree most )  :null_edge ( come :time yet :path across )  )
and :op2 ( bartender :mod kruno :domain ( manage :mod beverage )  :mod ( good :degree most )  :null_edge ( come :time yet :path across )  )
enjoy :arg1 ( and :op1 ambiance :op2 music )
enjoy :arg1 ( and :op1 ambiance :op2 music )
clear :arg1 ( and :op1 food :op2 drink :op2 service )  :arg1 ( good :degree most :location city )
clear :arg1 ( and :op1 food :op2 drink :op2 service )  :arg1 ( good :degree most :location city )
clear :arg1 ( and :op1 food :op2 drink :op2 service )  :arg1 ( good :degree most :location city )
go :arg0 i :arg4 there :null_edge ( afternoon :null_edge late )  :purpose ( and :op1 ( food :quant some :mod ( size :arg1 bite )  :time date-entity )  :op2 refleshment )
go :arg0 i :arg4 there :null_edge ( afternoon :null_edge late )  :purpose ( and :op1 ( food :quant some :mod ( size :arg1 bite )  :time date-entity )  :op2 refleshment )
understand :arg0 i :arg1 ( and :op1 ( area :arg1-of ( person :arg0-of need :arg0 you :arg1 ( come :arg1 you :location here :duration ( or :op1 ( ambiance :mod romantic :mod alluring )  :op2 ( service :quant 5 :mod star :arg0-of ( feature :arg1 ( and :op1 sommlier :op2 ( maze :arg1-of complicate :arg1 ( and :op1 ( have-org-role :arg2 captain )  :op2 back )  )  )  )  )  )  )  )  )  :op2 folk :op1 ( come-out :arg1 you :arg1 ( food :arg1-of authentic )  :arg1 taste )  )
understand :arg0 i :arg1 ( and :op1 ( area :arg1-of ( person :arg0-of need :arg0 you :arg1 ( come :arg1 you :location here :duration ( or :op1 ( ambiance :mod romantic :mod alluring )  :op2 ( service :quant 5 :mod star :arg0-of ( feature :arg1 ( and :op1 sommlier :op2 ( maze :arg1-of complicate :arg1 ( and :op1 ( have-org-role :arg2 captain )  :op2 back )  )  )  )  )  )  )  )  )  :op2 folk :op1 ( come-out :arg1 you :arg1 ( food :arg1-of authentic )  :arg1 taste )  )
understand :arg0 i :arg1 ( and :op1 ( area :arg1-of ( person :arg0-of need :arg0 you :arg1 ( come :arg1 you :location here :duration ( or :op1 ( ambiance :mod romantic :mod alluring )  :op2 ( service :quant 5 :mod star :arg0-of ( feature :arg1 ( and :op1 sommlier :op2 ( maze :arg1-of complicate :arg1 ( and :op1 ( have-org-role :arg2 captain )  :op2 back )  )  )  )  )  )  )  )  )  :op2 folk :op1 ( come-out :arg1 you :arg1 ( food :arg1-of authentic )  :arg1 taste )  )
understand :arg0 i :arg1 ( and :op1 ( area :arg1-of ( person :arg0-of need :arg0 you :arg1 ( come :arg1 you :location here :duration ( or :op1 ( ambiance :mod romantic :mod alluring )  :op2 ( service :quant 5 :mod star :arg0-of ( feature :arg1 ( and :op1 sommlier :op2 ( maze :arg1-of complicate :arg1 ( and :op1 ( have-org-role :arg2 captain )  :op2 back )  )  )  )  )  )  )  )  )  :op2 folk :op1 ( come-out :arg1 you :arg1 ( food :arg1-of authentic )  :arg1 taste )  )
understand :arg0 i :arg1 ( and :op1 ( area :arg1-of ( person :arg0-of need :arg0 you :arg1 ( come :arg1 you :location here :duration ( or :op1 ( ambiance :mod romantic :mod alluring )  :op2 ( service :quant 5 :mod star :arg0-of ( feature :arg1 ( and :op1 sommlier :op2 ( maze :arg1-of complicate :arg1 ( and :op1 ( have-org-role :arg2 captain )  :op2 back )  )  )  )  )  )  )  )  )  :op2 folk :op1 ( come-out :arg1 you :arg1 ( food :arg1-of authentic )  :arg1 taste )  )
understand :arg0 i :arg1 ( and :op1 ( area :arg1-of ( person :arg0-of need :arg0 you :arg1 ( come :arg1 you :location here :duration ( or :op1 ( ambiance :mod romantic :mod alluring )  :op2 ( service :quant 5 :mod star :arg0-of ( feature :arg1 ( and :op1 sommlier :op2 ( maze :arg1-of complicate :arg1 ( and :op1 ( have-org-role :arg2 captain )  :op2 back )  )  )  )  )  )  )  )  )  :op2 folk :op1 ( come-out :arg1 you :arg1 ( food :arg1-of authentic )  :arg1 taste )  )
understand :arg0 i :arg1 ( and :op1 ( area :arg1-of ( person :arg0-of need :arg0 you :arg1 ( come :arg1 you :location here :duration ( or :op1 ( ambiance :mod romantic :mod alluring )  :op2 ( service :quant 5 :mod star :arg0-of ( feature :arg1 ( and :op1 sommlier :op2 ( maze :arg1-of complicate :arg1 ( and :op1 ( have-org-role :arg2 captain )  :op2 back )  )  )  )  )  )  )  )  )  :op2 folk :op1 ( come-out :arg1 you :arg1 ( food :arg1-of authentic )  :arg1 taste )  )
come :time ( go :mod last :location here )  :arg1 ( t :mod waitress )  :direction back :time ( after :op1 take )
try :arg1 ( salmon :mod tandoorus )
contrast :arg1 ( save :arg1 eat :arg0 atmosphere )  :arg2 ( experience :arg0 atmosphere :location desk :arg1-of ( disappoint :degree very )  )
service :domain ( grant :arg2 ( small :domain space :compared-to most )  )  :mod ( good :degree most )  :arg0-of ( find :arg0 you :arg1 ( large :degree most :mod even :compared-to restaurant )  )
service :domain ( grant :arg2 ( small :domain space :compared-to most )  )  :mod ( good :degree most )  :arg0-of ( find :arg0 you :arg1 ( large :degree most :mod even :compared-to restaurant )  )
love :arg0 i :arg1 ( peep :arg0 atmorphere )
and :op1 ( attentive :arg0 service )  :op2 ( right :arg1 ( thing :arg1-of suggest :arg1 ( item :mod menu )  )  )
and :op1 ( attentive :arg0 service )  :op2 ( right :arg1 ( thing :arg1-of suggest :arg1 ( item :mod menu )  )  )
delicious :null_edge ( possible :arg1 ( and :time ( night :mod other )  :domain we :op1 ( meal :quant 3 )  :op2 everything )  :arg1 ( lick :arg1 ( clean :arg1 plate )  )  )
rise :time ( after :mod even :op1 ( push :arg0 ( s :mod ( famous :polarity - :mod class )  :quant ray )  )  )  :mod again :arg1 ( carry :arg1 ( legacy :poss ( person :arg0-of ( have-rel-role :arg2 father )  :mod ( have-rel-role :arg2 uncle )  )  )  :arg1 ( and :op1 ( smile :mod ( love :mod true :beneficiary community )  )  :op2 ( let :arg1 ( forget :arg1 ( pizza :mod outstanding )  )  )  )  )
contrast :arg1 ( romantic :domain environment )  :arg2 ( horrible :arg1 environment :domain food )  :arg2 ( and :op1 ( pathetic :arg0 service )  )  :arg2 ( lie :arg1 gabriellum :arg1 ( everything :degree about :arg1-of possible )  )
contrast :arg1 ( romantic :domain environment )  :arg2 ( horrible :arg1 environment :domain food )  :arg2 ( and :op1 ( pathetic :arg0 service )  )  :arg2 ( lie :arg1 gabriellum :arg1 ( everything :degree about :arg1-of possible )  )
contrast :arg1 ( romantic :domain environment )  :arg2 ( horrible :arg1 environment :domain food )  :arg2 ( and :op1 ( pathetic :arg0 service )  )  :arg2 ( lie :arg1 gabriellum :arg1 ( everything :degree about :arg1-of possible )  )
and :op2 ( and :op1 we :op1 ( crawfish :arg1-of boil-down )  :op2 mess-up :op1 ( mass-quantity :unit ton )  :op1 fun :op2 ( tasty :degree quite )  )
expect :arg0 i :arg1-of ( high :degree very )  :topic ( place :mod this )  :arg1 and :arg1 ( reserve :duration ( couple :op1 ( temporal-quantity :unit month )  )  :manner advance :beneficiary ( occasion :arg1-of special )  )
burn :time ( beyond :op1 ( and :op1 ( come :arg2 table )  :op1 recognize :op2 stringy )  )
and :domain i :op2 thaus :op2 ( sticky :domain noodle )
and :domain i :op2 thaus :op2 ( sticky :domain noodle )
contrast :null_edge i :mod actual :arg2 ( proper :null_edge null_tag )  :arg2 ( have :arg0 i :arg1 ( deliver :null_edge few )  )
thing :arg1-of offer :location ( among :op1 ( restaurant :quant all :mod new :mod avenue )  )  :arg1 this :arg1 ( value :quant one :arg1-of include :mod ( good :degree most )  :arg1 money )
multi-sentence :snt2 ( compare :condition ( compare :time frank :arg0 you :null_edge ( lunch :arg0 you :arg1-of possible :location here :arg1 ( or :op1 mcd :op2 ( shop :quant ( many :degree so )  :mod other :mod sandwich :location city )  )  )  )  :polarity - )
rude :domain hostess :arg2 ( point :mod offend )
head :condition ( craving :arg0 you :arg1 ( food :poss haru :mod great :arg2-of ( roll :mod especially :mod house )  )  :domain ( possible :arg1 ( stand :purpose ( build :arg1-of wait :arg1 outisde )  )  )  )  :location ( across :op1 street )  :prep-to ( bar :arg0 sake )
head :condition ( craving :arg0 you :arg1 ( food :poss haru :mod great :arg2-of ( roll :mod especially :mod house )  )  :domain ( possible :arg1 ( stand :purpose ( build :arg1-of wait :arg1 outisde )  )  )  )  :location ( across :op1 street )  :prep-to ( bar :arg0 sake )
lead :arg0 ( corridor :arg1-of narrow )  :arg4 ( space :mod tiny :arg1 ( counter :quant 3 :mod tiny :mod white :mod tiled )  :quant ( deal :mod great :mod mess-up :arg2 stack :consist-of ( can :mod ( volume-quantity :unit bottle )  )  :arg2 and :arg1 ( counter :arg0-of ( hold :arg1 ( entree :mod small :null_edge date-entity :quant date-entity )  )  )  )  )
lead :arg0 ( corridor :arg1-of narrow )  :arg4 ( space :mod tiny :arg1 ( counter :quant 3 :mod tiny :mod white :mod tiled )  :quant ( deal :mod great :mod mess-up :arg2 stack :consist-of ( can :mod ( volume-quantity :unit bottle )  )  :arg2 and :arg1 ( counter :arg0-of ( hold :arg1 ( entree :mod small :null_edge date-entity :quant date-entity )  )  )  )  )
lead :arg0 ( corridor :arg1-of narrow )  :arg4 ( space :mod tiny :arg1 ( counter :quant 3 :mod tiny :mod white :mod tiled )  :quant ( deal :mod great :mod mess-up :arg2 stack :consist-of ( can :mod ( volume-quantity :unit bottle )  )  :arg2 and :arg1 ( counter :arg0-of ( hold :arg1 ( entree :mod small :null_edge date-entity :quant date-entity )  )  )  )  )
lead :arg0 ( corridor :arg1-of narrow )  :arg4 ( space :mod tiny :arg1 ( counter :quant 3 :mod tiny :mod white :mod tiled )  :quant ( deal :mod great :mod mess-up :arg2 stack :consist-of ( can :mod ( volume-quantity :unit bottle )  )  :arg2 and :arg1 ( counter :arg0-of ( hold :arg1 ( entree :mod small :null_edge date-entity :quant date-entity )  )  )  )  )
lead :arg0 ( corridor :arg1-of narrow )  :arg4 ( space :mod tiny :arg1 ( counter :quant 3 :mod tiny :mod white :mod tiled )  :quant ( deal :mod great :mod mess-up :arg2 stack :consist-of ( can :mod ( volume-quantity :unit bottle )  )  :arg2 and :arg1 ( counter :arg0-of ( hold :arg1 ( entree :mod small :null_edge date-entity :quant date-entity )  )  )  )  )
great :domain food
cook :arg0 ( steak :mod succulent )  :manner precise :arg1 ( accompany :arg1-of desire :arg0 ( and :op1 ( salad :arg1-of ( look :arg1 don :arg1 ( kill :arg1 ( road :mod leafy )  )  )  )  :op2 side )  )
cook :arg0 ( steak :mod succulent )  :manner precise :arg1 ( accompany :arg1-of desire :arg0 ( and :op1 ( salad :arg1-of ( look :arg1 don :arg1 ( kill :arg1 ( road :mod leafy )  )  )  )  :op2 side )  )
cook :arg0 ( steak :mod succulent )  :manner precise :arg1 ( accompany :arg1-of desire :arg0 ( and :op1 ( salad :arg1-of ( look :arg1 don :arg1 ( kill :arg1 ( road :mod leafy )  )  )  )  :op2 side )  )
come :arg1 lunch :arg3 ( and :op1 pickel :op2 slaw :op2 ( charge :polarity - :mod extra )  )
come :arg1 lunch :arg3 ( and :op1 pickel :op2 slaw :op2 ( charge :polarity - :mod extra )  )
wine :mod decency :arg1-of ( thing :arg2-of price :arg1-of reasonable )
wine :mod decency :arg1-of ( thing :arg2-of price :arg1-of reasonable )
deliver :arg0 all :manner convenient :mod right :arg2 door
good :domain ( wine :mod even :arg0 glass )
try :arg1 terrace :location ( club :mod ( or :op1 null_tag :op2 ( water :arg1-of ( thing :arg2-of price :mod that )  )  )  )
and :op1 ( favor :domain ( dish :mod this )  )  :op2 ( get :arg1 dish :arg0 i :time always :arg1 ( and :op1 ( go :arg4 there )  :op2 tire )  )
order :arg0 i :mod also :arg2 ( change :arg1 mojito :arg1-of ( out :arg2 ( world :mod this )  )  )
service :arg1-of okay
service :domain ( thing :mod only :arg1-of ( wonderful :degree more :compared-to ( food :mod exceptional )  )  )
service :domain ( thing :mod only :arg1-of ( wonderful :degree more :compared-to ( food :mod exceptional )  )  )
awful :domain food :mod just :null_edge atrocious :mod actual
and :op1 ( sauce :domain ( soup :beneficiary udon )  :mod soy )  :op2 water
and :op1 ( sauce :domain ( soup :beneficiary udon )  :mod soy )  :op2 water
and :op1 ( sauce :domain ( soup :beneficiary udon )  :mod soy )  :op2 water
excellent :arg1 ( pasta :arg0-of oppose )  :null_edge calamarus :null_edge ( main :arg1-of fill :arg1 pasta )
excellent :arg1 ( pasta :arg0-of oppose )  :null_edge calamarus :null_edge ( main :arg1-of fill :arg1 pasta )
excellent :arg1 ( pasta :arg0-of oppose )  :null_edge calamarus :null_edge ( main :arg1-of fill :arg1 pasta )
suggest :arg0 waitress :arg0 ( wine :quant ( glass :arg1-of ( go :manner ( well :degree very )  :accompanier food )  )  )
suggest :arg0 waitress :arg0 ( wine :quant ( glass :arg1-of ( go :manner ( well :degree very )  :accompanier food )  )  )
suggest :arg0 waitress :arg0 ( wine :quant ( glass :arg1-of ( go :manner ( well :degree very )  :accompanier food )  )  )
say :arg1 ( business :quant all :destination counter :null_edge ( give :arg0 you )  )  :arg0 food :arg1 ( love :arg1 food :arg0 i :arg1 you )
say :arg1 ( business :quant all :destination counter :null_edge ( give :arg0 you )  )  :arg0 food :arg1 ( love :arg1 food :arg0 i :arg1 you )
and :op1 ( particular :arg0 we :degree very :topic sushi :null_edge ( every :arg1-of ( include :arg1 ( mix :mod ceviche :arg1-of special :arg1 ( and :op2 ( dumpling :mod crab :topic ( and :op2 ( sashimus :mod assorted )  :op1 sushi :op2 roll )  :mod ( sake :mod ( type :quant 2 )  )  )  :op2 banana )  )  )  )  )
and :op1 ( particular :arg0 we :degree very :topic sushi :null_edge ( every :arg1-of ( include :arg1 ( mix :mod ceviche :arg1-of special :arg1 ( and :op2 ( dumpling :mod crab :topic ( and :op2 ( sashimus :mod assorted )  :op1 sushi :op2 roll )  :mod ( sake :mod ( type :quant 2 )  )  )  :op2 banana )  )  )  )  )
and :op1 ( particular :arg0 we :degree very :topic sushi :null_edge ( every :arg1-of ( include :arg1 ( mix :mod ceviche :arg1-of special :arg1 ( and :op2 ( dumpling :mod crab :topic ( and :op2 ( sashimus :mod assorted )  :op1 sushi :op2 roll )  :mod ( sake :mod ( type :quant 2 )  )  )  :op2 banana )  )  )  )  )
and :op1 ( particular :arg0 we :degree very :topic sushi :null_edge ( every :arg1-of ( include :arg1 ( mix :mod ceviche :arg1-of special :arg1 ( and :op2 ( dumpling :mod crab :topic ( and :op2 ( sashimus :mod assorted )  :op1 sushi :op2 roll )  :mod ( sake :mod ( type :quant 2 )  )  )  :op2 banana )  )  )  )  )
and :op1 ( particular :arg0 we :degree very :topic sushi :null_edge ( every :arg1-of ( include :arg1 ( mix :mod ceviche :arg1-of special :arg1 ( and :op2 ( dumpling :mod crab :topic ( and :op2 ( sashimus :mod assorted )  :op1 sushi :op2 roll )  :mod ( sake :mod ( type :quant 2 )  )  )  :op2 banana )  )  )  )  )
and :op1 ( particular :arg0 we :degree very :topic sushi :null_edge ( every :arg1-of ( include :arg1 ( mix :mod ceviche :arg1-of special :arg1 ( and :op2 ( dumpling :mod crab :topic ( and :op2 ( sashimus :mod assorted )  :op1 sushi :op2 roll )  :mod ( sake :mod ( type :quant 2 )  )  )  :op2 banana )  )  )  )  )
and :op1 ( particular :arg0 we :degree very :topic sushi :null_edge ( every :arg1-of ( include :arg1 ( mix :mod ceviche :arg1-of special :arg1 ( and :op2 ( dumpling :mod crab :topic ( and :op2 ( sashimus :mod assorted )  :op1 sushi :op2 roll )  :mod ( sake :mod ( type :quant 2 )  )  )  :op2 banana )  )  )  )  )
and :op1 ( particular :arg0 we :degree very :topic sushi :null_edge ( every :arg1-of ( include :arg1 ( mix :mod ceviche :arg1-of special :arg1 ( and :op2 ( dumpling :mod crab :topic ( and :op2 ( sashimus :mod assorted )  :op1 sushi :op2 roll )  :mod ( sake :mod ( type :quant 2 )  )  )  :op2 banana )  )  )  )  )
try :arg1 ( or :op2 ( pizza :mod plain )  :op1 ( garlic :arg1-of fresh )  :op2 eggplant )
try :arg1 ( or :op2 ( pizza :mod plain )  :op1 ( garlic :arg1-of fresh )  :op2 eggplant )
try :arg1 ( or :op2 ( pizza :mod plain )  :op1 ( garlic :arg1-of fresh )  :op2 eggplant )
contrast :arg1 ( wander :degree so :arg0 server :arg1 ( around :op1 so :op1 ( clue :mod little )  )  :null_edge ( have :compared-to ( server :quant ( enough :degree more )  :beneficiary crowd )  :arg0 they :arg1 fine :arg0 you :mod just :purpose ( get :arg1 small :arg1 attend )  )  )
luck :mod good :topic ( get :arg1 table )
awful :arg0 service
say :arg0 ( menu :mod takeout )  :arg1 ( possible :arg1 ( wait :arg2 ( keep :arg1 eye :arg2 ( menu :arg1-of expand :arg1-of ( offer :arg1 ( dish :quant more :mod ( country :name ( name :op1 italian )  )  )  )  )  )  :arg1 i )  )
say :arg0 ( menu :mod takeout )  :arg1 ( possible :arg1 ( wait :arg2 ( keep :arg1 eye :arg2 ( menu :arg1-of expand :arg1-of ( offer :arg1 ( dish :quant more :mod ( country :name ( name :op1 italian )  )  )  )  )  )  :arg1 i )  )
say :arg0 ( menu :mod takeout )  :arg1 ( possible :arg1 ( wait :arg2 ( keep :arg1 eye :arg2 ( menu :arg1-of expand :arg1-of ( offer :arg1 ( dish :quant more :mod ( country :name ( name :op1 italian )  )  )  )  )  )  :arg1 i )  )
contrast :arg1 ( person :mod ( experience :arg0 i :degree most )  :arg0-of ( come :arg3 ( food :mod thai )  )  )  :arg2 ( take :arg0-of ( have-rel-role :arg2 friend )  )
and :op1 ( take :time ( ahead :null_edge ( or :null_edge 2 )  :op1 you )  :arg0 hostess :arg1 name )  :op2 ( tell :arg1 ( temporal-quantity :unit minute :quant 5 )  )
good :domain pizza
and :op1 ( cheap :null_edge ( wine :quant ( volume-quantity :unit bottle )  )  )  :op2 good
beer :quant 100 :arg1-of ( differ :arg2 ( offer :arg1 ( guest :mod thier )  :arg3 ( and :op1 make :op2 ( delicious :domain food :null_edge ( recommend :arg1 ( dish :arg0-of tortelinus )  )  )  :op2 ( person :arg0-of ( have-rel-role :arg2 husband )  :degree very )  )  )  )
beer :quant 100 :arg1-of ( differ :arg2 ( offer :arg1 ( guest :mod thier )  :arg3 ( and :op1 make :op2 ( delicious :domain food :null_edge ( recommend :arg1 ( dish :arg0-of tortelinus )  )  )  :op2 ( person :arg0-of ( have-rel-role :arg2 husband )  :degree very )  )  )  )
beer :quant 100 :arg1-of ( differ :arg2 ( offer :arg1 ( guest :mod thier )  :arg3 ( and :op1 make :op2 ( delicious :domain food :null_edge ( recommend :arg1 ( dish :arg0-of tortelinus )  )  )  :op2 ( person :arg0-of ( have-rel-role :arg2 husband )  :degree very )  )  )  )
beer :quant 100 :arg1-of ( differ :arg2 ( offer :arg1 ( guest :mod thier )  :arg3 ( and :op1 make :op2 ( delicious :domain food :null_edge ( recommend :arg1 ( dish :arg0-of tortelinus )  )  )  :op2 ( person :arg0-of ( have-rel-role :arg2 husband )  :degree very )  )  )  )
give :arg0 they :null_edge didn :arg1 ( special :mod dinner )  :time ( until :op1 ( ask :arg0 we )  )
have :arg0 you :arg1 ( lasagna :mod crabmeat :path-of ( and :op1 ( world :mod this )  :op2 ( pudding :mod ( bread :mod chocolate )  :prep-for dessert )  )  )
have :arg0 you :arg1 ( lasagna :mod crabmeat :path-of ( and :op1 ( world :mod this )  :op2 ( pudding :mod ( bread :mod chocolate )  :prep-for dessert )  )  )
have :arg0 you :arg1 ( lasagna :mod crabmeat :path-of ( and :op1 ( world :mod this )  :op2 ( pudding :mod ( bread :mod chocolate )  :prep-for dessert )  )  )
and :op2 ( save :arg1 ( word :arg2-of advise )  :arg1 ( room :arg2 ( dish :mod pasta )  )  )  :op2 ( leave-behind :time ( until :op1 you :op1 tiramisu )  )
and :op2 ( save :arg1 ( word :arg2-of advise )  :arg1 ( room :arg2 ( dish :mod pasta )  )  )  :op2 ( leave-behind :time ( until :op1 you :op1 tiramisu )  )
and :op1 ( service :mod ( good :degree very )  )  :op2 ( price :mod ( good :degree very )  )
and :op1 ( service :mod ( good :degree very )  )  :op2 ( price :mod ( good :degree very )  )
and :op1 ( go :arg0 i :time recent :arg4 ( restaurant :mod this )  :prep-with ( person :arg0-of work :quant some )  :purpose lunch )  :op2 ( have :arg0 i :arg1 ( time :mod amazing )  )
and :op1 ( impeccable :arg0 service :null_edge ( know :arg0 ( person :arg2-of staff )  )  :arg1 ( and :op1 ( know :arg1 menu )  :op2 ( present :arg1 meal )  :op2 ( attend :arg2 need )  )  )  :op2 obtrusive
and :op1 ( impeccable :arg0 service :null_edge ( know :arg0 ( person :arg2-of staff )  )  :arg1 ( and :op1 ( know :arg1 menu )  :op2 ( present :arg1 meal )  :op2 ( attend :arg2 need )  )  )  :op2 obtrusive
and :op1 ( impeccable :arg0 service :null_edge ( know :arg0 ( person :arg2-of staff )  )  :arg1 ( and :op1 ( know :arg1 menu )  :op2 ( present :arg1 meal )  :op2 ( attend :arg2 need )  )  )  :op2 obtrusive
and :op1 ( impeccable :arg0 service :null_edge ( know :arg0 ( person :arg2-of staff )  )  :arg1 ( and :op1 ( know :arg1 menu )  :op2 ( present :arg1 meal )  :op2 ( attend :arg2 need )  )  )  :op2 obtrusive
ess :null_edge ( bagel :domain ( bagel :null_edge ( or :op1 town :op2 midtown )  )  :mod ( good :degree most )  :location ny )
great :domain food :degree too
fact :mod ( annoying :degree most )  :null_edge ( seem :arg1 ( train :purpose ( drive :arg0 server :arg1 revenue )  )  )
and :op1 ( get :arg1 food :arg1 go )  :op2 ( find :arg1 bench )  :op2 ( kick :direction back :arg2 ( plate :consist-of dumpling )  )
and :op1 ( get :arg1 food :arg1 go )  :op2 ( find :arg1 bench )  :op2 ( kick :direction back :arg2 ( plate :consist-of dumpling )  )
try :arg1 ( mignon :mod filet :domain ( piece :mod just :degree most :mod tender :time ever )  )
contrast :arg1 ( sit :arg1 we :mod still :arg2 bar :arg1 ( say :arg1 ( face :direction ( away :op1 bar )  :time ( turn :arg0 we :direction around )  )  :null_edge 2 :time next :arg1 ( take-off :arg0 bartender )  )  )  :arg2 ( drink :arg0 we :arg1 sangrium )
contrast :arg1 ( sit :arg1 we :mod still :arg2 bar :arg1 ( say :arg1 ( face :direction ( away :op1 bar )  :time ( turn :arg0 we :direction around )  )  :null_edge 2 :time next :arg1 ( take-off :arg0 bartender )  )  )  :arg2 ( drink :arg0 we :arg1 sangrium )
contrast :arg1 ( sit :arg1 we :mod still :arg2 bar :arg1 ( say :arg1 ( face :direction ( away :op1 bar )  :time ( turn :arg0 we :direction around )  )  :null_edge 2 :time next :arg1 ( take-off :arg0 bartender )  )  )  :arg2 ( drink :arg0 we :arg1 sangrium )
contrast :arg1 ( sit :arg1 we :mod still :arg2 bar :arg1 ( say :arg1 ( face :direction ( away :op1 bar )  :time ( turn :arg0 we :direction around )  )  :null_edge 2 :time next :arg1 ( take-off :arg0 bartender )  )  )  :arg2 ( drink :arg0 we :arg1 sangrium )
recommend :arg1 ( overlook :arg1 ( menu :mod sake )  )
and :op1 ( amaze :arg0 drink :time ( till :op1 date-entity )  )
amr-unknown :arg2 ( trang :domain i :mod nha :mod literal :beneficiary ( cube :arg1 beef )  )  :arg1 ( re :mod good )
and :quant all :op1 ( outstanding :domain ( ambiance :mod ( wine :poss ( service :mod select )  )  )  )  :op2 ( deserve :arg0 ambiance :arg1 recognize )
and :quant all :op1 ( outstanding :domain ( ambiance :mod ( wine :poss ( service :mod select )  )  )  )  :op2 ( deserve :arg0 ambiance :arg1 recognize )
and :quant all :op1 ( outstanding :domain ( ambiance :mod ( wine :poss ( service :mod select )  )  )  )  :op2 ( deserve :arg0 ambiance :arg1 recognize )
seat :arg1 we :manner prompt :arg1 ( reserve :arg0 we )  :time ( after :op1 ( slow :arg1 service )  )
seat :arg1 we :manner prompt :arg1 ( reserve :arg0 we )  :time ( after :op1 ( slow :arg1 service )  )
and :op2 ( service :mod really :mod also )  :op1 good :op2 friendly
and :op2 ( service :mod really :mod also )  :op1 good :op2 friendly
contrast :arg2 ( good :domain food :degree pretty :domain ( portion :mod ( small :degree very )  )  :domain dessert )  :arg2 ( flavorless :degree little )  :arg2 and
contrast :arg2 ( good :domain food :degree pretty :domain ( portion :mod ( small :degree very )  )  :domain dessert )  :arg2 ( flavorless :degree little )  :arg2 and
and :op1 ( set :arg2 ( street :mod small )  :arg1 ( noise :polarity - :mod traffic )  )
and :op1 ( live :location shanghai :degree ( most :part-of life )  )  :op2 ( think :arg0 most :arg1 ( comparable :arg1 food :arg2 ( restaurant :mod flagship :mod ( bo :mod ( person :name ( name :op1 green )  )  )  :location there )  )  )
recommend :arg0 i :degree high :arg1 ( st :mod cafe )
s :arg0 bart :arg1 ( and :op1 food :op2 ambience :op2 ( service :arg1-of wonderful )  )
recommend :arg0 i :degree high :arg1 ( st :mod cafe )
s :arg0 bart :arg1 ( and :op1 food :op2 ambience :op2 ( service :arg1-of wonderful )  )
recommend :arg0 i :degree high :arg1 ( st :mod cafe )
s :arg0 bart :arg1 ( and :op1 food :op2 ambience :op2 ( service :arg1-of wonderful )  )
restaurant :domain this :arg1-of nice :condition ( look :arg0 you :arg1 ( place :mod good )  :arg1 ( host :arg0 you :arg1 ( meet :mod intimate :mod dinner :prep-with ( person :arg1-of associate :mod business )  )  )  )
love :arg0 ( person :arg0-of study :quant all )  :arg1 ( place :mod this )  :arg1 ( atmosphere :mod fun :mod young )
service :domain ( food :location here )  :mod great :prep-in ( name :arg2 cantonese )
contrast :arg1 ( stand :arg1 nothing :arg2 cook )
use :arg0 joya :arg2 ( spot :arg1-of cool :manner ( and :op1 ( food :mod decency )  :op2 ( atmosphere :mod colorful :arg1-of relax )  )  )
use :arg0 joya :arg2 ( spot :arg1-of cool :manner ( and :op1 ( food :mod decency )  :op2 ( atmosphere :mod colorful :arg1-of relax )  )  )
and :domain ( fixe :mod prix )  :domain menu :op2 ( penny :mod every )  :op2 ( get :arg0 you :arg1 ( more :compared-to enough :compared-to ( both :null_edge ( and :op1 quantity :op2 quality )  )  )  )
and :domain ( fixe :mod prix )  :domain menu :op2 ( penny :mod every )  :op2 ( get :arg0 you :arg1 ( more :compared-to enough :compared-to ( both :null_edge ( and :op1 quantity :op2 quality )  )  )  )
and :domain ( fixe :mod prix )  :domain menu :op2 ( penny :mod every )  :op2 ( get :arg0 you :arg1 ( more :compared-to enough :compared-to ( both :null_edge ( and :op1 quantity :op2 quality )  )  )  )
and :op1 ( time :arg0 i :location here :null_edge 3 :arg1-of lunch )  :op1 ( favor :quant 1 :location city )
try :arg1 ( have :arg0 i :arg1 ( egg :mod ( benedict :purpose ( brunch :arg1-of bad :mod ( life :mod entire )  )  )  )  )  :arg0 i :arg1 ( remove :arg1 ( sauce :mod hollondaise )  :arg1-of complete :arg1 ( that :arg1-of fail )  )
try :arg1 ( have :arg0 i :arg1 ( egg :mod ( benedict :purpose ( brunch :arg1-of bad :mod ( life :mod entire )  )  )  )  )  :arg0 i :arg1 ( remove :arg1 ( sauce :mod hollondaise )  :arg1-of complete :arg1 ( that :arg1-of fail )  )
try :arg1 ( have :arg0 i :arg1 ( egg :mod ( benedict :purpose ( brunch :arg1-of bad :mod ( life :mod entire )  )  )  )  )  :arg0 i :arg1 ( remove :arg1 ( sauce :mod hollondaise )  :arg1-of complete :arg1 ( that :arg1-of fail )  )
and :op1 ( work :arg0 i :arg1-of near )  :op2 ( have :arg0 i :arg1 ( oatmeal :mod ( good :degree most )  :location neighborhood :arg1 ( or :op2 package :op2 quick :op1 cook :op2 item )  )  )
bad :degree too :arg1 ( wasn :mod food )  :mod ( heritage :arg1-of same )
except :arg1 ( offer :arg1 ( bass :mod ( person :mod ( country :name ( name :op1 chilean )  )  )  :mod sea )  )  :arg1 ( contrast :arg1 ( look :arg0 menu :arg1 good )  :arg2 ( offer :arg1 ( special :arg1-of ( write :arg2 board :location outside )  )  )  )
except :arg1 ( offer :arg1 ( bass :mod ( person :mod ( country :name ( name :op1 chilean )  )  )  :mod sea )  )  :arg1 ( contrast :arg1 ( look :arg0 menu :arg1 good )  :arg2 ( offer :arg1 ( special :arg1-of ( write :arg2 board :location outside )  )  )  )
except :arg1 ( offer :arg1 ( bass :mod ( person :mod ( country :name ( name :op1 chilean )  )  )  :mod sea )  )  :arg1 ( contrast :arg1 ( look :arg0 menu :arg1 good )  :arg2 ( offer :arg1 ( special :arg1-of ( write :arg2 board :location outside )  )  )  )
except :arg1 ( offer :arg1 ( bass :mod ( person :mod ( country :name ( name :op1 chilean )  )  )  :mod sea )  )  :arg1 ( contrast :arg1 ( look :arg0 menu :arg1 good )  :arg2 ( offer :arg1 ( special :arg1-of ( write :arg2 board :location outside )  )  )  )
and :op1 ( good :domain food :mod really :domain ( soup :arg0 i :mod onion )  :arg2 ( good :degree most :time ever )  )
and :op1 ( good :domain food :mod really :domain ( soup :arg0 i :mod onion )  :arg2 ( good :degree most :time ever )  )
and :op1 ( restaurant :mod overall :arg1-of solid :degree ( less :null_edge wine )  :manner-of ( deal :arg2 solid )  )
contrast :arg1 ( intimidate :arg1 ( hole :mod literal :arg1-of complete :location wall )  :degree bit :arg1-of ( cause :arg1 ( hesitate :arg0 ( t :null_edge don )  :arg1 ( ask :arg2 t :arg1 ( help :arg1 get )  )  )  )  )  :arg2 ( get :arg0 you :source that :arg1 ( welcome :degree very :arg0 ( person :arg2-of staff :mod friendly )  :arg1 you )  )
place :arg1-of ( base :arg2 ( review :mod dinner )  )  :domain this :arg0-of ( reconsider :arg1 ( revisit :beneficiary that )  :mod ( definite :arg3 ( sum :mod dim )  :mod again )  )
place :arg1-of ( base :arg2 ( review :mod dinner )  )  :domain this :arg0-of ( reconsider :arg1 ( revisit :beneficiary that )  :mod ( definite :arg3 ( sum :mod dim )  :mod again )  )
contrast :arg1 ( cost :arg1 ( turn :arg1 ( roll :arg1-of regular )  :arg2 ( roll :location inside :mod out )  )  :arg1 size :arg1 ( and :op2 ( s :arg1 ( rice :mod just )  )  )  )  :arg2 more
contrast :arg1 ( cost :arg1 ( turn :arg1 ( roll :arg1-of regular )  :arg2 ( roll :location inside :mod out )  )  :arg1 size :arg1 ( and :op2 ( s :arg1 ( rice :mod just )  )  )  )  :arg2 more
contrast :arg1 ( cost :arg1 ( turn :arg1 ( roll :arg1-of regular )  :arg2 ( roll :location inside :mod out )  )  :arg1 size :arg1 ( and :op2 ( s :arg1 ( rice :mod just )  )  )  )  :arg2 more
contrast :arg1 ( cost :arg1 ( turn :arg1 ( roll :arg1-of regular )  :arg2 ( roll :location inside :mod out )  )  :arg1 size :arg1 ( and :op2 ( s :arg1 ( rice :mod just )  )  )  )  :arg2 more
possible :arg2 ( do :time final )  :arg1 ( make :arg0 he :arg1 ( and :op1 gin :op2 tonic )  :arg1 ( find :arg0 ( t :null_edge couldn )  :arg1 tonic )  )
possible :arg2 ( do :time final )  :arg1 ( make :arg0 he :arg1 ( and :op1 gin :op2 tonic )  :arg1 ( find :arg0 ( t :null_edge couldn )  :arg1 tonic )  )
contrast :arg1 ( sum :mod dim )  :arg2 ( taste :arg1 sum :arg1 fresh )  :arg2 and :arg2 ( recommend :arg1 ( look :arg0 ( dish :mod little )  :arg1 don :arg1 steamy )  :arg1 ( note :mod also :arg1 ( lack :arg1 ( country :name ( name :op1 chinese )  )  )  :location here )  )
contrast :arg1 ( sum :mod dim )  :arg2 ( taste :arg1 sum :arg1 fresh )  :arg2 and :arg2 ( recommend :arg1 ( look :arg0 ( dish :mod little )  :arg1 don :arg1 steamy )  :arg1 ( note :mod also :arg1 ( lack :arg1 ( country :name ( name :op1 chinese )  )  )  :location here )  )
get :arg2 ( ok :arg0 service )  :arg0 ( include :quant some )  :arg1 ( ask :arg0 they )
go :condition ( want :arg0 you :arg1 ( thaus :mod good :null_edge authentic )  )  :arg1 ( place :mod this )
recommend :arg0 i :arg1 ( get :arg1 reserve :null_edge ( see :mod even :arg0 we :arg1 ( seat :prep-without one )  )  )
chicken :domain ( thing :mod only :arg1-of ( enjoy :degree moderate )  )  :arg1-of grilled :arg1-of ( special :prep-with ( puree :mod edamame )  )
try :condition ( want :arg0 you :arg1 ( or :op1 ( duck :mod some :mod roast )  :op2 pork :op2 chicken )  :arg1 ( rice :prep-with ginger )  )
try :condition ( want :arg0 you :arg1 ( or :op1 ( duck :mod some :mod roast )  :op2 pork :op2 chicken )  :arg1 ( rice :prep-with ginger )  )
try :condition ( want :arg0 you :arg1 ( or :op1 ( duck :mod some :mod roast )  :op2 pork :op2 chicken )  :arg1 ( rice :prep-with ginger )  )
leave-behind :arg1 ( order :arg0 you :arg0 menu )  :arg0 you :arg1 ( feel :arg0 you :time ( miss :arg0 you :arg1 ( experience :degree full )  )  )
accomodating :domain ( person :arg2-of staff )  :degree very
go :arg0 i :arg4 ( night :null_edge ( frisco :mod del :weekday ( event :name ( name :op1 friday )  )  )  )  :arg0 ( person :arg0-of ( have-rel-role :arg2 boyfriend :purpose ( reserve :quant 8 :quant 00 )  )  )
and :op2 have :op2 ( and :op2 ( see :arg1 ( agree :arg0 you )  )  :op1 ( multi-sentence :arg1 ( favor :li ( name :op1 a )  :arg1 dinner :location here )  )  )
and :op2 ( style :mod ( popular :degree very )  )  :op1 sake :op2 ( portion :mod small :domain ( dish :arg1-of friendly )  )
and :op2 ( style :mod ( popular :degree very )  )  :op1 sake :op2 ( portion :mod small :domain ( dish :arg1-of friendly )  )
and :op1 ( terrific :domain food :manner overbear )  :op2 ( attentive :arg1 ( service :mod classy )  )
and :op1 ( terrific :domain food :manner overbear )  :op2 ( attentive :arg1 ( service :mod classy )  )
place :domain this :mod amazing :location-of ( try :arg1 ( roll :quant some :mod rotus )  )
make :arg1 ( and :op1 ( ingredient :arg1-of fresh )  :op2 everything )  :arg1 ( order :arg0 and )
xconcept :x ( have :arg0 we :arg1 ( problem :quant any )  :arg2 ( charge :arg0 we :arg1 ( or :op1 meal :op2 tip :op2 ( deliver :arg0 we :arg1 food :arg1-of quick )  :op2 ( live :arg0 we :arg0 we :mod ( only :null_edge ( few :op1 ( temporal-quantity :unit minute )  )  )  :manner walk )  )  )  )  :x ( contrast :arg1 and )
xconcept :x ( have :arg0 we :arg1 ( problem :quant any )  :arg2 ( charge :arg0 we :arg1 ( or :op1 meal :op2 tip :op2 ( deliver :arg0 we :arg1 food :arg1-of quick )  :op2 ( live :arg0 we :arg0 we :mod ( only :null_edge ( few :op1 ( temporal-quantity :unit minute )  )  )  :manner walk )  )  )  )  :x ( contrast :arg1 and )
xconcept :x ( have :arg0 we :arg1 ( problem :quant any )  :arg2 ( charge :arg0 we :arg1 ( or :op1 meal :op2 tip :op2 ( deliver :arg0 we :arg1 food :arg1-of quick )  :op2 ( live :arg0 we :arg0 we :mod ( only :null_edge ( few :op1 ( temporal-quantity :unit minute )  )  )  :manner walk )  )  )  )  :x ( contrast :arg1 and )
service :arg1 ( and :op1 quick :op2 friendly )
contrast :arg1 ( tasty :arg1 they )  :arg2 ( suggest :arg0 they :mod only :arg1 ( eat :arg1 one :arg1 meat :arg1-of ( cause :arg0 ( tend :arg2 ( mesh :arg2 ( system :arg1-of average :mod digestive )  :manner ( good :degree that )  )  )  )  )  )
and :op1 ( try :arg1 ( dog :arg1-of hot )  :mod too :arg0 they )  :op1 they :op1 snappy :op2 delicious
deliver :manner fast :mod too
unbearable :arg1 ( level :mod noise )  :domain converse
size :domain ( pan :arg1-of personal )  :arg1-of perfect :time ( night :mod hunger )
recommend :degree high :arg1 ( and :op1 ( roll :mod spicy :mod fry :mod clam )  :op2 ( roll :mod spider )  )
recommend :degree high :arg1 ( and :op1 ( roll :mod spicy :mod fry :mod clam )  :op2 ( roll :mod spider )  )
get :null_edge ( include :time ( early :arg1-of ( comment :arg3 restaurant )  )  )  :arg1 ( menu :quant ( some :arg1-of experiment )  :manner ( way :mod positive )  )
great :domain atmosphere :condition ( look :arg1 ( and :op1 ( scene :arg1-of ( lay :arg2 back )  :arg1-of ( inexpensive :arg2 ( spend :arg3 ( afternoon :part-of weekend )  )  )  )  )  )
attract :arg1 ( odd :prep-for ( location :name ( name :op1 b )  :mod ave )  :null_edge ( odd :mod just )  )  :arg0 place :arg1 ( crowd :mod eclectic :arg0-of say )
restaurant :arg1-of ( instead-of :arg2 ( waste :arg1 time :location here )  )  :mod support :arg0-of ( care :arg1 food )
and :op1 ( get :mod just :direction back :arg2 lunch :prep-at tamarind )  :op2 excellent
comparable :arg0 ( and :op1 ( head :location ( above :op1 ( neighboor :medium ( mahal :null_edge east :null_edge ( st :null_edge 6 )  :mod taj )  )  )  )  :op2 shoulder )  :mod also :degree very :arg1 ( quality :mod food )  :arg2 ( s :null_edge ( overpraised :degree much )  :arg1 and )
promise :arg0 ( man :arg0-of host )  :arg1 ( save :arg0 man :arg1 table :purpose ( party :null_edge 7 )  )  :time ( sit :arg1 ( party :null_edge 2 )  :arg2 ( table :mod very :arg0-of save )  )  :arg2 ( mean :arg2 ( open :direction around )  )
promise :arg0 ( man :arg0-of host )  :arg1 ( save :arg0 man :arg1 table :purpose ( party :null_edge 7 )  )  :time ( sit :arg1 ( party :null_edge 2 )  :arg2 ( table :mod very :arg0-of save )  )  :arg2 ( mean :arg2 ( open :direction around )  )
promise :arg0 ( man :arg0-of host )  :arg1 ( save :arg0 man :arg1 table :purpose ( party :null_edge 7 )  )  :time ( sit :arg1 ( party :null_edge 2 )  :arg2 ( table :mod very :arg0-of save )  )  :arg2 ( mean :arg2 ( open :direction around )  )
try :arg1 cheesecake
and :op1 ( thing :manner-of proceed :time ( sit :arg1 we :manner ( eat :arg0 we :arg1 ( food :arg1-of subpar )  )  :arg0 manage )  :arg0 manage )  :op2 ( berate :arg0 manage :arg1 ( person :arg1-of employ :quant couple )  :arg2 ( put :arg0 person :arg1 ( container :mod wrong )  :arg2 condiment )  )  :op2 ( explain :arg0 manage :mod ( expensive :domain container )  )
and :op1 ( thing :manner-of proceed :time ( sit :arg1 we :manner ( eat :arg0 we :arg1 ( food :arg1-of subpar )  )  :arg0 manage )  :arg0 manage )  :op2 ( berate :arg0 manage :arg1 ( person :arg1-of employ :quant couple )  :arg2 ( put :arg0 person :arg1 ( container :mod wrong )  :arg2 condiment )  )  :op2 ( explain :arg0 manage :mod ( expensive :domain container )  )
and :op1 ( thing :manner-of proceed :time ( sit :arg1 we :manner ( eat :arg0 we :arg1 ( food :arg1-of subpar )  )  :arg0 manage )  :arg0 manage )  :op2 ( berate :arg0 manage :arg1 ( person :arg1-of employ :quant couple )  :arg2 ( put :arg0 person :arg1 ( container :mod wrong )  :arg2 condiment )  )  :op2 ( explain :arg0 manage :mod ( expensive :domain container )  )
and :op1 ( thing :manner-of proceed :time ( sit :arg1 we :manner ( eat :arg0 we :arg1 ( food :arg1-of subpar )  )  :arg0 manage )  :arg0 manage )  :op2 ( berate :arg0 manage :arg1 ( person :arg1-of employ :quant couple )  :arg2 ( put :arg0 person :arg1 ( container :mod wrong )  :arg2 condiment )  )  :op2 ( explain :arg0 manage :mod ( expensive :domain container )  )
and :op1 ( thing :manner-of proceed :time ( sit :arg1 we :manner ( eat :arg0 we :arg1 ( food :arg1-of subpar )  )  :arg0 manage )  :arg0 manage )  :op2 ( berate :arg0 manage :arg1 ( person :arg1-of employ :quant couple )  :arg2 ( put :arg0 person :arg1 ( container :mod wrong )  :arg2 condiment )  )  :op2 ( explain :arg0 manage :mod ( expensive :domain container )  )
incredible :arg0 ( and :op1 ( food :mod great :mod ( country :name ( name :op1 indian )  )  )  :op2 service )
incredible :arg0 ( and :op1 ( food :mod great :mod ( country :name ( name :op1 indian )  )  )  :op2 service )
and :op1 ( and :op1 ( nice :arg1 decor :arg1 ( and :op1 ( present :arg1 food :arg2 simple :mod very )  :op2 cook )  )  :op2 ( minimalist :domain decor )  :op2 ( match :arg1 ( list :arg2 wine )  :arg1 food :manner ( well :degree very )  )  )
and :op1 ( and :op1 ( nice :arg1 decor :arg1 ( and :op1 ( present :arg1 food :arg2 simple :mod very )  :op2 cook )  )  :op2 ( minimalist :domain decor )  :op2 ( match :arg1 ( list :arg2 wine )  :arg1 food :manner ( well :degree very )  )  )
and :op1 ( and :op1 ( nice :arg1 decor :arg1 ( and :op1 ( present :arg1 food :arg2 simple :mod very )  :op2 cook )  )  :op2 ( minimalist :domain decor )  :op2 ( match :arg1 ( list :arg2 wine )  :arg1 food :manner ( well :degree very )  )  )
and :op1 ( and :op1 ( nice :arg1 decor :arg1 ( and :op1 ( present :arg1 food :arg2 simple :mod very )  :op2 cook )  )  :op2 ( minimalist :domain decor )  :op2 ( match :arg1 ( list :arg2 wine )  :arg1 food :manner ( well :degree very )  )  )
and :domain i :op2 ( dish :mod salmon )  :op2 ( expect :arg1 ( flavor :mod ( type :quant some )  )  )  :op2 ( contrast :arg2 ( fine :arg1 ( thing :arg2-of price :arg1-of pay )  )  )
and :domain i :op2 ( dish :mod salmon )  :op2 ( expect :arg1 ( flavor :mod ( type :quant some )  )  )  :op2 ( contrast :arg2 ( fine :arg1 ( thing :arg2-of price :arg1-of pay )  )  )
order :arg0 we :arg1 ( tuna :arg1-of melt )  :time ( come-out :arg1 ( cheese-off :arg1-of out :arg1-of ( make :mod just :arg1 ( sandwich :mod tuna )  )  )  )
order :arg0 we :arg1 ( tuna :arg1-of melt )  :time ( come-out :arg1 ( cheese-off :arg1-of out :arg1-of ( make :mod just :arg1 ( sandwich :mod tuna )  )  )  )
order :arg0 we :arg1 ( tuna :arg1-of melt )  :time ( come-out :arg1 ( cheese-off :arg1-of out :arg1-of ( make :mod just :arg1 ( sandwich :mod tuna )  )  )  )
like :mod especially :arg1 ( and :op1 chicken :op1 tikka :op2 ( and :op2 naan )  :op2 dal )
like :mod especially :arg1 ( and :op1 chicken :op1 tikka :op2 ( and :op2 naan )  :op2 dal )
like :mod especially :arg1 ( and :op1 chicken :op1 tikka :op2 ( and :op2 naan )  :op2 dal )
turn-out :arg1 ( attentive :domain waiter )  :arg0 bill :arg2 table :time ( before :op1 ( finish :arg1 we )  )
turn-out :arg1 ( attentive :domain waiter )  :arg0 bill :arg2 table :time ( before :op1 ( finish :arg1 we )  )
look :arg0 restaurant :arg1 ( lawn :arg1-of beautiful :arg0 ( person :name ( name :op1 green )  )  :arg2 ( and :op1 ( river :mod hudson )  :op2 ( statue :mod liberty )  )  )
and :op1 ( tasty :domain sangrium :degree pretty :time ( day :arg1-of hot :arg1-of muggy )  )  :op2 ( good :arg1 sangrium )
and :op1 ( eat :arg0 ( t :null_edge don )  :location here :arg0 you )  :op2 ( work :arg0 t :arg0 you :arg1 ( door :mod next )  )
place :condition ( want :arg1 ( food :mod great :mod ( plus :op2 ( service :mod great )  )  )  )  :domain roxy :location-of avoid
place :condition ( want :arg1 ( food :mod great :mod ( plus :op2 ( service :mod great )  )  )  )  :domain roxy :location-of avoid
have :arg0 i :arg1 ( ravioli :mod ( good :degree most )  )  :time ever
and :op1 ( bunch :location here :time now )  :op2 ( outstanding :domain service :time always )
bill :quant ( approximately :op1 25 )  :null_edge 2 :time lunch :prep-without ( thing :arg1-of drink )
bill :quant ( approximately :op1 25 )  :null_edge 2 :time lunch :prep-without ( thing :arg1-of drink )
bill :quant ( approximately :op1 25 )  :null_edge 2 :time lunch :prep-without ( thing :arg1-of drink )
sushi :quant ( some :manner ( frank :mod quite )  :domain this )  :arg1-of bad :arg1-of ( try :time ever )
ok :null_edge ( great :domain food )  :arg0 service
ok :null_edge ( great :domain food )  :arg0 service
expensive :domain ( tag :mod overall :arg1 price )  :degree very :degree very :arg1 ( something :arg1-of ( expect :arg0 i )  )
food :domain spice :mod great :mod thai :arg1-of ( love :arg0 ( appetizer :mod inexpensive )  )
food :domain spice :mod great :mod thai :arg1-of ( love :arg0 ( appetizer :mod inexpensive )  )
attentive :arg0 service
contrast :arg1 ( make :arg0 he :mod only :arg1 ( mozzarellum :arg0-of ( make :location home )  )  )  :arg2 ( fresh :domain ( pie :mod every )  :degree ultra )
contrast :arg1 ( make :arg0 he :mod only :arg1 ( mozzarellum :arg0-of ( make :location home )  )  )  :arg2 ( fresh :domain ( pie :mod every )  :degree ultra )
overdo :arg1 fish
know :null_edge ( have :arg1 ( ceiling :arg1-of ( paint :arg2 ( hand :mod spectacular )  )  :arg1-of high )  )  :arg0 you :arg1 ( outside :mod world )
know :null_edge ( have :arg1 ( ceiling :arg1-of ( paint :arg2 ( hand :mod spectacular )  )  :arg1-of high )  )  :arg0 you :arg1 ( outside :mod world )
and :op1 ( visit :arg0 we :arg1 ( bar :consist-of bread )  :time ( temporal-quantity :unit week :null_edge ( event :name ( name :op1 january )  )  :mod restaurant )  )  :op2 ( please :arg1 bar :degree so :arg2 ( and :op1 ( thing :arg0-of select :mod menu )  :op2 service )  )
and :op1 ( visit :arg0 we :arg1 ( bar :consist-of bread )  :time ( temporal-quantity :unit week :null_edge ( event :name ( name :op1 january )  )  :mod restaurant )  )  :op2 ( please :arg1 bar :degree so :arg2 ( and :op1 ( thing :arg0-of select :mod menu )  :op2 service )  )
ensure :mod also :arg2 ( pay :arg0 you :arg1 ( attend :arg1 ( music :arg1-of pipe )  )  :arg3 music )  :arg1 ( select :mod ( weird :degree quite )  )
point :arg0 establish :mod big :arg1 ( and :op1 presentation :op2 style )
food :mod good
friendly :domain ( wait :arg1 ( person :arg2-of staff )  )  :degree very :concession ( efficient :arg1 wait :degree over )
good :domain ( sum :mod dim )  :degree very
and :op1 ( friendly :domain service :time always )  :op2 ( efficient :arg1 service )
and :op1 ( go :arg4 there )  :op2 ( have :arg1 ( combine :arg2 ( and :op1 ( dish :arg1-of differ :mod seafood )  :op2 appetizer )  )  )
and :op1 ( go :arg4 there )  :op2 ( have :arg1 ( combine :arg2 ( and :op1 ( dish :arg1-of differ :mod seafood )  :op2 appetizer )  )  )
place :mod great :beneficiary ( or :op1 ( date-entity :mod casual )  :op2 ( entertain :arg1 client :purpose lunch )  )
apologize :domain ( all :arg1-of ( receive :arg0 we )  )  :condition ( leave :arg0 we :arg1 ( see :arg1 show :manner dinner )  )
ask :arg0 ( table :mod next-to )  :arg1 ( crush :arg1 grape :time ( arrive :arg4 ( wine :quant ( bottle :mod ( overdue :arg1-of long )  )  )  :time final )  )
ask :arg0 ( table :mod next-to )  :arg1 ( crush :arg1 grape :time ( arrive :arg4 ( wine :quant ( bottle :mod ( overdue :arg1-of long )  )  )  :time final )  )
good :domain price :degree very
possible :arg1 ( and :op1 ( catch-up :arg0 we :arg1 ( eye :part-of waiter )  )  :op2 ignore )
and :op1 plain :op2 simple :op1 ( food :domain it :arg1-of bad :mod thai )
vs :mod usual :li 3
item :quant 4 :arg1-of dish
point :condition ( excellent :arg1 ( staple :mod certain )  :arg1 ( burger :poss ( pasta :quant some )  )  )  :domain food :mod really
point :condition ( excellent :arg1 ( staple :mod certain )  :arg1 ( burger :poss ( pasta :quant some )  )  )  :domain food :mod really
point :condition ( excellent :arg1 ( staple :mod certain )  :arg1 ( burger :poss ( pasta :quant some )  )  )  :domain food :mod really
point :condition ( excellent :arg1 ( staple :mod certain )  :arg1 ( burger :poss ( pasta :quant some )  )  )  :domain food :mod really
contrast :arg2 ( sum :mod dim :mod ( so :degree so )  :mod spectacular )
food :degree ( so :degree so )
seem :arg1 ( concern :arg0 waitress :degree more :arg0 ( look :arg1 good )  :compared-to ( waitress :mod actual )  )
xconcept :x ( and :op1 ( large :domain place :compared-to most )  :op2 ( feature :arg1 ( seat :manner adequate )  :manner ( joint :quant most )  )  :op2 ( bar :arg1-of ( deserve :arg1 mention )  )  )  :x and
xconcept :x ( and :op1 ( large :domain place :compared-to most )  :op2 ( feature :arg1 ( seat :manner adequate )  :manner ( joint :quant most )  )  :op2 ( bar :arg1-of ( deserve :arg1 mention )  )  )  :x and
xconcept :x ( and :op1 ( large :domain place :compared-to most )  :op2 ( feature :arg1 ( seat :manner adequate )  :manner ( joint :quant most )  )  :op2 ( bar :arg1-of ( deserve :arg1 mention )  )  )  :x and
throw :arg1 ( fiance :mod ( dinner :null_edge surprise :mod birthday )  )  :location here :arg0 couldn :arg2 happier
food
and :op1 ( music :mod good )  :op2 ( food :mod great )  :arg2-of ( price :arg1 ( service :mod speedy )  :arg1-of afford )
and :op1 ( music :mod good )  :op2 ( food :mod great )  :arg2-of ( price :arg1 ( service :mod speedy )  :arg1-of afford )
and :op1 ( music :mod good )  :op2 ( food :mod great )  :arg2-of ( price :arg1 ( service :mod speedy )  :arg1-of afford )
and :op1 ( music :mod good )  :op2 ( food :mod great )  :arg2-of ( price :arg1 ( service :mod speedy )  :arg1-of afford )
and :op2 ( sandwich :mod lobster :mod 24 :quant ( enough :purpose good :mod near :purpose ( warrant :arg1 ( price :mod that )  )  )  )
and :op1 ( have :null_edge possible :arg0 ( person :arg0-of own )  :arg1 ( smile :time always )  )  :op2 ( greet :arg1-of warm :arg1 you )
and :domain side :op2 ( salty :arg0 side :degree incredible )
available :polarity - :arg2 ( seafood :quant all :location menu )  :arg2-of ( except :arg1 salmon )  :arg1-of ( cause :arg0 ( reason :mod some )  )
available :polarity - :arg2 ( seafood :quant all :location menu )  :arg2-of ( except :arg1 salmon )  :arg1-of ( cause :arg0 ( reason :mod some )  )
available :polarity - :arg2 ( seafood :quant all :location menu )  :arg2-of ( except :arg1 salmon )  :arg1-of ( cause :arg0 ( reason :mod some )  )
and :op1 ( excellent :arg1 beverage )  :op2 ( good :arg1 beverage :domain dessert )
and :op1 ( excellent :arg1 beverage )  :op2 ( good :arg1 beverage :domain dessert )
and :op1 ( rude :arg0 ( and :op1 hostess :op2 waitress )  :degree incredible )  :op2 ( do :arg1 ( everything :arg1-of ( possible :arg1 rush )  )  )
and :op1 ( rude :arg0 ( and :op1 hostess :op2 waitress )  :degree incredible )  :op2 ( do :arg1 ( everything :arg1-of ( possible :arg1 rush )  )  )
wouldn :arg2 ( next :op1 time )  :null_edge ( dare :arg0 we :arg1 ( order :arg1 ( anything :mod else )  :arg1 ( and :name ( name :op1 asian )  :op1 ( appetizer :quant some :arg1-of simple )  :op2 drink )  )  )
wouldn :arg2 ( next :op1 time )  :null_edge ( dare :arg0 we :arg1 ( order :arg1 ( anything :mod else )  :arg1 ( and :name ( name :op1 asian )  :op1 ( appetizer :quant some :arg1-of simple )  :op2 drink )  )  )
and :op3 ( think :arg1 it )  :op2 ( wait :arg2 stay :arg2 ( win :arg0 you :arg1-of disappoint )  )
say :arg0 i :arg1 ( beautiful :arg1 ( view :arg1 nyc )  :degree so )
have :arg0 you :null_edge ( null_tag :arg1-of nice )  :arg1 ( accent :name ( name :op1 asian )  )  :arg1 ( tan :arg1-of long )  :mod good :arg2 slope
ambiance :mod ( dinner :arg1-of nice )  :arg0 i :arg1-of nice :part-of ( food :mod ( good :degree very )  )
ambiance :mod ( dinner :arg1-of nice )  :arg0 i :arg1-of nice :part-of ( food :mod ( good :degree very )  )
ambiance :mod ( dinner :arg1-of nice )  :arg0 i :arg1-of nice :part-of ( food :mod ( good :degree very )  )
have :arg1 otherwise :arg0 ( place :mod this )  :arg1 ( and :op1 ( service :mod great )  :op2 price :op2 and :op2 ( atmosphere :arg1-of nice :arg1-of friendly )  )
have :arg1 otherwise :arg0 ( place :mod this )  :arg1 ( and :op1 ( service :mod great )  :op2 price :op2 and :op2 ( atmosphere :arg1-of nice :arg1-of friendly )  )
have :arg1 otherwise :arg0 ( place :mod this )  :arg1 ( and :op1 ( service :mod great )  :op2 price :op2 and :op2 ( atmosphere :arg1-of nice :arg1-of friendly )  )
recommend :degree high :arg1 ( value :mod this :degree great )  :arg1 ( and :op1 ( sushi :arg1-of excellent )  :op2 service )
recommend :degree high :arg1 ( value :mod this :degree great )  :arg1 ( and :op1 ( sushi :arg1-of excellent )  :op2 service )
recommend :degree high :arg1 ( value :mod this :degree great )  :arg1 ( and :op1 ( sushi :arg1-of excellent )  :op2 service )
serve :arg1 ( place :mod this )  :manner ( good :degree ( more :quant much )  )  :arg0 ( run :arg0 ( group :arg0-of ( understand :mod actual :arg1 ( service :poss customer )  )  )  )
serve :arg1 ( place :mod this )  :manner ( good :degree ( more :quant much )  )  :arg0 ( run :arg0 ( group :arg0-of ( understand :mod actual :arg1 ( service :poss customer )  )  )  )
attitude :mod good :arg1-of ( excellent :arg1 service )
attitude :mod good :arg1-of ( excellent :arg1 service )
awesome :null_edge food :null_edge ( person :arg0-of try :mod definite :arg1 ( bass :mod striped )  )
awesome :null_edge food :null_edge ( person :arg0-of try :mod definite :arg1 ( bass :mod striped )  )
contrast :arg1 ( get :arg1 music :arg1 little :arg2 loud :condition ( do :arg1 ( whiff :arg1 corriander )  )  )  :arg2 ( make :mod just :arg1 ( want :arg1 ( lean :arg2 ( close :arg2 ( person :arg0-of ( have-rel-role :arg2 wife :arg1-of beautiful )  )  )  )  )  )  :arg2 and
come :arg1 ( shake :mod ( white :arg1-of black )  )  :arg2 good :mod also
meal :mod simple :mod ( good :degree most )  :location nyc
decide :time ( after :op1 ( pass :manner ( restaurant :mod this )  :time sometime )  )  :arg0 i :time final :arg1 ( and :op1 go :op2 ( have :arg1 dinner )  )
seating :time ( try :arg1 ( get :arg1 ( amount :degree maximum )  :arg2 restaurant :arg2 ( nice :arg2 neighbor )  )  :time ( dine :arg0 you :location here )  )
and :op1 ( order :arg0 i :arg2 curry )  :op2 ( order :arg1 ( chicken :arg1-of pad :mod thai )  :arg0 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )
and :op1 ( order :arg0 i :arg2 curry )  :op2 ( order :arg1 ( chicken :arg1-of pad :mod thai )  :arg0 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )
and :op1 ( go :arg0 we :arg4 ( broadcast-program :name ( name :op1 mondays )  )  :arg3 ( fixe :mod prix )  )  :op2 ( comparable :arg1 ( experience :arg1 food )  :arg2 ( ribbon :mod blue )  )
and :op1 ( go :arg0 we :arg4 ( broadcast-program :name ( name :op1 mondays )  )  :arg3 ( fixe :mod prix )  )  :op2 ( comparable :arg1 ( experience :arg1 food )  :arg2 ( ribbon :mod blue )  )
and :op1 ( get :arg0 they :manner ve :arg1 ( pastrami :mod ( amazing :degree most )  )  )  :op2 ( hit :arg0 soup :arg1 spot )
and :op1 ( get :arg0 they :manner ve :arg1 ( pastrami :mod ( amazing :degree most )  )  )  :op2 ( hit :arg0 soup :arg1 spot )
make :arg0 ( bagel :mod great )  :arg1 ( way :arg1-of fashion )
sushi :domain this :mod some :mod ( good :mod really )  :mod inexpensive
contrast :arg1 ( favor :arg1-of personal )  :arg1 ( bagel :mod everything :arg1-of ( spread :arg1 lox )  )  :arg2 ( good :domain ( bagle :null_edge all )  )
contrast :arg1 ( favor :arg1-of personal )  :arg1 ( bagel :mod everything :arg1-of ( spread :arg1 lox )  )  :arg2 ( good :domain ( bagle :null_edge all )  )
wouldn :arg0 i :null_edge ( complain :mod even :condition ( taste :arg0 food :arg1 good :arg1 ( quality :poss food :mod crappy :mod too )  )  )
wouldn :arg0 i :null_edge ( complain :mod even :condition ( taste :arg0 food :arg1 good :arg1 ( quality :poss food :mod crappy :mod too )  )  )
stand :purpose ( and :op1 ( temporal-quantity :unit hour :mod next )  )  :arg0 we :location ( area :arg1-of crowd :location-of lobby :part-of ( restaurant :mod this :mod touristy :arg1-of ( listen :arg1 ( explain :mod ( type :quant all )  :arg1 ( seat :arg1 we )  )  )  )  )
stand :purpose ( and :op1 ( temporal-quantity :unit hour :mod next )  )  :arg0 we :location ( area :arg1-of crowd :location-of lobby :part-of ( restaurant :mod this :mod touristy :arg1-of ( listen :arg1 ( explain :mod ( type :quant all )  :arg1 ( seat :arg1 we )  )  )  )  )
and :op1 ( delicious :domain pizza :arg1 ( proprietor :topic-of nyc )  )
and :op1 ( delicious :domain pizza :arg1 ( proprietor :topic-of nyc )  )
good :mod also :domain ( meet :time ( lunch :mod client )  )  :domain esp
and :op1 ( dark :arg1 decor :mod ( spectacular :domain ( presentation :arg0 food )  :arg2 ( consider :arg0 presentation :arg1 ( price :arg1-of low )  )  )  )  :op2 ( cool :arg1 decor )  :op2 soothing
and :op1 ( dark :arg1 decor :mod ( spectacular :domain ( presentation :arg0 food )  :arg2 ( consider :arg0 presentation :arg1 ( price :arg1-of low )  )  )  )  :op2 ( cool :arg1 decor )  :op2 soothing
and :op1 ( dark :arg1 decor :mod ( spectacular :domain ( presentation :arg0 food )  :arg2 ( consider :arg0 presentation :arg1 ( price :arg1-of low )  )  )  )  :op2 ( cool :arg1 decor )  :op2 soothing
and :op1 ( nice :domain waitstaff :degree very )  :op2 ( suggest :arg0 waitstaff :arg1 swordfish :arg0 ( person :arg0-of ( have-rel-role :arg2 husband :arg0-of ( enjoy :arg1 meal )  )  )  )
and :op1 ( nice :domain waitstaff :degree very )  :op2 ( suggest :arg0 waitstaff :arg1 swordfish :arg0 ( person :arg0-of ( have-rel-role :arg2 husband :arg0-of ( enjoy :arg1 meal )  )  )  )
and :op1 ( nice :domain waitstaff :degree very )  :op2 ( suggest :arg0 waitstaff :arg1 swordfish :arg0 ( person :arg0-of ( have-rel-role :arg2 husband :arg0-of ( enjoy :arg1 meal )  )  )  )
and :op1 ( casual :domain setting )  :op2 ( romantic :arg1 setting )
deserve :arg1 ( manage :manner terrible :mod terrible )  :arg1 shut-down
service :mod great :arg0-of friendly :domain ( seating :manner fast )  :domain ( deliver :manner fast )  :domain ( sushi :arg1-of excellent )
service :mod great :arg0-of friendly :domain ( seating :manner fast )  :domain ( deliver :manner fast )  :domain ( sushi :arg1-of excellent )
service :mod great :arg0-of friendly :domain ( seating :manner fast )  :domain ( deliver :manner fast )  :domain ( sushi :arg1-of excellent )
service :mod great :arg0-of friendly :domain ( seating :manner fast )  :domain ( deliver :manner fast )  :domain ( sushi :arg1-of excellent )
appeal :arg0 dessert :degree more :arg2 ( restaurant :mod stuffy :mod ( country :arg1-of overpriced :name ( name :op1 france )  )  )
remind :arg1 ( and :op1 ( flavor :arg1 ( food :mod ( country :name ( name :op1 italian )  )  )  :arg1 ( possible :mod ( sort-of :mod ( surprise :arg1 ( company :name ( name :op1 ues )  )  )  )  )  )  :op2 ( turn-out :arg1 service :arg2 ( nightmare :prep-to attentive )  )  )  :arg0 they :degree sort-of :arg2 ( yankee :mod ny :mod ( late :op1 90 )  )  :null_edge ( know :arg1 ( look :polarity - :arg1 bad )  :arg0 ( rally :location ( around :mod just :op1 corner )  )  )
find :arg0 i :arg1 ( food :mod outstanding :mod particulary :consist-of ( dish :mod salmon :arg0-of ( have :arg0 i )  )  )
find :arg0 i :arg1 ( food :mod outstanding :mod particulary :consist-of ( dish :mod salmon :arg0-of ( have :arg0 i )  )  )
and :op2 home :op1 creative :op2 unique :op2 roll :op2 ( find :location ( anywhere :mod else )  )
have :arg1 ( and :op1 ( food :arg1-of solid )  :op3 ( decor :arg1-of nice :arg1 ( thing :arg2-of price :arg1-of reasonable )  )  )
have :arg1 ( and :op1 ( food :arg1-of solid )  :op3 ( decor :arg1-of nice :arg1 ( thing :arg2-of price :arg1-of reasonable )  )  )
have :arg1 ( and :op1 ( food :arg1-of solid )  :op3 ( decor :arg1-of nice :arg1 ( thing :arg2-of price :arg1-of reasonable )  )  )
sit :arg1 ( emilio :arg0-of own )  :frequency often :arg2 ( table :mod front )  :manner ( greet :arg1 guest :arg2 ( and :op1 come :op2 go )  )
spice :domain i :quant 3 :time ( lunch :mod dinner )
spice :domain i :quant 3 :time ( lunch :mod dinner )
salty :null_edge ( excellent :arg1 moule :arg1 ( ravioli :mod lobster )  )  :domain ravioli :degree very
salty :null_edge ( excellent :arg1 moule :arg1 ( ravioli :mod lobster )  )  :domain ravioli :degree very
eat :arg0 cheap :purpose ( nyc :prep-for dosa )
eat :arg0 cheap :purpose ( nyc :prep-for dosa )
and :op1 ( noisy :domain atmosphere :arg1 ( waiter :mod ( walk :manner literal :null_edge ( do :arg0 waiter :arg1 thing :manner ( fast :compared-to possible )  )  )  )  )
and :op1 ( amaze :arg0 seafood :arg1 ( list :mod good :arg2 wine )  )  :op2 ( offer :arg0 ( menu :arg0-of ( change :time ever )  )  :time always :arg1 ( surprise :quant some :mod great )  )
and :op1 ( amaze :arg0 seafood :arg1 ( list :mod good :arg2 wine )  )  :op2 ( offer :arg0 ( menu :arg0-of ( change :time ever )  )  :time always :arg1 ( surprise :quant some :mod great )  )
and :op1 ( amaze :arg0 seafood :arg1 ( list :mod good :arg2 wine )  )  :op2 ( offer :arg0 ( menu :arg0-of ( change :time ever )  )  :time always :arg1 ( surprise :quant some :mod great )  )
possible :arg1 i :arg1 ( t :arg1 don )  :mod usual :arg1 wine :arg1 ( country :name ( name :op1 indian )  )  :arg1 so :arg1 ( comment :arg0 i :arg3 ( or :op1 wine :op1 list :op3 wine )  )
possible :arg1 i :arg1 ( t :arg1 don )  :mod usual :arg1 wine :arg1 ( country :name ( name :op1 indian )  )  :arg1 so :arg1 ( comment :arg0 i :arg3 ( or :op1 wine :op1 list :op3 wine )  )
possible :arg1 i :arg1 ( t :arg1 don )  :mod usual :arg1 wine :arg1 ( country :name ( name :op1 indian )  )  :arg1 so :arg1 ( comment :arg0 i :arg3 ( or :op1 wine :op1 list :op3 wine )  )
possible :arg1 i :arg1 ( t :arg1 don )  :mod usual :arg1 wine :arg1 ( country :name ( name :op1 indian )  )  :arg1 so :arg1 ( comment :arg0 i :arg3 ( or :op1 wine :op1 list :op3 wine )  )
and :op1 ( juicy :arg1 ( or :op1 pastrami :op2 corn :op2 beef )  )  :op2 ( pile-up :arg1 ( ask :arg2 high :arg1 ( bread :arg1-of extra :mod rye )  )  )
and :op1 ( juicy :arg1 ( or :op1 pastrami :op2 corn :op2 beef )  )  :op2 ( pile-up :arg1 ( ask :arg2 high :arg1 ( bread :arg1-of extra :mod rye )  )  )
champagne :null_edge 200 :mod ( wine :quant ( glass :quant 2 )  :quant ( bottle :mod ( expensive :degree too )  :time ( after :quant 2 :op1 ( thing :arg1-of drink :mod dinner )  )  )  )
champagne :null_edge 200 :mod ( wine :quant ( glass :quant 2 )  :quant ( bottle :mod ( expensive :degree too )  :time ( after :quant 2 :op1 ( thing :arg1-of drink :mod dinner )  )  )  )
champagne :null_edge 200 :mod ( wine :quant ( glass :quant 2 )  :quant ( bottle :mod ( expensive :degree too )  :time ( after :quant 2 :op1 ( thing :arg1-of drink :mod dinner )  )  )  )
s :null_edge ( though :mod really )  :arg0 season
ok :domain food :mod just :null_edge ( food :arg2-of ( thing :arg2-of available )  )
ok :domain food :mod just :null_edge ( food :arg2-of ( thing :arg2-of available )  )
and :op1 ( have-rel-role :arg2 patient :domain waitress :degree very )  :op2 ( phenomenal :domain food )
and :op1 ( have-rel-role :arg2 patient :domain waitress :degree very )  :op2 ( phenomenal :domain food )
contrast :arg1 ( nice :arg1 ambience :arg1 ( great :domain service :degree so )  )
contrast :arg1 ( nice :arg1 ambience :arg1 ( great :domain service :degree so )  )
and :op1 ( list :arg2 solid :arg2 wine )  :op2 ( person :arg2-of staff :mod know )  :op2 ( person :arg0-of own :arg1-of friendly )  :op2 adventurous :op2 ( keep :arg1 ( change :arg1 ( menu :time ever )  )  :arg1 ( come :direction back )  )
and :op1 ( list :arg2 solid :arg2 wine )  :op2 ( person :arg2-of staff :mod know )  :op2 ( person :arg0-of own :arg1-of friendly )  :op2 adventurous :op2 ( keep :arg1 ( change :arg1 ( menu :time ever )  )  :arg1 ( come :direction back )  )
and :op1 ( list :arg2 solid :arg2 wine )  :op2 ( person :arg2-of staff :mod know )  :op2 ( person :arg0-of own :arg1-of friendly )  :op2 adventurous :op2 ( keep :arg1 ( change :arg1 ( menu :time ever )  )  :arg1 ( come :direction back )  )
and :op1 ( list :arg2 solid :arg2 wine )  :op2 ( person :arg2-of staff :mod know )  :op2 ( person :arg0-of own :arg1-of friendly )  :op2 adventurous :op2 ( keep :arg1 ( change :arg1 ( menu :time ever )  )  :arg1 ( come :direction back )  )
friendly :arg1 work :time always :arg1 ( forget :arg0 you :arg0 ( you :null_edge ( york :null_edge new )  :frequency sometimes )  )
didn :arg0 we :null_edge ( see :mod even :arg1 menu )  :null_edge ( describe :arg0 waiter :arg1 ( and :op1 special :op2 ( dish :mod main )  )  )
didn :arg0 we :null_edge ( see :mod even :arg1 menu )  :null_edge ( describe :arg0 waiter :arg1 ( and :op1 special :op2 ( dish :mod main )  )  )
didn :arg0 we :null_edge ( see :mod even :arg1 menu )  :null_edge ( describe :arg0 waiter :arg1 ( and :op1 special :op2 ( dish :mod main )  )  )
didn :arg0 we :null_edge ( see :mod even :arg1 menu )  :null_edge ( describe :arg0 waiter :arg1 ( and :op1 special :op2 ( dish :mod main )  )  )
contrast :arg2 ( and :op1 location :op2 ambience :op1 ( food :arg0-of make )  )
contrast :arg2 ( and :op1 location :op2 ambience :op1 ( food :arg0-of make )  )
contrast :arg2 ( and :op1 location :op2 ambience :op1 ( food :arg0-of make )  )
stuff :mod ( good :mod otherwise )  :arg1-of ( eat :mod ( nite :mod late )  )
stuff :mod ( good :mod otherwise )  :arg1-of ( eat :mod ( nite :mod late )  )
have :arg1 dinner :mod again
and :op1 ( love :arg0 i )  :op2 ( know :arg0 i :arg1 ( food :mod gourmet :arg1-of excellence )  )
plan :arg0 i :arg1 ( and :op1 ( come :location here :mod again )  :op2 ( look :arg1 ( try :arg1 ( assortment :consist-of bruschetta )  )  )  )
plan :arg0 i :arg1 ( and :op1 ( come :location here :mod again )  :op2 ( look :arg1 ( try :arg1 ( assortment :consist-of bruschetta )  )  )  )
and :op1 ( feel :arg0 ( party :quant 2 )  :arg1 ( something :mod else )  )  :op2 ( oblige :arg0 volare :time immediate :arg2 ( dish :quant 2 :mod great :example ( menu :arg1-of regular )  )  )
and :op1 ( feel :arg0 ( party :quant 2 )  :arg1 ( something :mod else )  )  :op2 ( oblige :arg0 volare :time immediate :arg2 ( dish :quant 2 :mod great :example ( menu :arg1-of regular )  )  )
and :op1 ( offer :arg1 ( service :arg1-of subpar )  )  :op2 ( have :polarity - :arg1 personality )
and :op1 ( remember :arg0 waitress :arg1 ( and :op2 ( know :arg0 waitress :arg1 regular )  :op2 ( bun :arg1-of fry :mod minus :accompanier ( and :op1 ( product :name ( name :op1 milk )  :mod condensed )  :op2 ( fruit :mod assorted :arg1 beancurd )  )  )  )  )  :op2 ( friendly :degree very )
and :op1 ( remember :arg0 waitress :arg1 ( and :op2 ( know :arg0 waitress :arg1 regular )  :op2 ( bun :arg1-of fry :mod minus :accompanier ( and :op1 ( product :name ( name :op1 milk )  :mod condensed )  :op2 ( fruit :mod assorted :arg1 beancurd )  )  )  )  )  :op2 ( friendly :degree very )
bummer :domain ( food :mod diner :arg1-of ( thing :arg2-of price :arg1 bistro )  )
bummer :domain ( food :mod diner :arg1-of ( thing :arg2-of price :arg1 bistro )  )
annoy :arg1 ( scream :time ( enjoy :arg0 we :manner thorough :arg1 food )  :location ( across :op1 table )  :purpose converse )
have-concession :arg2 ( and :op1 ( large :domain portion )  )  :arg1 ( surprise :arg0 server :time always :prep-with ( person :arg0-of start :arg1-of differ )  )
have-concession :arg2 ( and :op1 ( large :domain portion )  )  :arg1 ( surprise :arg0 server :time always :prep-with ( person :arg0-of start :arg1-of differ )  )
have-concession :arg2 ( and :op1 ( large :domain portion )  )  :arg1 ( surprise :arg0 server :time always :prep-with ( person :arg0-of start :arg1-of differ )  )
bagel :mod delicious :mod ( right :mod especially :arg2 oven )
tasty :domain ( food :quant all )  :arg1-of hot
place :domain this :quant 1 :mod great :location-of ( eat :arg1 pizza :arg1 ( place :quant more :mod good )  :arg0 ( pizza :arg1-of out )  )
place :domain this :quant 1 :mod great :location-of ( eat :arg1 pizza :arg1 ( place :quant more :mod good )  :arg0 ( pizza :arg1-of out )  )
and :op1 ( helpful :arg0 server :degree very )  :op2 friendly
try :arg1 ( curry :arg0 ( person :name ( name :op1 green )  )  :arg1 vegetable )
romantic :domain ( place :mod this )  :compared-to ( claim :arg0 ( review :arg0 citysearch :mod editorial )  )
walk :arg0 you :manner ( vault :mod heavy :arg1 door )  :null_edge ( anticipate :arg1 ( arrive :arg1 ( sense :arg0 you :arg1 ( ride :arg0 you :consist-of dine :arg1 lifetime )  )  )  )
price :arg0 ( more :quant much )  :manner reasonable :degree too
tiny :compared-to ( tasty :domain food :degree very :domain portioin :prep-for ( restaurant :mod ( quality :mod even :arg1-of ( high :mod such )  )  )  )
tiny :compared-to ( tasty :domain food :degree very :domain portioin :prep-for ( restaurant :mod ( quality :mod even :arg1-of ( high :mod such )  )  )  )
make :arg1 reserve :arg0 you
excellent :arg1 ( thaus :mod pad )  :location here
cause :arg1 ( recommend :arg0 i :arg1 ( special :arg1-of lunch )  )  :mod just :arg0 ( tast :arg1 same :arg3 ( restaurant :mod other :arg1-of regular :mod ( country :name ( name :op1 chinese )  )  )  )
park :arg0 we :arg2 ( block :arg1 nina )  :time ( look :arg1 nice :arg1 ( enjoy :arg1-of obvious :arg1 pizza )  )
park :arg0 we :arg2 ( block :arg1 nina )  :time ( look :arg1 nice :arg1 ( enjoy :arg1-of obvious :arg1 pizza )  )
o :domain food
k
multi-sentence :snt2 contrast :snt1 ( good :mod any :compared-to ( get :arg1 you :arg2 ( restaurant :location ( neighborhood :mod good )  )  )  )
have :arg0 we :arg1 ( and :op1 pot :op2 ( sticker :mod great )  :op2 ( dish :mod great )  )
have :arg0 we :arg1 ( and :op1 pot :op2 ( sticker :mod great )  :op2 ( dish :mod great )  )
think :arg0 i :arg1 ( good :domain stuff :compared-to disney )
expensive :domain range :degree over :location ( city :location new :location york )  :domain ( food :mod ( good :mod definite )  :arg1-of range )  :domain and :arg1 ( likely :degree most :arg1 ( restaurant :mod ( sapphire :degree so )  :mod ( atmosphere :mod lovely :arg0-of return )  )  )
expensive :domain range :degree over :location ( city :location new :location york )  :domain ( food :mod ( good :mod definite )  :arg1-of range )  :domain and :arg1 ( likely :degree most :arg1 ( restaurant :mod ( sapphire :degree so )  :mod ( atmosphere :mod lovely :arg0-of return )  )  )
expensive :domain range :degree over :location ( city :location new :location york )  :domain ( food :mod ( good :mod definite )  :arg1-of range )  :domain and :arg1 ( likely :degree most :arg1 ( restaurant :mod ( sapphire :degree so )  :mod ( atmosphere :mod lovely :arg0-of return )  )  )
orsay :prep-without doubt :arg1 ( value :arg1-of include :mod ( good :degree most )  :arg1 ( food :null_edge authentic :mod ( country :name ( name :op1 france )  )  )  :location nyc )
and :op3 ( deliver :time ever :mod ( cold :domain food :mod usual )  )
and :op3 ( deliver :time ever :mod ( cold :domain food :mod usual )  )
nonsense :arg0 ( person :arg2-of staff )  :polarity -
and :op1 ( portion :mod really :mod large )
restaurant :domain this :mod great :mod thai :topic ( person :arg2-of staff :mod ( friendly :degree very )  )
and :op1 ( order :arg0 i :arg1 ( and :op1 ( salmon :arg1-of smoked )  :op2 ( appetizer :mod roe )  )  :arg2 ( off :op1 flavor )  )
and :op1 ( go :arg0 we :location here :purpose lunch :time ( before :quant ( couple :op1 week )  )  :time ( date-entity :time date-entity )  )  :op2 ( impress :manner thorough :arg1 food )
and :op1 ( go :arg0 we :location here :purpose lunch :time ( before :quant ( couple :op1 week )  )  :time ( date-entity :time date-entity )  )  :op2 ( impress :manner thorough :arg1 food )
recommend :arg0 i :arg1 ( and :op1 ( shrimp :mod garlic :arg1 lamb )  :op3 okra :op2 anything )
recommend :arg0 i :arg1 ( and :op1 ( shrimp :mod garlic :arg1 lamb )  :op3 okra :op2 anything )
recommend :arg0 i :arg1 ( and :op1 ( shrimp :mod garlic :arg1 lamb )  :op3 okra :op2 anything )
possible :arg1 ( re :condition ( leave :arg0 we )  :op1 ( say :arg0 ( couple :arg1-of ( standing :arg1 door )  )  :arg1 ( waiter :mod another )  )  :arg0 we :location hurry )
impress :arg0 menu :arg1 ( thing :arg0-of select :arg1-of ( range :arg3 burger :arg4 steak :arg4 escargot )  )
impress :arg0 menu :arg1 ( thing :arg0-of select :arg1-of ( range :arg3 burger :arg4 steak :arg4 escargot )  )
impress :arg0 menu :arg1 ( thing :arg0-of select :arg1-of ( range :arg3 burger :arg4 steak :arg4 escargot )  )
impress :arg0 menu :arg1 ( thing :arg0-of select :arg1-of ( range :arg3 burger :arg4 steak :arg4 escargot )  )
possible :mod really :arg1 ( share :quant 2 :arg1 ( plate :quant 1 )  )
and :op1 ( great :domain food )  :op2 authentic
good :arg2 ( dinner :mod casual :null_edge ( and :op1 jeans :op2 sneaker )  )
and :op1 ( good :mod anyway :domain food )  :op2 ( right :arg1 food :arg1 price )  :op2 ( have :arg1 ( list :mod decency :arg2 wine )  )
and :op1 ( good :mod anyway :domain food )  :op2 ( right :arg1 food :arg1 price )  :op2 ( have :arg1 ( list :mod decency :arg2 wine )  )
and :op1 ( good :mod anyway :domain food )  :op2 ( right :arg1 food :arg1 price )  :op2 ( have :arg1 ( list :mod decency :arg2 wine )  )
price :arg1 ( and :op1 ( high :arg1 ( dine :arg0 price )  )  :op2 ( good :arg1 price :domain ( chicken :mod tikka )  :domain marsalum :degree quite )  )
price :arg1 ( and :op1 ( high :arg1 ( dine :arg0 price )  )  :op2 ( good :arg1 price :domain ( chicken :mod tikka )  :domain marsalum :degree quite )  )
and :op1 ( have :arg0 ( place :mod this )  :arg1 ( style :poss place :quant many :arg1-of differ :arg1 pizza )  )  :op1 ( amaze :arg0 ( they :quant all )  )
good :compared-to ( photograph :arg1 ( restaurant :location ( site :mod web )  )  )  :mod way :compared-to ( look-out :mod real )
or :op2 ( sweet :degree too )  :op2 ( salty :degree too )  :op2 ( and :op1 ( lousy :arg1 food :arg1 ( portion :mod tiny )  )  )
or :op2 ( sweet :degree too )  :op2 ( salty :degree too )  :op2 ( and :op1 ( lousy :arg1 food :arg1 ( portion :mod tiny )  )  )
contrast :arg1 ( good :domain ( rice :mod coconut )  )
take :arg1 ( temporal-quantity :unit minute :quant 25 )  :purpose ( bring :arg1 appetizer )
great :domain food
pair :arg1 you :arg1 food :arg2 ( beer :arg1-of excellent :example ( or :op1 tap :op2 ( list :arg1-of price :mod wine )  )  )
pair :arg1 you :arg1 food :arg2 ( beer :arg1-of excellent :example ( or :op1 tap :op2 ( list :arg1-of price :mod wine )  )  )
pair :arg1 you :arg1 food :arg2 ( beer :arg1-of excellent :example ( or :op1 tap :op2 ( list :arg1-of price :mod wine )  )  )
love :arg1 ( and :op1 ( like :arg0 you :arg1 ( blast :arg1 music )  :null_edge ( great :domain system )  :null_edge ( and :op3 ( want :arg0 you :arg0 you :arg1 ( pay :arg0 you :arg1 ( minimun :mod ( bottle :mod ( monetary-quantity :unit dollar :quant 100 )  )  )  )  )  )  )  )  :time then :arg0 you :degree ll :arg1 it :location here
love :arg1 ( and :op1 ( like :arg0 you :arg1 ( blast :arg1 music )  :null_edge ( great :domain system )  :null_edge ( and :op3 ( want :arg0 you :arg0 you :arg1 ( pay :arg0 you :arg1 ( minimun :mod ( bottle :mod ( monetary-quantity :unit dollar :quant 100 )  )  )  )  )  )  )  )  :time then :arg0 you :degree ll :arg1 it :location here
xconcept :x ( state :arg0 ( person :arg0-of work )  :arg1 ( and :op1 ( amaze :domain food )  :op2 ( wonder :arg1 hadn )  )  )  :x ( hear :arg1 ( place :quant all :mod this )  )
have :arg0 metrazur :arg1 ( spot :arg1-of beautiful :arg1-of ( overlook :arg1 ( terminal :mod main )  )  )
staff :mod friendly :null_edge ( and :mod actual :op1 ( enjoy :arg0 you :arg1 meal )  :op2 ( re :arg0 company :arg0 you )  )
staff :mod friendly :null_edge ( and :mod actual :op1 ( enjoy :arg0 you :arg1 meal )  :op2 ( re :arg0 company :arg0 you )  )
contrast :arg1 ( small :domain restaurant :mod rather )  :arg2 ( lucky :domain we :domain ( get :arg0 we :arg1 table :arg1-of quick )  )
stick :arg1 ( and :op1 ( excellent :arg1 ( quality :poss food )  :arg1 ( price :arg1-of cheap )  )  )  :arg1 ( and :op1 pork :op2 fish :op2 chicken :op2 lamb :op2 vegetable )
stick :arg1 ( and :op1 ( excellent :arg1 ( quality :poss food )  :arg1 ( price :arg1-of cheap )  )  )  :arg1 ( and :op1 pork :op2 fish :op2 chicken :op2 lamb :op2 vegetable )
stick :arg1 ( and :op1 ( excellent :arg1 ( quality :poss food )  :arg1 ( price :arg1-of cheap )  )  )  :arg1 ( and :op1 pork :op2 fish :op2 chicken :op2 lamb :op2 vegetable )
stick :arg1 ( and :op1 ( excellent :arg1 ( quality :poss food )  :arg1 ( price :arg1-of cheap )  )  )  :arg1 ( and :op1 pork :op2 fish :op2 chicken :op2 lamb :op2 vegetable )
stick :arg1 ( and :op1 ( excellent :arg1 ( quality :poss food )  :arg1 ( price :arg1-of cheap )  )  )  :arg1 ( and :op1 pork :op2 fish :op2 chicken :op2 lamb :op2 vegetable )
stick :arg1 ( and :op1 ( excellent :arg1 ( quality :poss food )  :arg1 ( price :arg1-of cheap )  )  )  :arg1 ( and :op1 pork :op2 fish :op2 chicken :op2 lamb :op2 vegetable )
stick :arg1 ( and :op1 ( excellent :arg1 ( quality :poss food )  :arg1 ( price :arg1-of cheap )  )  )  :arg1 ( and :op1 pork :op2 fish :op2 chicken :op2 lamb :op2 vegetable )
and :op1 ( tight :degree little )  :op2 ( possible :arg1 ( seating :arg1 entranceway )  :arg1 ( drafty :time ( day :mod cold )  :degree pretty )  )
and :op1 ( tight :degree little )  :op2 ( possible :arg1 ( seating :arg1 entranceway )  :arg1 ( drafty :time ( day :mod cold )  :degree pretty )  )
good :arg2 ( excellent :arg1 appetizing )  :mod just :arg2 ( barney :mod zabar )  :domain ( thing :arg2-of price :arg1-of reasonable )  :domain ( buy :arg0 ( monetary-quantity :unit pound )  )
good :arg2 ( excellent :arg1 appetizing )  :mod just :arg2 ( barney :mod zabar )  :domain ( thing :arg2-of price :arg1-of reasonable )  :domain ( buy :arg0 ( monetary-quantity :unit pound )  )
contrast :arg1 ( big :domain they :degree ( too :beneficiary bun )  )
and :op1 ( fresh :arg1 food )  :op2 delicious :op2 ( price :arg1 food :arg3 reasonable )
and :op1 ( fresh :arg1 food )  :op2 delicious :op2 ( price :arg1 food :arg3 reasonable )
stand :arg1 raga :arg2 ( fusion :mod interesting :arg1 ( and :op2 ( country :name ( name :op1 indian )  )  :op2 cook :op1 ( country :name ( name :op1 france )  )  )  )
tip :quant few :arg1 ( skip :arg1 ( and :op1 ( cake :mod turnip )  :op2 ( bun :mod roast :mod pork )  :op2 ( custard :mod egg )  )  )
tip :quant few :arg1 ( skip :arg1 ( and :op1 ( cake :mod turnip )  :op2 ( bun :mod roast :mod pork )  :op2 ( custard :mod egg )  )  )
tip :quant few :arg1 ( skip :arg1 ( and :op1 ( cake :mod turnip )  :op2 ( bun :mod roast :mod pork )  :op2 ( custard :mod egg )  )  )
fabulous :arg1 bagel
and :op1 ( lie :arg2 phone :arg2 ( claim :arg1 ( seat :arg0 they :location garden )  )  )  :arg2-of ( available :arg1 seat )
and :op1 ( lie :arg2 phone :arg2 ( claim :arg1 ( seat :arg0 they :location garden )  )  )  :arg2-of ( available :arg1 seat )
like :null_edge ( do :arg1 typical :arg0 you )  :arg1 ( water :mod kind-of )  :arg0 you :arg1 ( question :arg1 ( and :op2 service :op1 good :op2 ( relax :mod overall :degree very :null_edge eat )  )  )
like :null_edge ( do :arg1 typical :arg0 you )  :arg1 ( water :mod kind-of )  :arg0 you :arg1 ( question :arg1 ( and :op2 service :op1 good :op2 ( relax :mod overall :degree very :null_edge eat )  )  )
like :null_edge ( do :arg1 typical :arg0 you )  :arg1 ( water :mod kind-of )  :arg0 you :arg1 ( question :arg1 ( and :op2 service :op1 good :op2 ( relax :mod overall :degree very :null_edge eat )  )  )
and :op1 ( good :domain food :degree very :domain ( deal :mod great )  )  :op2 great
and :op1 ( good :domain food :degree very :domain ( deal :mod great )  )  :op2 great
rule :domain ( option :mod food )
and :mod great :op2 ( cost :mod any )  :op2 ( deal :mod great )
and :op1 ( eat :arg0 we :location here :time ( march :time ( date-entity :year 2006 )  )  )  :op2 ( order :arg2 ( theatre :mod ( pre :mod ( dinner :topic ( fly :op flight :quant 3 :mod wine )  )  )  )  )
and :op1 ( eat :arg0 we :location here :time ( march :time ( date-entity :year 2006 )  )  )  :op2 ( order :arg2 ( theatre :mod ( pre :mod ( dinner :topic ( fly :op flight :quant 3 :mod wine )  )  )  )  )
busier :arg1 ( probable :domain ( crowd :mod seldom :arg2 dinner :concession ( close :degree too :arg2 downtown )  )  )  :beneficiary lunch :degree ( more :degree much )
busier :arg1 ( probable :domain ( crowd :mod seldom :arg2 dinner :concession ( close :degree too :arg2 downtown )  )  )  :beneficiary lunch :degree ( more :degree much )
induce :arg0 calzone :manner horrific :arg1 bad :arg2 ( thing :manner-of vomit-up )  :arg2 yuck
and :op1 ( take :duration forever :arg0 ( get :arg1 drink )  )  :op2 ( forget :arg0 they :time ( always :mod almost )  :arg1 ( bring :arg0 they :arg1 something :null_edge ( forget :arg1 ( charge :arg2 you )  )  )  )
seem :arg1 ( beautiful :domain place )  :arg1 ( scene :mod bar )
seem :arg1 ( beautiful :domain place )  :arg1 ( scene :mod bar )
name :op1 saturday :op2 , :op3 nov
and :op1 ( come :arg1 i :arg1 ( group :source work )  :arg3 ( about :op1 35 )  )  :op1 ( amaze :arg0 i :arg0 ( person :arg2-of staff )  :arg1 ( accommodate :arg0 person )  )
and :op1 ( spread :mod good :mod ( tasty :degree really )  )  :op2 ( selection :mod great :mod beverage )  :op2 bagel
and :op1 ( spread :mod good :mod ( tasty :degree really )  )  :op2 ( selection :mod great :mod beverage )  :op2 bagel
and :op1 ( spread :mod good :mod ( tasty :degree really )  )  :op2 ( selection :mod great :mod beverage )  :op2 bagel
neglect :arg0 ( waiter :arg1-of ( serve :time first )  )  :arg1 ( fill :arg0 waiter :arg1 ( special :arg1-of choose :arg1-of ( know :arg1 have :arg0 i )  )  )
neglect :arg0 ( waiter :arg1-of ( serve :time first )  )  :arg1 ( fill :arg0 waiter :arg1 ( special :arg1-of choose :arg1-of ( know :arg1 have :arg0 i )  )  )
neglect :arg0 ( waiter :arg1-of ( serve :time first )  )  :arg1 ( fill :arg0 waiter :arg1 ( special :arg1-of choose :arg1-of ( know :arg1 have :arg0 i )  )  )
and :mod also :op1 meal :op1 delicious :op2 perfect :op2 ( slice :arg1 tiramisu )
and :mod also :op1 meal :op1 delicious :op2 perfect :op2 ( slice :arg1 tiramisu )
check-out :arg1 ( room :mod secret :mod back )
attach :mod also :arg2 ( share :poss ( angel :arg0-of ( bar :arg1-of cool :arg1-of ( romantic :degree more )  )  )  )
have :arg0 ( and :op1 ( food :null_edge authentic )  :op2 they )  :arg1 ( rush :arg1 ( service :mod real )  :mod just :arg0-of ( get :arg0 you :time ( try :arg1 ( push :arg1 you :arg2 ( out :op1 door )  )  )  )  :time sometimes )
have :arg0 ( and :op1 ( food :null_edge authentic )  :op2 they )  :arg1 ( rush :arg1 ( service :mod real )  :mod just :arg0-of ( get :arg0 you :time ( try :arg1 ( push :arg1 you :arg2 ( out :op1 door )  )  )  )  :time sometimes )
stick :arg2 ( jamun :mod gulab )
amaze :arg1 i :arg0 ( review :mod poor :arg1 ( find :arg1 ( standout :domain ( place :mod this )  :mod ( country :name ( name :op1 italian )  )  :location ( area :arg1-of ( flood :arg2 ( atmosphere :mod great :arg1 ( and :op1 ( thing :arg2-of price :mod ( country :name ( name :op1 italian )  )  :mod great )  :op2 ( service :mod good )  :op1 ( list :arg1-of wonderful :mod wine )  )  )  )  )  )  )  )
amaze :arg1 i :arg0 ( review :mod poor :arg1 ( find :arg1 ( standout :domain ( place :mod this )  :mod ( country :name ( name :op1 italian )  )  :location ( area :arg1-of ( flood :arg2 ( atmosphere :mod great :arg1 ( and :op1 ( thing :arg2-of price :mod ( country :name ( name :op1 italian )  )  :mod great )  :op2 ( service :mod good )  :op1 ( list :arg1-of wonderful :mod wine )  )  )  )  )  )  )  )
amaze :arg1 i :arg0 ( review :mod poor :arg1 ( find :arg1 ( standout :domain ( place :mod this )  :mod ( country :name ( name :op1 italian )  )  :location ( area :arg1-of ( flood :arg2 ( atmosphere :mod great :arg1 ( and :op1 ( thing :arg2-of price :mod ( country :name ( name :op1 italian )  )  :mod great )  :op2 ( service :mod good )  :op1 ( list :arg1-of wonderful :mod wine )  )  )  )  )  )  )  )
amaze :arg1 i :arg0 ( review :mod poor :arg1 ( find :arg1 ( standout :domain ( place :mod this )  :mod ( country :name ( name :op1 italian )  )  :location ( area :arg1-of ( flood :arg2 ( atmosphere :mod great :arg1 ( and :op1 ( thing :arg2-of price :mod ( country :name ( name :op1 italian )  )  :mod great )  :op2 ( service :mod good )  :op1 ( list :arg1-of wonderful :mod wine )  )  )  )  )  )  )  )
and :time ( back :arg0 ( i :direction back )  :prep-with diner )  :op1 table :location ( behind :op1 i )  :op2 ( have :arg0 i :arg2 ( wait :arg1 ( person :arg2-of staff )  :arg2 ( hoist :arg1 tray :arg2 head :time ( squeeze :time past :arg1 ( and :mod ( again :mod again )  )  )  )  )  )
and :time ( back :arg0 ( i :direction back )  :prep-with diner )  :op1 table :location ( behind :op1 i )  :op2 ( have :arg0 i :arg2 ( wait :arg1 ( person :arg2-of staff )  :arg2 ( hoist :arg1 tray :arg2 head :time ( squeeze :time past :arg1 ( and :mod ( again :mod again )  )  )  )  )  )
and :time ( back :arg0 ( i :direction back )  :prep-with diner )  :op1 table :location ( behind :op1 i )  :op2 ( have :arg0 i :arg2 ( wait :arg1 ( person :arg2-of staff )  :arg2 ( hoist :arg1 tray :arg2 head :time ( squeeze :time past :arg1 ( and :mod ( again :mod again )  )  )  )  )  )
theater :location ( block :quant 2 )  :arg0 we :arg1 ( meal :mod delicious )  :location ( room :arg1-of beautiful )
theater :location ( block :quant 2 )  :arg0 we :arg1 ( meal :mod delicious )  :location ( room :arg1-of beautiful )
contrast :arg1 ( eat :arg0 we :mod only :location restaurant :time once )  :arg2 ( order :arg1 we :arg0 we :frequency many :arg2 dinner )
place :domain this :mod only :mod ( country :name ( name :op1 chinese )  )  :mod dessert :location-of ( know :arg1 ( or :op2 ( ny :location ( person :mod ( country :name ( name :op1 america )  )  :location ( anywhere :mod close )  :mod northeast :arg0-of ( serve :arg1 ( dessert :null_edge ( jelly :mod frog )  )  :arg1 ( and :quant couple :op1 variety :op2 ( ginger :mod ( disease :name ( name :op1 feet )  :mod pig :arg1-of ( simmer :location ( vinegar :arg1-of black )  )  )  )  )  )  )  )  )  )
place :domain this :mod only :mod ( country :name ( name :op1 chinese )  )  :mod dessert :location-of ( know :arg1 ( or :op2 ( ny :location ( person :mod ( country :name ( name :op1 america )  )  :location ( anywhere :mod close )  :mod northeast :arg0-of ( serve :arg1 ( dessert :null_edge ( jelly :mod frog )  )  :arg1 ( and :quant couple :op1 variety :op2 ( ginger :mod ( disease :name ( name :op1 feet )  :mod pig :arg1-of ( simmer :location ( vinegar :arg1-of black )  )  )  )  )  )  )  )  )  )
and :op1 ( great :domain food )  :op2 ( price :arg1 food :arg3 reasonable )
and :op1 ( great :domain food )  :op2 ( price :arg1 food :arg3 reasonable )
recommend :arg0 i :mod definite :arg1 sea :arg1-of ( resemble :arg2 you :arg1 ( cuisine :mod thai )  )
treat :arg1 ( and :op1 ( person :arg0-of host )  :op2 vittorio :op2 crew )  :time always :arg2 family :condition ( possible :prep-with ( business :quant all :domain ( gem :mod this :quant little )  )  :null_edge amaze :mod even :arg1 ( remember :arg1 ( person :arg0-of visit :arg1-of ( frequent :null_edge consistent :null_edge contrast )  )  )  )  :arg2 ( multiple :op1 ( temporal-quantity :unit year )  )
treat :arg1 ( and :op1 ( person :arg0-of host )  :op2 vittorio :op2 crew )  :time always :arg2 family :condition ( possible :prep-with ( business :quant all :domain ( gem :mod this :quant little )  )  :null_edge amaze :mod even :arg1 ( remember :arg1 ( person :arg0-of visit :arg1-of ( frequent :null_edge consistent :null_edge contrast )  )  )  )  :arg2 ( multiple :op1 ( temporal-quantity :unit year )  )
contrast :arg1 ( large :domain restuarant )  :arg2 ( seem :arg1 ( have :arg1 ( table :quant several :mod round-up )  :purpose ( hope :arg1 ( accommodate :arg0 ( group :mod large )  )  :arg0 group :arg1 ( save :arg0 group :arg1 ( buck :arg1-of ( eat :arg1 ( country :name ( name :op1 taiwanese )  :null_edge authentic )  )  )  )  )  )  )
contrast :arg1 ( large :domain restuarant )  :arg2 ( seem :arg1 ( have :arg1 ( table :quant several :mod round-up )  :purpose ( hope :arg1 ( accommodate :arg0 ( group :mod large )  )  :arg0 group :arg1 ( save :arg0 group :arg1 ( buck :arg1-of ( eat :arg1 ( country :name ( name :op1 taiwanese )  :null_edge authentic )  )  )  )  )  )  )
say :arg1 ( possible :arg1 ( eat :arg0 he :mod ve :arg1 ( more :quant several )  )  )  :arg0 ( person :arg0-of ( have-rel-role :arg2 husband )  )  :arg1 ( contrast :snt2 ( fine :arg1 portion :arg1 ( exclaim :arg0 he :mod even :arg1 ( good :degree most :domain ( fries :mod ( country :name ( name :op1 france )  )  )  )  )  )  )
and :op2 ( place :mod type )  :op1 ( run :arg1 ( person :arg0-of ( have-rel-role :arg2 friend :mod old )  )  )  :op2 ( have :arg1 ( dinner :time late :mod raucus )  )
delicious :domain food :domain ( disappoint :arg1 food :arg0 ( special :arg1 ( fare :mod ( menu :arg1-of regular )  )  )  )
delicious :domain food :domain ( disappoint :arg1 food :arg0 ( special :arg1 ( fare :mod ( menu :arg1-of regular )  )  )  )
delicious :domain food :domain ( disappoint :arg1 food :arg0 ( special :arg1 ( fare :mod ( menu :arg1-of regular )  )  )  )
delicious :domain food :domain ( disappoint :arg1 food :arg0 ( special :arg1 ( fare :mod ( menu :arg1-of regular )  )  )  )
price :arg1 line
s :arg1 ( combine :arg1 ( and :op1 ( sauce :arg1-of fresh :mod tomato )  :op2 ( basil :mod ( cheese-off :arg1-of fresh )  )  :op2 ( dough :arg0-of ( make :arg2 ( flour :arg1-of import )  :arg1 this :arg1 ( pizza :mod good )  :medium ny )  )  )  )
s :arg1 ( combine :arg1 ( and :op1 ( sauce :arg1-of fresh :mod tomato )  :op2 ( basil :mod ( cheese-off :arg1-of fresh )  )  :op2 ( dough :arg0-of ( make :arg2 ( flour :arg1-of import )  :arg1 this :arg1 ( pizza :mod good )  :medium ny )  )  )  )
s :arg1 ( combine :arg1 ( and :op1 ( sauce :arg1-of fresh :mod tomato )  :op2 ( basil :mod ( cheese-off :arg1-of fresh )  )  :op2 ( dough :arg0-of ( make :arg2 ( flour :arg1-of import )  :arg1 this :arg1 ( pizza :mod good )  :medium ny )  )  )  )
s :arg1 ( combine :arg1 ( and :op1 ( sauce :arg1-of fresh :mod tomato )  :op2 ( basil :mod ( cheese-off :arg1-of fresh )  )  :op2 ( dough :arg0-of ( make :arg2 ( flour :arg1-of import )  :arg1 this :arg1 ( pizza :mod good )  :medium ny )  )  )  )
s :arg1 ( combine :arg1 ( and :op1 ( sauce :arg1-of fresh :mod tomato )  :op2 ( basil :mod ( cheese-off :arg1-of fresh )  )  :op2 ( dough :arg0-of ( make :arg2 ( flour :arg1-of import )  :arg1 this :arg1 ( pizza :mod good )  :medium ny )  )  )  )
s :arg1 ( combine :arg1 ( and :op1 ( sauce :arg1-of fresh :mod tomato )  :op2 ( basil :mod ( cheese-off :arg1-of fresh )  )  :op2 ( dough :arg0-of ( make :arg2 ( flour :arg1-of import )  :arg1 this :arg1 ( pizza :mod good )  :medium ny )  )  )  )
prepare :arg1 food :arg2 ( and :arg1-of quick :op2 efficient )
piece :domain ( try :arg0 ( you :quant ( all :mod ( new :prep-to ( food :mod ( country :name ( name :op1 indian )  )  )  )  )  )  :arg1 ( roll :mod paneer )  )  :mod heaven
piece :domain ( try :arg0 ( you :quant ( all :mod ( new :prep-to ( food :mod ( country :name ( name :op1 indian )  )  )  )  )  )  :arg1 ( roll :mod paneer )  )  :mod heaven
and :op1 ( look :arg0 food :arg1 ( delicious :degree very )  :time ( come :arg1 ( plate :mod variety :arg1-of fancy )  )  )
and :op1 ( look :arg0 food :arg1 ( delicious :degree very )  :time ( come :arg1 ( plate :mod variety :arg1-of fancy )  )  )
phenomenal :domain ( and :op1 mozzerellum :op1 ( slice :arg1-of fresh )  :op2 ( slice :mod plain :mod cheese-off )  )
phenomenal :domain ( and :op1 mozzerellum :op1 ( slice :arg1-of fresh )  :op2 ( slice :mod plain :mod cheese-off )  )
and :op1 ( terrible :domain food )  :op2 ( obligate :arg1 overall :arg2 ( say :arg1 ( avoid :arg2-of ( cost :quant all )  )  )  )
work :arg1 ( something :mod ( fortunate :polarity - )  :domain food )
open :manner constant :arg1 ( cater :arg1 ( cabbie :mod ( country :name ( name :op1 pakistani )  )  :arg1-of ( line :null_edge ( st :mod crosby )  )  )  )
s :arg1 ( turnover :quant ( more :accompanier food )  :arg0 you )  :null_edge ( expect :arg1 i )
e
fresh :arg0-of surprise
mignon :arg0 i :mod filet :prep-with ( mash :mod garlic )
ordinal-entity :arg0 i :value 6 :snt2 ( menu :arg1-of specific :mod pre :mod theater :mod ( country :name ( name :op1 $ )  :null_edge 19 )  )
and :op1 95 :op2 ( soup :mod roasted :mod tomato :prep-with chevre :mod steak )  :op2 marvelous
ordinal-entity :arg0 i :value 6 :snt2 ( menu :arg1-of specific :mod pre :mod theater :mod ( country :name ( name :op1 $ )  :null_edge 19 )  )
and :op1 95 :op2 ( soup :mod roasted :mod tomato :prep-with chevre :mod steak )  :op2 marvelous
ordinal-entity :arg0 i :value 6 :snt2 ( menu :arg1-of specific :mod pre :mod theater :mod ( country :name ( name :op1 $ )  :null_edge 19 )  )
and :op1 95 :op2 ( soup :mod roasted :mod tomato :prep-with chevre :mod steak )  :op2 marvelous
ordinal-entity :arg0 i :value 6 :snt2 ( menu :arg1-of specific :mod pre :mod theater :mod ( country :name ( name :op1 $ )  :null_edge 19 )  )
and :op1 95 :op2 ( soup :mod roasted :mod tomato :prep-with chevre :mod steak )  :op2 marvelous
attentive :domain waitstaff :arg1 ( and :op1 polite :op2 helpful )  :arg1 ( feat :arg0-of impress :arg1 ( quarter :mod such :mod close )  )
warn :arg1 ( and :op1 ( tasty :domain ( bread :arg1-of begin )  :degree super-power :arg1 ( and :op1 ( delicious :domain pizza )  :op2 ( come :arg1 ( size :arg1-of personal )  )  )  )  :op2 ( make :arg1 ( want :arg0 you :arg1 more )  )  )  :arg1 ( and :op1 ( pizza :domain ( pizza :poss peter :mod favourite :prep-with ( and :op1 prosciutto :op2 baby )  )  :mod actual :location top :null_edge salad )  :op1 ( prosciutto :mod cold )  :op2 baby )
warn :arg1 ( and :op1 ( tasty :domain ( bread :arg1-of begin )  :degree super-power :arg1 ( and :op1 ( delicious :domain pizza )  :op2 ( come :arg1 ( size :arg1-of personal )  )  )  )  :op2 ( make :arg1 ( want :arg0 you :arg1 more )  )  )  :arg1 ( and :op1 ( pizza :domain ( pizza :poss peter :mod favourite :prep-with ( and :op1 prosciutto :op2 baby )  )  :mod actual :location top :null_edge salad )  :op1 ( prosciutto :mod cold )  :op2 baby )
warn :arg1 ( and :op1 ( tasty :domain ( bread :arg1-of begin )  :degree super-power :arg1 ( and :op1 ( delicious :domain pizza )  :op2 ( come :arg1 ( size :arg1-of personal )  )  )  )  :op2 ( make :arg1 ( want :arg0 you :arg1 more )  )  )  :arg1 ( and :op1 ( pizza :domain ( pizza :poss peter :mod favourite :prep-with ( and :op1 prosciutto :op2 baby )  )  :mod actual :location top :null_edge salad )  :op1 ( prosciutto :mod cold )  :op2 baby )
warn :arg1 ( and :op1 ( tasty :domain ( bread :arg1-of begin )  :degree super-power :arg1 ( and :op1 ( delicious :domain pizza )  :op2 ( come :arg1 ( size :arg1-of personal )  )  )  )  :op2 ( make :arg1 ( want :arg0 you :arg1 more )  )  )  :arg1 ( and :op1 ( pizza :domain ( pizza :poss peter :mod favourite :prep-with ( and :op1 prosciutto :op2 baby )  )  :mod actual :location top :null_edge salad )  :op1 ( prosciutto :mod cold )  :op2 baby )
warn :arg1 ( and :op1 ( tasty :domain ( bread :arg1-of begin )  :degree super-power :arg1 ( and :op1 ( delicious :domain pizza )  :op2 ( come :arg1 ( size :arg1-of personal )  )  )  )  :op2 ( make :arg1 ( want :arg0 you :arg1 more )  )  )  :arg1 ( and :op1 ( pizza :domain ( pizza :poss peter :mod favourite :prep-with ( and :op1 prosciutto :op2 baby )  )  :mod actual :location top :null_edge salad )  :op1 ( prosciutto :mod cold )  :op2 baby )
keep :arg1 ( select :mod large :null_edge ( tramezzini :null_edge bruschetta )  )  :arg1 ( palate :source stagnate )
keep :arg1 ( select :mod large :null_edge ( tramezzini :null_edge bruschetta )  )  :arg1 ( palate :source stagnate )
keep :arg1 ( select :mod large :null_edge ( tramezzini :null_edge bruschetta )  )  :arg1 ( palate :source stagnate )
find :time always :arg1 ( helpful :arg0 waiter :arg1 ( way :direction out )  :arg1 ( busy :null_edge often :null_edge ( diner :quant lot )  )  )
find :time always :arg1 ( helpful :arg0 waiter :arg1 ( way :direction out )  :arg1 ( busy :null_edge often :null_edge ( diner :quant lot )  )  )
give :arg0 ( isn :mod this :poss-of ( fare :arg1-of classical :arg1 restaurant )  )  :arg0 chef :arg1 ( life :mod new )  :arg2 ( cuisine :mod old :accompanier ( and :op1 ( innovate :degree really )  :op2 tasty :op2 ( dish :quant some )  :op2 ( or :manner genuine :op1 heavy :op3 ( burn :arg1 ( restaurant :arg1-of same :mod old )  )  )  )  )
give :arg0 ( isn :mod this :poss-of ( fare :arg1-of classical :arg1 restaurant )  )  :arg0 chef :arg1 ( life :mod new )  :arg2 ( cuisine :mod old :accompanier ( and :op1 ( innovate :degree really )  :op2 tasty :op2 ( dish :quant some )  :op2 ( or :manner genuine :op1 heavy :op3 ( burn :arg1 ( restaurant :arg1-of same :mod old )  )  )  )  )
give :arg0 ( isn :mod this :poss-of ( fare :arg1-of classical :arg1 restaurant )  )  :arg0 chef :arg1 ( life :mod new )  :arg2 ( cuisine :mod old :accompanier ( and :op1 ( innovate :degree really )  :op2 tasty :op2 ( dish :quant some )  :op2 ( or :manner genuine :op1 heavy :op3 ( burn :arg1 ( restaurant :arg1-of same :mod old )  )  )  )  )
give :arg0 ( isn :mod this :poss-of ( fare :arg1-of classical :arg1 restaurant )  )  :arg0 chef :arg1 ( life :mod new )  :arg2 ( cuisine :mod old :accompanier ( and :op1 ( innovate :degree really )  :op2 tasty :op2 ( dish :quant some )  :op2 ( or :manner genuine :op1 heavy :op3 ( burn :arg1 ( restaurant :arg1-of same :mod old )  )  )  )  )
cater :arg0 ( person :arg0-of own )  :arg2 ( need :mod all )
take :arg0 he :arg1 ( pride :mod real )  :arg2 ( and :op1 food :op2 business )
go :condition ( want :arg0 you :arg1 ( meal :arg1-of nice :mod enjoyable )  )  :arg4 montparnasse :time early :arg4 ( theater :arg1-of ( prix :mod ( pre :null_edge fixe )  )  )
go :condition ( want :arg0 you :arg1 ( meal :arg1-of nice :mod enjoyable )  )  :arg4 montparnasse :time early :arg4 ( theater :arg1-of ( prix :mod ( pre :null_edge fixe )  )  )
provide :time always :arg1 ( experience :arg1-of pleasurable :mod dine )  :arg1 ( and :op1 ( food :mod quality )  :op2 wine )  :prep-as ( multiple :op1 ( temporal-quantity :unit year )  )
provide :time always :arg1 ( experience :arg1-of pleasurable :mod dine )  :arg1 ( and :op1 ( food :mod quality )  :op2 wine )  :prep-as ( multiple :op1 ( temporal-quantity :unit year )  )
provide :time always :arg1 ( experience :arg1-of pleasurable :mod dine )  :arg1 ( and :op1 ( food :mod quality )  :op2 wine )  :prep-as ( multiple :op1 ( temporal-quantity :unit year )  )
help :arg1 ( touch-up :arg0 ( menu :mod photobook )  :mod cute )  :manner certain :arg1 ( pick-up :arg0 ( and :op1 group :op2 i )  :arg1 ( and :op1 ( chicken :mod fried )  :op2 ( pork :arg1-of chop-down )  :op2 ( dish :mod noodle :arg1-of ( order :arg0 ( we :mod all )  )  )  )  )
help :arg1 ( touch-up :arg0 ( menu :mod photobook )  :mod cute )  :manner certain :arg1 ( pick-up :arg0 ( and :op1 group :op2 i )  :arg1 ( and :op1 ( chicken :mod fried )  :op2 ( pork :arg1-of chop-down )  :op2 ( dish :mod noodle :arg1-of ( order :arg0 ( we :mod all )  )  )  )  )
help :arg1 ( touch-up :arg0 ( menu :mod photobook )  :mod cute )  :manner certain :arg1 ( pick-up :arg0 ( and :op1 group :op2 i )  :arg1 ( and :op1 ( chicken :mod fried )  :op2 ( pork :arg1-of chop-down )  :op2 ( dish :mod noodle :arg1-of ( order :arg0 ( we :mod all )  )  )  )  )
help :arg1 ( touch-up :arg0 ( menu :mod photobook )  :mod cute )  :manner certain :arg1 ( pick-up :arg0 ( and :op1 group :op2 i )  :arg1 ( and :op1 ( chicken :mod fried )  :op2 ( pork :arg1-of chop-down )  :op2 ( dish :mod noodle :arg1-of ( order :arg0 ( we :mod all )  )  )  )  )
possible :arg1 ( imagine :arg0 i :arg1 ( food :mod good :source ( country :name ( name :op1 indian )  )  :poss ( city :quant all )  )  )
try :arg0 ( place :mod great :mod romantic :null_edge ( null_tag :time date-entity )  )  :arg1 ( and :op1 ( get :arg1 ( table :arg2 ( booth :mod ( corner :mod ( privacy :mod little )  )  )  )  )  :op2 ( sit :arg2 close )  )
xconcept
try :arg0 ( place :mod great :mod romantic :null_edge ( null_tag :time date-entity )  )  :arg1 ( and :op1 ( get :arg1 ( table :arg2 ( booth :mod ( corner :mod ( privacy :mod little )  )  )  )  )  :op2 ( sit :arg2 close )  )
xconcept
try :arg0 ( place :mod great :mod romantic :null_edge ( null_tag :time date-entity )  )  :arg1 ( and :op1 ( get :arg1 ( table :arg2 ( booth :mod ( corner :mod ( privacy :mod little )  )  )  )  )  :op2 ( sit :arg2 close )  )
xconcept
and :op1 ( ask :arg0 i :arg1 ( sandwich :arg1-of ( face :arg1-of open )  :mod cheese-off )  )  :op2 ( tell :arg0 manage :mod basic :arg1 ( take :arg0 manage :arg1 business :location elsewhere )  )
and :op1 ( ask :arg0 i :arg1 ( sandwich :arg1-of ( face :arg1-of open )  :mod cheese-off )  )  :op2 ( tell :arg0 manage :mod basic :arg1 ( take :arg0 manage :arg1 business :location elsewhere )  )
bread :mod ( good :degree very :mod well )
ask :mod just :arg1 ( naan :mod real )  :arg1 ( event :mod this )
fan :domain we :arg1 half :mod ( event :name ( name :op1 saturday )  :mod price )  :domain ( option :time night :time ( until :op1 ( squid :quant some :mod inedible )  )  :time ( visit :time recent )  )
fan :domain we :arg1 half :mod ( event :name ( name :op1 saturday )  :mod price )  :domain ( option :time night :time ( until :op1 ( squid :quant some :mod inedible )  )  :time ( visit :time recent )  )
terrific :domain pizza :domain ( pasta :arg1-of ( make :location home )  )
terrific :domain pizza :domain ( pasta :arg1-of ( make :location home )  )
place :domain this :arg1-of wonderful :prep-on ( money :arg2-of ( value :arg1 ( point :mod all :arg1-of stand-up :mod especially )  )  :mod ofr )
soup :domain example :domain ( oz :null_edge ( about :null_edge 6 :op1 ( and :op1 ( monetary-quantity :unit dollar :quant 12 )  :op2 ( mushroom :null_edge ( 1oz :quant about )  )  )  )  )
soup :domain example :domain ( oz :null_edge ( about :null_edge 6 :op1 ( and :op1 ( monetary-quantity :unit dollar :quant 12 )  :op2 ( mushroom :null_edge ( 1oz :quant about )  )  )  )  )
wait
delight :arg1 ( incredible :time ( begin :arg1 appetizer )  :arg1 scallop :arg2 ( souffle :mod delicious :mod chocolate :accompanier ( sorbet :mod rasberry :mod mint )  )  )  :arg0 we :arg0 ( sensation :mod taste )
delight :arg1 ( incredible :time ( begin :arg1 appetizer )  :arg1 scallop :arg2 ( souffle :mod delicious :mod chocolate :accompanier ( sorbet :mod rasberry :mod mint )  )  )  :arg0 we :arg0 ( sensation :mod taste )
delight :arg1 ( incredible :time ( begin :arg1 appetizer )  :arg1 scallop :arg2 ( souffle :mod delicious :mod chocolate :accompanier ( sorbet :mod rasberry :mod mint )  )  )  :arg0 we :arg0 ( sensation :mod taste )
delight :arg1 ( incredible :time ( begin :arg1 appetizer )  :arg1 scallop :arg2 ( souffle :mod delicious :mod chocolate :accompanier ( sorbet :mod rasberry :mod mint )  )  )  :arg0 we :arg0 ( sensation :mod taste )
tapa :mod ( good :manner consistent )  :mod ( country :name ( name :op1 japanese )  )
amaze :arg0 goodness :arg1 ( everything :source ( fish :arg4 rice )  )  :arg2 seaweed :degree absolute
amaze :arg0 goodness :arg1 ( everything :source ( fish :arg4 rice )  )  :arg2 seaweed :degree absolute
amaze :arg0 goodness :arg1 ( everything :source ( fish :arg4 rice )  )  :arg2 seaweed :degree absolute
and :op1 ( unique :domain ( dish :arg1-of offer )  )  :op2 ( tasty :degree very )  :op2 ( fresh :arg1 ( sausage :mod ( lamb :arg3 biscuit )  :part-of ( shrimp :mod large :mod whole :arg4 ( cream :mod ( ice :mod ( pistachio :mod amazing )  )  )  )  )  )  :op2 ( and :op1 ( good :degree most :arg0-of ( have :arg0 i :time ever )  )  :op2 freshest )
and :op1 ( unique :domain ( dish :arg1-of offer )  )  :op2 ( tasty :degree very )  :op2 ( fresh :arg1 ( sausage :mod ( lamb :arg3 biscuit )  :part-of ( shrimp :mod large :mod whole :arg4 ( cream :mod ( ice :mod ( pistachio :mod amazing )  )  )  )  )  )  :op2 ( and :op1 ( good :degree most :arg0-of ( have :arg0 i :time ever )  )  :op2 freshest )
and :op1 ( unique :domain ( dish :arg1-of offer )  )  :op2 ( tasty :degree very )  :op2 ( fresh :arg1 ( sausage :mod ( lamb :arg3 biscuit )  :part-of ( shrimp :mod large :mod whole :arg4 ( cream :mod ( ice :mod ( pistachio :mod amazing )  )  )  )  )  )  :op2 ( and :op1 ( good :degree most :arg0-of ( have :arg0 i :time ever )  )  :op2 freshest )
and :op1 ( unique :domain ( dish :arg1-of offer )  )  :op2 ( tasty :degree very )  :op2 ( fresh :arg1 ( sausage :mod ( lamb :arg3 biscuit )  :part-of ( shrimp :mod large :mod whole :arg4 ( cream :mod ( ice :mod ( pistachio :mod amazing )  )  )  )  )  )  :op2 ( and :op1 ( good :degree most :arg0-of ( have :arg0 i :time ever )  )  :op2 freshest )
and :op1 ( unique :domain ( dish :arg1-of offer )  )  :op2 ( tasty :degree very )  :op2 ( fresh :arg1 ( sausage :mod ( lamb :arg3 biscuit )  :part-of ( shrimp :mod large :mod whole :arg4 ( cream :mod ( ice :mod ( pistachio :mod amazing )  )  )  )  )  )  :op2 ( and :op1 ( good :degree most :arg0-of ( have :arg0 i :time ever )  )  :op2 freshest )
and :op1 ( reliable :domain food :arg1 ( price :arg1-of moderate )  )
and :op1 ( reliable :domain food :arg1 ( price :arg1-of moderate )  )
possible :arg1 ( good :null_edge ( great :domain ( and :op1 ambiance :op2 atmosphere )  )  :domain ( and :op1 food :op2 service )  :degree ( more :quant lot )  )
possible :arg1 ( good :null_edge ( great :domain ( and :op1 ambiance :op2 atmosphere )  )  :domain ( and :op1 food :op2 service )  :degree ( more :quant lot )  )
possible :arg1 ( good :null_edge ( great :domain ( and :op1 ambiance :op2 atmosphere )  )  :domain ( and :op1 food :op2 service )  :degree ( more :quant lot )  )
possible :arg1 ( good :null_edge ( great :domain ( and :op1 ambiance :op2 atmosphere )  )  :domain ( and :op1 food :op2 service )  :degree ( more :quant lot )  )
and :op1 ( cool :arg1 server :degree really )  :op3 ( serve :arg1 server :arg1 ( and :op1 food :op2 drink )  :arg1 smile )
and :op1 ( cool :arg1 server :degree really )  :op3 ( serve :arg1 server :arg1 ( and :op1 food :op2 drink )  :arg1 smile )
and :op1 ( cool :arg1 server :degree really )  :op3 ( serve :arg1 server :arg1 ( and :op1 food :op2 drink )  :arg1 smile )
and :op1 ( cool :arg1 server :degree really )  :op3 ( serve :arg1 server :arg1 ( and :op1 food :op2 drink )  :arg1 smile )
and :op1 ( search :arg0 we :consist-of food )  :op2 ( stumble :arg2 ( block :mod this :location ( street :mod ( country :name ( name :op1 indian )  )  :null_edge ( world-region :name ( name :op1 east )  )  )  )  )
hit :arg0 ( thailand :location planet )  :time always :arg0 i :location there :mod ( usual :arg1 ( sushi :arg1-of ( excellent :degree great :arg1 ( food :mod thai )  :degree too )  )  )
hit :arg0 ( thailand :location planet )  :time always :arg0 i :location there :mod ( usual :arg1 ( sushi :arg1-of ( excellent :degree great :arg1 ( food :mod thai )  :degree too )  )  )
excite :degree very :arg1 ( hear :arg1 ( move :null_edge ( jason :mod short :mod ( chef :mod ( point :domain he :mod low :mod ( record :mod track )  )  )  )  )  )
and :domain i :op2 ( share :arg0 i :arg1 table :arg2 ( group :mod loud :consist-of kid )  )  :op2 ( service :arg0-of rude )
and :domain i :op2 ( share :arg0 i :arg1 table :arg2 ( group :mod loud :consist-of kid )  )  :op2 ( service :arg0-of rude )
sauce :arg2 ( good :compared-to ( and :op1 pizza :op1 garlic :op2 ( tomato :arg1-of fresh )  )  :compared-to ( and :op2 ( skimp :arg1 don )  )  )
sauce :arg2 ( good :compared-to ( and :op1 pizza :op1 garlic :op2 ( tomato :arg1-of fresh )  )  :compared-to ( and :op2 ( skimp :arg1 don )  )  )
sauce :arg2 ( good :compared-to ( and :op1 pizza :op1 garlic :op2 ( tomato :arg1-of fresh )  )  :compared-to ( and :op2 ( skimp :arg1 don )  )  )
and :op1 ( decide :arg0 we :time recent :arg1 ( try :arg0 we :arg1 ( location :mod this )  )  )  :op2 ( perfect :arg2 ( delight :arg1 they )  :arg1 they :null_edge have :arg1 ( seating :manner outdoor )  :arg1 ( yorkie :arg0 i )  )
and :op2 ( and :op1 mesclun :op2 salmon :op2 ( cream :mod ice )  )  :op2 ( enjoy :arg1 ( course :mod all :quant 3 )  )  :op2 ( person :arg0-of ( have-rel-role :arg2 husband )  )
and :op2 ( and :op1 mesclun :op2 salmon :op2 ( cream :mod ice )  )  :op2 ( enjoy :arg1 ( course :mod all :quant 3 )  )  :op2 ( person :arg0-of ( have-rel-role :arg2 husband )  )
and :op2 ( and :op1 mesclun :op2 salmon :op2 ( cream :mod ice )  )  :op2 ( enjoy :arg1 ( course :mod all :quant 3 )  )  :op2 ( person :arg0-of ( have-rel-role :arg2 husband )  )
and :op2 ( and :op1 mesclun :op2 salmon :op2 ( cream :mod ice )  )  :op2 ( enjoy :arg1 ( course :mod all :quant 3 )  )  :op2 ( person :arg0-of ( have-rel-role :arg2 husband )  )
tell :arg2 we :arg1 ( wait :time ( about :op1 ( temporal-quantity :unit minute )  )  :arg1 ( problem :polarity - :topic ( call :quant 8 :null_edge include :arg1 curtain )  )  )
contrast :arg1 ( good :domain food :mod usual )  :arg2 ( go :mod certain :arg1 relaxing )
contrast :arg1 ( good :domain food :mod usual )  :arg2 ( go :mod certain :arg1 relaxing )
awesome :null_edge ( and :op2 ( and :op1 friendly :op2 knowledgable )  :op2 ( person :arg2-of staff :mod super-power )  :op2 ( fare :arg1-of fabulous :mod bistro )  :op2 ( brunch :arg1-of wonderful :mod jazz :arg2 ( jazz :mod great :mod live )  )  :op2 chilaquile )
awesome :null_edge ( and :op2 ( and :op1 friendly :op2 knowledgable )  :op2 ( person :arg2-of staff :mod super-power )  :op2 ( fare :arg1-of fabulous :mod bistro )  :op2 ( brunch :arg1-of wonderful :mod jazz :arg2 ( jazz :mod great :mod live )  )  :op2 chilaquile )
awesome :null_edge ( and :op2 ( and :op1 friendly :op2 knowledgable )  :op2 ( person :arg2-of staff :mod super-power )  :op2 ( fare :arg1-of fabulous :mod bistro )  :op2 ( brunch :arg1-of wonderful :mod jazz :arg2 ( jazz :mod great :mod live )  )  :op2 chilaquile )
awesome :null_edge ( and :op2 ( and :op1 friendly :op2 knowledgable )  :op2 ( person :arg2-of staff :mod super-power )  :op2 ( fare :arg1-of fabulous :mod bistro )  :op2 ( brunch :arg1-of wonderful :mod jazz :arg2 ( jazz :mod great :mod live )  )  :op2 chilaquile )
awesome :null_edge ( and :op2 ( and :op1 friendly :op2 knowledgable )  :op2 ( person :arg2-of staff :mod super-power )  :op2 ( fare :arg1-of fabulous :mod bistro )  :op2 ( brunch :arg1-of wonderful :mod jazz :arg2 ( jazz :mod great :mod live )  )  :op2 chilaquile )
fantastic :domain price
set :null_edge still :arg1 ( quibble :mod any )  :arg2 bill :null_edge ( pour :arg0 ( measure :arg1 ( liquer :arg1-of ( courtesey :arg1 house )  )  )  )
possible :arg1 ( contrast :arg1 ( attentive :domain service :degree ( more :mod little )  )  :arg2 ( understand :arg0 service :prep-as ( someone :arg0-of ( work :mod also :location ( industry :mod service )  )  )  :arg0 i :arg1 busy )  )
contrast :arg1 mind :arg2 blowing :arg2 ( and :op2 ( food :mod thai )  )
good :domain food :degree very :mod well :arg2 ( consider :arg1 ( try :arg0 we :arg1 ( select :mod budget )  :arg1 ( wish :arg0 we :arg1 ( roasted :domain ( belly :mod pork :arg1-of ( order :arg0 i )  )  :arg1-of ( long :degree bit )  :domain ( fat :degree ( more :null_edge ( melt :arg0 fat :time ( experience :mod mouth )  )  )  )  )  )  )  )
good :domain food :degree very :mod well :arg2 ( consider :arg1 ( try :arg0 we :arg1 ( select :mod budget )  :arg1 ( wish :arg0 we :arg1 ( roasted :domain ( belly :mod pork :arg1-of ( order :arg0 i )  )  :arg1-of ( long :degree bit )  :domain ( fat :degree ( more :null_edge ( melt :arg0 fat :time ( experience :mod mouth )  )  )  )  )  )  )  )
good :domain food :degree very :mod well :arg2 ( consider :arg1 ( try :arg0 we :arg1 ( select :mod budget )  :arg1 ( wish :arg0 we :arg1 ( roasted :domain ( belly :mod pork :arg1-of ( order :arg0 i )  )  :arg1-of ( long :degree bit )  :domain ( fat :degree ( more :null_edge ( melt :arg0 fat :time ( experience :mod mouth )  )  )  )  )  )  )  )
and :domain i :op2 sapphire :op2 ( good :domain ( time :mod both )  :domain food :arg1-of fine )
contrast :arg1 ( and :op1 ( nosiy :mod kinda :purpose ( enjoy :mod still :arg1 beautiful :arg1 ( dinner :arg1-of nice )  )  )  :op2 ( close :arg1 table :manner together )  )
contrast :arg1 ( and :op1 ( nosiy :mod kinda :purpose ( enjoy :mod still :arg1 beautiful :arg1 ( dinner :arg1-of nice )  )  )  :op2 ( close :arg1 table :manner together )  )
contrast :arg1 ( and :op1 ( nosiy :mod kinda :purpose ( enjoy :mod still :arg1 beautiful :arg1 ( dinner :arg1-of nice )  )  )  :op2 ( close :arg1 table :manner together )  )
love :arg0 i :arg1 ( and :op1 taste :op1 ( good :arg1 pizza )  :op2 ( cheap :degree so )  )
treat :domain ( nose :topic-of bar )
and :op1 ( prompt :arg0 service )  :op2 friendly :op2 great
nice :arg1 ( eat :arg0 i :arg0 ( t :arg1 haven )  :arg1 ( chop-down :arg0 t :arg1 lamb :mod delicious )  )  :arg1 salad :mod really :arg1 ( dress :arg2 ( and :op1 lemon :op2 ( oil :mod extra :null_edge virgnin :mod olive )  )  )
nice :arg1 ( eat :arg0 i :arg0 ( t :arg1 haven )  :arg1 ( chop-down :arg0 t :arg1 lamb :mod delicious )  )  :arg1 salad :mod really :arg1 ( dress :arg2 ( and :op1 lemon :op2 ( oil :mod extra :null_edge virgnin :mod olive )  )  )
nice :arg1 ( eat :arg0 i :arg0 ( t :arg1 haven )  :arg1 ( chop-down :arg0 t :arg1 lamb :mod delicious )  )  :arg1 salad :mod really :arg1 ( dress :arg2 ( and :op1 lemon :op2 ( oil :mod extra :null_edge virgnin :mod olive )  )  )
nice :arg1 ( eat :arg0 i :arg0 ( t :arg1 haven )  :arg1 ( chop-down :arg0 t :arg1 lamb :mod delicious )  )  :arg1 salad :mod really :arg1 ( dress :arg2 ( and :op1 lemon :op2 ( oil :mod extra :null_edge virgnin :mod olive )  )  )
awful :domain sushi
possible :arg1 ( get :arg0 you :arg1 ( meal :arg1-of excellent )  :arg2 ( restaurant :quant most :quant many :mod ( country :name ( name :op1 indian )  )  :arg1 ( avenue :mod nearby :mod lexington )  )  :prep-for ( cost :arg1-of ( include :arg2 ( dish :location here )  )  )  )
possible :arg1 ( get :arg0 you :arg1 ( meal :arg1-of excellent )  :arg2 ( restaurant :quant most :quant many :mod ( country :name ( name :op1 indian )  )  :arg1 ( avenue :mod nearby :mod lexington )  )  :prep-for ( cost :arg1-of ( include :arg2 ( dish :location here )  )  )  )
and :domain ( sandwich :mod pastrami :example buttah )  :op3 ( experience :arg1 ( and :op1 pickle :op2 ( beer :mod icy :mod cold :quant ( product :arg2-of wash )  )  )  )
and :domain ( sandwich :mod pastrami :example buttah )  :op3 ( experience :arg1 ( and :op1 pickle :op2 ( beer :mod icy :mod cold :quant ( product :arg2-of wash )  )  )  )
and :domain ( sandwich :mod pastrami :example buttah )  :op3 ( experience :arg1 ( and :op1 pickle :op2 ( beer :mod icy :mod cold :quant ( product :arg2-of wash )  )  )  )
and :op1 ( soggy :domain ( pizza :mod plain )  )  :op2 ( and :op1 ( drench :arg1 ( pizza :mod creative :mod wild :mod mushroom :arg0-of ( have :arg0 we )  )  :arg1 ( oil :mod truffle )  :location ( middle :arg0-of ( make :mod again :arg1 soggy )  )  )  :op2 ( nothingon :arg1 rest )  )
and :op1 ( soggy :domain ( pizza :mod plain )  )  :op2 ( and :op1 ( drench :arg1 ( pizza :mod creative :mod wild :mod mushroom :arg0-of ( have :arg0 we )  )  :arg1 ( oil :mod truffle )  :location ( middle :arg0-of ( make :mod again :arg1 soggy )  )  )  :op2 ( nothingon :arg1 rest )  )
and :op1 ( soggy :domain ( pizza :mod plain )  )  :op2 ( and :op1 ( drench :arg1 ( pizza :mod creative :mod wild :mod mushroom :arg0-of ( have :arg0 we )  )  :arg1 ( oil :mod truffle )  :location ( middle :arg0-of ( make :mod again :arg1 soggy )  )  )  :op2 ( nothingon :arg1 rest )  )
and :op1 ( soggy :domain ( pizza :mod plain )  )  :op2 ( and :op1 ( drench :arg1 ( pizza :mod creative :mod wild :mod mushroom :arg0-of ( have :arg0 we )  )  :arg1 ( oil :mod truffle )  :location ( middle :arg0-of ( make :mod again :arg1 soggy )  )  )  :op2 ( nothingon :arg1 rest )  )
good :domain ( omellete :time late :mod nite )  :location here :domain ( variety :polarity - )
complain :time ( after :quant all )  :arg0 they :arg1 ( tip :mod small )
place :domain it :mod great :location-of ( pick :arg1 ( or :op1 ( lunch :arg1-of cheap )  :op2 dinner )  )
place :domain it :mod great :location-of ( pick :arg1 ( or :op1 ( lunch :arg1-of cheap )  :op2 dinner )  )
squeeze :purpose ( counter :mod this )  :arg1 ( man :quant 2 )
mizu :condition ( need :arg0 you :arg1 ( fix :mod sushi :location there :instrument ( and :op1 ( fish :mod quality )  :op2 ( service :mod great )  )  )  )
mizu :condition ( need :arg0 you :arg1 ( fix :mod sushi :location there :instrument ( and :op1 ( fish :mod quality )  :op2 ( service :mod great )  )  )  )
mizu :condition ( need :arg0 you :arg1 ( fix :mod sushi :location there :instrument ( and :op1 ( fish :mod quality )  :op2 ( service :mod great )  )  )  )
and :op1 ( sweet :arg1 waitress )  :op2 ( accommodate :arg1 waitress )  :op1 ( overbear :arg1 waitress )
and :op1 ( go :arg4 there :arg0 ( person :arg0-of ( have-rel-role :arg2 wife )  )  )  :op2 ( wait :arg1 we :arg2 table :null_edge ( possible :arg1 ( see :mod even :arg0 you :arg1 ( many :location there :arg1-of ( empty :prep-with ( sigh :mod reserve )  )  )  )  )  )
and :op1 ( go :arg4 there :arg0 ( person :arg0-of ( have-rel-role :arg2 wife )  )  )  :op2 ( wait :arg1 we :arg2 table :null_edge ( possible :arg1 ( see :mod even :arg0 you :arg1 ( many :location there :arg1-of ( empty :prep-with ( sigh :mod reserve )  )  )  )  )  )
disappoint :arg1 i :mod really :arg1 ( want :arg0 i :arg0 ant :arg1 ( tell :arg0 ant :arg2 everyone :arg1 go :arg1 ( or :op1 eat )  :arg1 ( take :mod even :arg1 food )  )  )
do :concession ( menu :arg1-of ( limit :degree slight )  )  :arg1 ( everything :arg1-of prepare )  :arg2 ( and :op1 perfection :op2 ( ultra :arg1-of fresh )  :op2 ( work :arg0 ( art :mod food )  )  )
do :concession ( menu :arg1-of ( limit :degree slight )  )  :arg1 ( everything :arg1-of prepare )  :arg2 ( and :op1 perfection :op2 ( ultra :arg1-of fresh )  :op2 ( work :arg0 ( art :mod food )  )  )
wonderful :domain ( atmosphere :mod outdoor :mod ( sit :arg2 ( sidewalk :arg0-of ( watch :arg1 ( go :arg1 world :arg4 ( foot :quant 50 )  :direction away :arg4 avenue :time ( evening :arg1-of cool )  )  )  )  )  )
and :null_edge ( large :null_edge 20 )  :op2 ( country :name ( name :op1 $ )  :null_edge 3 )
pick-up :arg1 ( gallery :arg1 ( oven :mod brick )  )  :purpose ( restaurant :mod ( good :degree most )  :mod ( pizza :mod anywhere )  )
and :op1 ( add :arg2 ( and :op1 ( serve :mod great )  :op2 ( food :mod great )  )  :arg2 ( thing :arg2-of price :arg1-of reasonable )  :time ( begin :arg1 you :arg1 ( evening :mod great )  )  )
and :op1 ( add :arg2 ( and :op1 ( serve :mod great )  :op2 ( food :mod great )  )  :arg2 ( thing :arg2-of price :arg1-of reasonable )  :time ( begin :arg1 you :arg1 ( evening :mod great )  )  )
and :op1 ( add :arg2 ( and :op1 ( serve :mod great )  :op2 ( food :mod great )  )  :arg2 ( thing :arg2-of price :arg1-of reasonable )  :time ( begin :arg1 you :arg1 ( evening :mod great )  )  )
possible :arg1 ( seem :null_edge many :arg1 this :arg1 ( food :mod aunthentic :mod thai )  :arg1-of ( cause :arg0 ( arent :domain ( place :quant most :location nyc )  :null_edge ( authentic :mod quite )  )  )  )
eat :arg1 ( grow :location ny :arg0 i )  :arg0 i :arg1 ( share :arg1 bagel )
let :arg0 ( t :null_edge don )  :mod even :arg1 ( start :null_edge ( expensive :domain ( pay :arg3 bill )  )  )
and :op1 ( pancake :mod scallion )  :op2 ( dumpling :arg1-of fry )  :op2 ( nothing :topic ordinary )
and :op1 ( pancake :mod scallion )  :op2 ( dumpling :arg1-of fry )  :op2 ( nothing :topic ordinary )
and :op1 ( fabulous :arg1 ( and :quant all :op1 appetizer :op2 salad )  )  :op2 ( watering :arg1 steak :arg1 mouth )  :op2 ( delicious :domain pasta )
xconcept
xconcept
and :op1 ( fabulous :arg1 ( and :quant all :op1 appetizer :op2 salad )  )  :op2 ( watering :arg1 steak :arg1 mouth )  :op2 ( delicious :domain pasta )
xconcept
xconcept
and :op1 ( fabulous :arg1 ( and :quant all :op1 appetizer :op2 salad )  )  :op2 ( watering :arg1 steak :arg1 mouth )  :op2 ( delicious :domain pasta )
xconcept
xconcept
and :op1 ( fabulous :arg1 ( and :quant all :op1 appetizer :op2 salad )  )  :op2 ( watering :arg1 steak :arg1 mouth )  :op2 ( delicious :domain pasta )
xconcept
xconcept
and :op1 ( have :arg1 ( table :arg2-of ( promise :arg1 we :arg1 ( patron :mod other :mod restaurant :time ( before :op1 ( seat :arg1 we :mod actual )  )  )  )  )  :arg0 we )  :op1 ( serve :arg1 we :arg1 ( dish :arg1-of ( order :arg0 we :frequency 3 :arg2 ( receive :arg0 we :arg1 ( order :quant one )  :time ( after :op1 ( temporal-quantity :unit minute :quant 20 )  :op1 ( serve :arg1 ( rest :part-of table )  :arg1 ( and :op1 ( undercooked :arg1 ( order :mod that )  )  )  )  )  )  )  )  )  :op2 ( charge :arg1 we :arg2 ( more :null_edge 45 )  )  :op2 ( recommend :null_edge we :arg1 bill )
and :op1 ( have :arg1 ( table :arg2-of ( promise :arg1 we :arg1 ( patron :mod other :mod restaurant :time ( before :op1 ( seat :arg1 we :mod actual )  )  )  )  )  :arg0 we )  :op1 ( serve :arg1 we :arg1 ( dish :arg1-of ( order :arg0 we :frequency 3 :arg2 ( receive :arg0 we :arg1 ( order :quant one )  :time ( after :op1 ( temporal-quantity :unit minute :quant 20 )  :op1 ( serve :arg1 ( rest :part-of table )  :arg1 ( and :op1 ( undercooked :arg1 ( order :mod that )  )  )  )  )  )  )  )  )  :op2 ( charge :arg1 we :arg2 ( more :null_edge 45 )  )  :op2 ( recommend :null_edge we :arg1 bill )
and :op1 ( have :arg1 ( table :arg2-of ( promise :arg1 we :arg1 ( patron :mod other :mod restaurant :time ( before :op1 ( seat :arg1 we :mod actual )  )  )  )  )  :arg0 we )  :op1 ( serve :arg1 we :arg1 ( dish :arg1-of ( order :arg0 we :frequency 3 :arg2 ( receive :arg0 we :arg1 ( order :quant one )  :time ( after :op1 ( temporal-quantity :unit minute :quant 20 )  :op1 ( serve :arg1 ( rest :part-of table )  :arg1 ( and :op1 ( undercooked :arg1 ( order :mod that )  )  )  )  )  )  )  )  )  :op2 ( charge :arg1 we :arg2 ( more :null_edge 45 )  )  :op2 ( recommend :null_edge we :arg1 bill )
and :op1 ( have :arg1 ( table :arg2-of ( promise :arg1 we :arg1 ( patron :mod other :mod restaurant :time ( before :op1 ( seat :arg1 we :mod actual )  )  )  )  )  :arg0 we )  :op1 ( serve :arg1 we :arg1 ( dish :arg1-of ( order :arg0 we :frequency 3 :arg2 ( receive :arg0 we :arg1 ( order :quant one )  :time ( after :op1 ( temporal-quantity :unit minute :quant 20 )  :op1 ( serve :arg1 ( rest :part-of table )  :arg1 ( and :op1 ( undercooked :arg1 ( order :mod that )  )  )  )  )  )  )  )  )  :op2 ( charge :arg1 we :arg2 ( more :null_edge 45 )  )  :op2 ( recommend :null_edge we :arg1 bill )
and :op1 ( have :arg1 ( table :arg2-of ( promise :arg1 we :arg1 ( patron :mod other :mod restaurant :time ( before :op1 ( seat :arg1 we :mod actual )  )  )  )  )  :arg0 we )  :op1 ( serve :arg1 we :arg1 ( dish :arg1-of ( order :arg0 we :frequency 3 :arg2 ( receive :arg0 we :arg1 ( order :quant one )  :time ( after :op1 ( temporal-quantity :unit minute :quant 20 )  :op1 ( serve :arg1 ( rest :part-of table )  :arg1 ( and :op1 ( undercooked :arg1 ( order :mod that )  )  )  )  )  )  )  )  )  :op2 ( charge :arg1 we :arg2 ( more :null_edge 45 )  )  :op2 ( recommend :null_edge we :arg1 bill )
notch :arg0 service :mod top
consistent :polarity - :arg1 food :time now
possible :arg1 ( order :arg0 you :mod also :arg1-of special :mod ( kind :mod any :mod dumpling )  )
full :domain i :degree ( much :degree pretty )  :time ( after :op1 ( appetizer :mod fondue )  )
care :time ( before :op1 ( request :arg0 you :arg1 ( spice :mod extra )  )  )
floor :arg1 ( eater :mod octopus )  :arg0 ( salad :mod octopus )
think :arg0 we :arg1 ( place :mod this :arg0-of ( use :arg2 ( cook :mod ( much :degree too )  :mod msg )  :location food )  )
think :arg0 we :arg1 ( place :mod this :arg0-of ( use :arg2 ( cook :mod ( much :degree too )  :mod msg )  :location food )  )
and :op1 ( pathetic :domain ( soup :mod ( kha :mod tom )  )  )
start :arg0 i :arg1 ( beer :mod bombay :quant ( enough :mod big :null_edge 2 )  )
and :op1 ( vibrant :arg1 decor )  :op2 ( eye :arg1 decor )  :op2 ( please :arg1 decor :arg1 ( semi :quant several )  )  :mod ( both :arg1-of private :location ( side :mod right :poss ( hall :mod dine :null_edge ( null_tag :time date-entity )  )  )  )
and :op1 ( vibrant :arg1 decor )  :op2 ( eye :arg1 decor )  :op2 ( please :arg1 decor :arg1 ( semi :quant several )  )  :mod ( both :arg1-of private :location ( side :mod right :poss ( hall :mod dine :null_edge ( null_tag :time date-entity )  )  )  )
and :op1 ( vibrant :arg1 decor )  :op2 ( eye :arg1 decor )  :op2 ( please :arg1 decor :arg1 ( semi :quant several )  )  :mod ( both :arg1-of private :location ( side :mod right :poss ( hall :mod dine :null_edge ( null_tag :time date-entity )  )  )  )
quick :arg1 service
drawback :arg1 ( and :op1 ( slow :arg1 service )  :op2 ( toast :arg0 service :arg1 don )  )
go :arg4 there :purpose ( lunch :mod office )
contrast :arg1 ( excellent :arg1 ( lassus :arg1-of sweet )  )  :arg2 ( and :op1 ( chettinad :arg1 lamb )  :op2 ( naan :mod garlic )  )  :arg2 ( forgettable :domain rasamalaus )
contrast :arg1 ( excellent :arg1 ( lassus :arg1-of sweet )  )  :arg2 ( and :op1 ( chettinad :arg1 lamb )  :op2 ( naan :mod garlic )  )  :arg2 ( forgettable :domain rasamalaus )
contrast :arg1 ( excellent :arg1 ( lassus :arg1-of sweet )  )  :arg2 ( and :op1 ( chettinad :arg1 lamb )  :op2 ( naan :mod garlic )  )  :arg2 ( forgettable :domain rasamalaus )
contrast :arg1 ( excellent :arg1 ( lassus :arg1-of sweet )  )  :arg2 ( and :op1 ( chettinad :arg1 lamb )  :op2 ( naan :mod garlic )  )  :arg2 ( forgettable :domain rasamalaus )
and :op1 ( follow :arg0 we :arg1 ( food :poss chef )  :arg2 ( around :op1 ( york :null_edge new )  )  :duration ( temporal-quantity :unit year :quant 15 )  :arg1 ( innovate :time ( remain :arg3 classic )  :arg1 ( fare :mod bistro )  :time ( and :op1 return :op2 return )  )  )
and :op1 ( follow :arg0 we :arg1 ( food :poss chef )  :arg2 ( around :op1 ( york :null_edge new )  )  :duration ( temporal-quantity :unit year :quant 15 )  :arg1 ( innovate :time ( remain :arg3 classic )  :arg1 ( fare :mod bistro )  :time ( and :op1 return :op2 return )  )  )
and :op1 ( follow :arg0 we :arg1 ( food :poss chef )  :arg2 ( around :op1 ( york :null_edge new )  )  :duration ( temporal-quantity :unit year :quant 15 )  :arg1 ( innovate :time ( remain :arg3 classic )  :arg1 ( fare :mod bistro )  :time ( and :op1 return :op2 return )  )  )
lambchop :domain ( thing :mod ( good :degree most )  :arg1-of taste )
good :degree most :domain ( have :arg0 ( and :op1 ( tuna :mod spicy )  :op2 salmon )  :arg0 we :time ever )
good :degree most :domain ( have :arg0 ( and :op1 ( tuna :mod spicy )  :op2 salmon )  :arg0 we :time ever )
price :arg1-of ( high :arg2 ( seafood :mod good )  :degree too )
price :arg1-of ( high :arg2 ( seafood :mod good )  :degree too )
and :op1 ( good :domain food :degree very )  :op2 ( reasonable :arg1 price )
and :op1 ( good :domain food :degree very )  :op2 ( reasonable :arg1 price )
greet :arg1 ( enter :arg0 we )  :arg1 we :arg0 ( person :arg0-of own :arg1 ( and :op2 steven :op2 frederick :op2 ( go-out :arg2 way :arg2 ( more :compared-to ( host :mod gracious )  )  )  )  )
greet :arg1 ( enter :arg0 we )  :arg1 we :arg0 ( person :arg0-of own :arg1 ( and :op2 steven :op2 frederick :op2 ( go-out :arg2 way :arg2 ( more :compared-to ( host :mod gracious )  )  )  )  )
see :location here :time open :arg1 ( decrease :arg1 quality :arg1 value )  :manner considerable
adorn :arg0 ( dish :mod meat )  :time now :arg1 selection :condition ( s :mod still :null_edge ( vegetarian :mod large :mod friendly )  )
adorn :arg0 ( dish :mod meat )  :time now :arg1 selection :condition ( s :mod still :null_edge ( vegetarian :mod large :mod friendly )  )
price :arg1-of reasonable
and :op1 ( bring :arg0 they :arg1 service :arg1 notch :manner ( offerng :null_edge ( amuse :arg1-of complementary )  :arg2 ( table :quant all )  )  :time celebrate )  :op2 ( give :arg1 ( dessert :mod small )  )
and :op1 ( bring :arg0 they :arg1 service :arg1 notch :manner ( offerng :null_edge ( amuse :arg1-of complementary )  :arg2 ( table :quant all )  )  :time celebrate )  :op2 ( give :arg1 ( dessert :mod small )  )
and :op1 ( bring :arg0 they :arg1 service :arg1 notch :manner ( offerng :null_edge ( amuse :arg1-of complementary )  :arg2 ( table :quant all )  )  :time celebrate )  :op2 ( give :arg1 ( dessert :mod small )  )
and :op1 ( bring :arg0 they :arg1 service :arg1 notch :manner ( offerng :null_edge ( amuse :arg1-of complementary )  :arg2 ( table :quant all )  )  :time celebrate )  :op2 ( give :arg1 ( dessert :mod small )  )
try :arg1 ( tuna :mod crunchy )  :arg1 die
contrast :arg1 ( win :arg0 i )  :arg2 ( break :arg1 bank )  :arg2 ( come :arg1 i :mod also :direction back :arg1 food )
become :arg2 all :arg1 ( gem :mod this :mod midtown )  :time instant :arg1 ( restaurant :mod favor :mod sushi :location city )
fun :quant lot :accompanier ( and :op1 ( entertain :mod live )  :op2 ( kind :quant all :mod ( effect :mod type :arg1-of special )  )  )
fun :quant lot :accompanier ( and :op1 ( entertain :mod live )  :op2 ( kind :quant all :mod ( effect :mod type :arg1-of special )  )  )
xconcept :x ( look :arg0 you :null_edge ( null_tag :arg1 you )  :arg1 ( sushi :arg1-of perfect :mod tradition )  )  :x ( look :arg0 you :null_edge ( null_tag :arg1 you :arg1 ( contrast :arg2 ( try :condition ( go :null_edge here )  )  :arg1 sushi :arg2 ( side :null_edge east )  )  )  :arg1 ( thing :arg3-of combine :mod interesting )  )
xconcept :x ( look :arg0 you :null_edge ( null_tag :arg1 you )  :arg1 ( sushi :arg1-of perfect :mod tradition )  )  :x ( look :arg0 you :null_edge ( null_tag :arg1 you :arg1 ( contrast :arg2 ( try :condition ( go :null_edge here )  )  :arg1 sushi :arg2 ( side :null_edge east )  )  )  :arg1 ( thing :arg3-of combine :mod interesting )  )
refill :polarity - :arg1 ( thing :arg1-of drink :mod fountain )
beer :quant 100 :arg1-of choose
care :arg0 portion :null_edge ( re :degree huge )
fix :arg1 ( bet :domain ( tartare :mod steak )  :mod great )  :arg0 they :arg1 it :arg2 you :arg2 table
and :op2 ( like :arg0 ( i :time ( time :location there )  )  :arg1 ( apt :arg2 ( crab :arg1 croquette )  :arg1 ( order :arg0 i )  )  :arg1 ( change :arg1 it :manner ( make :arg1 ( deal :polarity - :mod big )  )  )  )
great :domain ( entertain :beneficiary ( and :op1 ( group :mod large )  :op2 celebrate )  :extent ( super-power :mod happy )  :time evening )
mention :arg0 i :arg1 wine
limit :polarity - :mod plus :time ( night :mod ( event :name ( name :op1 wednesday )  )  )  :domain ( wine :mod house )
say :arg1 ( bakery :domain bread :arg1-of special :arg1-of ( see :arg0 we :arg2 ( buy :arg1 ( manhathan :mod dowtown )  )  )  )
large :domain ( serving :mod dim :location here )  :compared-to ( use :arg0 i :arg0 m )  :degree ( more :degree bit )
seem :time ( date-entity :year 2003 :season summer )  :arg1 ( and :op1 ( change :arg1 manage )  :op2 ( replace :arg1 ( door :mod great :mod big )  :arg2 ( front :consist-of glass :arg0-of ( rid :arg1 ( getup :arg1-of dark :mod romantic )  )  )  )  )
seem :time ( date-entity :year 2003 :season summer )  :arg1 ( and :op1 ( change :arg1 manage )  :op2 ( replace :arg1 ( door :mod great :mod big )  :arg2 ( front :consist-of glass :arg0-of ( rid :arg1 ( getup :arg1-of dark :mod romantic )  )  )  )  )
seem :time ( date-entity :year 2003 :season summer )  :arg1 ( and :op1 ( change :arg1 manage )  :op2 ( replace :arg1 ( door :mod great :mod big )  :arg2 ( front :consist-of glass :arg0-of ( rid :arg1 ( getup :arg1-of dark :mod romantic )  )  )  )  )
win :arg0 we :arg1 ( go :arg0 we :arg4 ( place :mod this )  :mod again :arg4 ( meal :mod good )  )
moist :domain ( codfish :arg1-of barbecue )  :degree gorgeously :null_edge ( do :condition ( poach :purpose ( let :arg1 ( texture :manner fabulous )  :arg0 ( season :mod ( bland :mod curiously )  )  )  :null_edge ( overwhelm :arg0 ( rub :arg1 spice )  )  )  :arg0 ( or :op1 ( mix :mod herb )  :op2 ( sauce :mod other )  :degree much )  :arg2 ( enhance :arg0 or )  )
moist :domain ( codfish :arg1-of barbecue )  :degree gorgeously :null_edge ( do :condition ( poach :purpose ( let :arg1 ( texture :manner fabulous )  :arg0 ( season :mod ( bland :mod curiously )  )  )  :null_edge ( overwhelm :arg0 ( rub :arg1 spice )  )  )  :arg0 ( or :op1 ( mix :mod herb )  :op2 ( sauce :mod other )  :degree much )  :arg2 ( enhance :arg0 or )  )
moist :domain ( codfish :arg1-of barbecue )  :degree gorgeously :null_edge ( do :condition ( poach :purpose ( let :arg1 ( texture :manner fabulous )  :arg0 ( season :mod ( bland :mod curiously )  )  )  :null_edge ( overwhelm :arg0 ( rub :arg1 spice )  )  )  :arg0 ( or :op1 ( mix :mod herb )  :op2 ( sauce :mod other )  :degree much )  :arg2 ( enhance :arg0 or )  )
moist :domain ( codfish :arg1-of barbecue )  :degree gorgeously :null_edge ( do :condition ( poach :purpose ( let :arg1 ( texture :manner fabulous )  :arg0 ( season :mod ( bland :mod curiously )  )  )  :null_edge ( overwhelm :arg0 ( rub :arg1 spice )  )  )  :arg0 ( or :op1 ( mix :mod herb )  :op2 ( sauce :mod other )  :degree much )  :arg2 ( enhance :arg0 or )  )
moist :domain ( codfish :arg1-of barbecue )  :degree gorgeously :null_edge ( do :condition ( poach :purpose ( let :arg1 ( texture :manner fabulous )  :arg0 ( season :mod ( bland :mod curiously )  )  )  :null_edge ( overwhelm :arg0 ( rub :arg1 spice )  )  )  :arg0 ( or :op1 ( mix :mod herb )  :op2 ( sauce :mod other )  :degree much )  :arg2 ( enhance :arg0 or )  )
take :time ( after :op1 dinner )  :arg1 date :arg2 ( floor :mod huge :mod dance :ord ( ordinal-entity :null_edge ( include :null_edge 1 :arg2 ( see :mod probable :arg1 ( big :degree most )  :arg0 you :arg2 ll :location ny )  )  )  )
take :time ( after :op1 dinner )  :arg1 date :arg2 ( floor :mod huge :mod dance :ord ( ordinal-entity :null_edge ( include :null_edge 1 :arg2 ( see :mod probable :arg1 ( big :degree most )  :arg0 you :arg2 ll :location ny )  )  )  )
offere :null_edge taj :arg1 ( and :op1 ( value :mod gret )  :op2 ( food :mod great )  )
offere :null_edge taj :arg1 ( and :op1 ( value :mod gret )  :op2 ( food :mod great )  )
change :arg0 ( and :op1 chef :op2 own )
xconcept
xconcept
change :arg0 ( and :op1 chef :op2 own )
xconcept
xconcept
and :op2 ( and :op2 i :op1 ( person :arg0-of ( have-rel-role :arg2 boyfriend )  )  )  :time recent :op2 ( dinner :time early :location artisanal )  :op2 ( satisfy :arg2 experience )
contrast :arg1 ( order :arg0 ( t :arg1 don )  :time ever :arg1 bacon :time late :location nite :arg1 ( or :op2 platter :op1 sandwich :op1 ( t :prep-for matter :null_edge don :null_edge any )  )  :condition ( turn :arg0 ( fry :time morning )  :arg1-of hard :arg1 ( baco :null_edge almost )  :arg1 ( hurt :arg0 fry :arg0 baco :arg1 molar )  )  )
contrast :arg1 ( order :arg0 ( t :arg1 don )  :time ever :arg1 bacon :time late :location nite :arg1 ( or :op2 platter :op1 sandwich :op1 ( t :prep-for matter :null_edge don :null_edge any )  )  :condition ( turn :arg0 ( fry :time morning )  :arg1-of hard :arg1 ( baco :null_edge almost )  :arg1 ( hurt :arg0 fry :arg0 baco :arg1 molar )  )  )
contrast :arg1 ( order :arg0 ( t :arg1 don )  :time ever :arg1 bacon :time late :location nite :arg1 ( or :op2 platter :op1 sandwich :op1 ( t :prep-for matter :null_edge don :null_edge any )  )  :condition ( turn :arg0 ( fry :time morning )  :arg1-of hard :arg1 ( baco :null_edge almost )  :arg1 ( hurt :arg0 fry :arg0 baco :arg1 molar )  )  )
contrast :arg1 ( order :arg0 ( t :arg1 don )  :time ever :arg1 bacon :time late :location nite :arg1 ( or :op2 platter :op1 sandwich :op1 ( t :prep-for matter :null_edge don :null_edge any )  )  :condition ( turn :arg0 ( fry :time morning )  :arg1-of hard :arg1 ( baco :null_edge almost )  :arg1 ( hurt :arg0 fry :arg0 baco :arg1 molar )  )  )
contrast :arg1 ( order :arg0 ( t :arg1 don )  :time ever :arg1 bacon :time late :location nite :arg1 ( or :op2 platter :op1 sandwich :op1 ( t :prep-for matter :null_edge don :null_edge any )  )  :condition ( turn :arg0 ( fry :time morning )  :arg1-of hard :arg1 ( baco :null_edge almost )  :arg1 ( hurt :arg0 fry :arg0 baco :arg1 molar )  )  )
contrast :arg1 ( bagel :mod outstanding )  :arg2 ( pay :arg1-of ( get :arg0 you )  :arg0 you )
pizza :domain ( pizza :mod only :null_edge nyc :domain ( recommend :arg1 ( have :arg1 ( topping :mod additional )  )  )  )  :null_edge ( taste :arg0 crust :example ( bread :mod ( good :degree most )  :arg1-of fresh :arg1-of baked )  )
pizza :domain ( pizza :mod only :null_edge nyc :domain ( recommend :arg1 ( have :arg1 ( topping :mod additional )  )  )  )  :null_edge ( taste :arg0 crust :example ( bread :mod ( good :degree most )  :arg1-of fresh :arg1-of baked )  )
pizza :domain ( pizza :mod only :null_edge nyc :domain ( recommend :arg1 ( have :arg1 ( topping :mod additional )  )  )  )  :null_edge ( taste :arg0 crust :example ( bread :mod ( good :degree most )  :arg1-of fresh :arg1-of baked )  )
pizza :domain ( pizza :mod only :null_edge nyc :domain ( recommend :arg1 ( have :arg1 ( topping :mod additional )  )  )  )  :null_edge ( taste :arg0 crust :example ( bread :mod ( good :degree most )  :arg1-of fresh :arg1-of baked )  )
pizza :domain ( pizza :mod only :null_edge nyc :domain ( recommend :arg1 ( have :arg1 ( topping :mod additional )  )  )  )  :null_edge ( taste :arg0 crust :example ( bread :mod ( good :degree most )  :arg1-of fresh :arg1-of baked )  )
find :arg0 i :time ( night :mod cold :mod ( spot :arg1-of perfect :arg1-of warm )  )
have :arg0 they :mod even :arg1 section :location ( menu :arg1-of ( call :arg1 ( food :mod ( country :name ( name :op1 chinese )  )  )  )  )
have :arg0 they :mod even :arg1 section :location ( menu :arg1-of ( call :arg1 ( food :mod ( country :name ( name :op1 chinese )  )  )  )  )
warm :domain service :null_edge ( attentive :domain service )  :null_edge ( and :op2 ( exellent :domain service :null_edge ( carpaachio :arg1 ( beef :mod ( portion :mod huge )  )  )  )  :op1 ( fresh :domain pasta )  :op2 ( prepare :arg1 pasta )  )
warm :domain service :null_edge ( attentive :domain service )  :null_edge ( and :op2 ( exellent :domain service :null_edge ( carpaachio :arg1 ( beef :mod ( portion :mod huge )  )  )  )  :op1 ( fresh :domain pasta )  :op2 ( prepare :arg1 pasta )  )
warm :domain service :null_edge ( attentive :domain service )  :null_edge ( and :op2 ( exellent :domain service :null_edge ( carpaachio :arg1 ( beef :mod ( portion :mod huge )  )  )  )  :op1 ( fresh :domain pasta )  :op2 ( prepare :arg1 pasta )  )
warm :domain service :null_edge ( attentive :domain service )  :null_edge ( and :op2 ( exellent :domain service :null_edge ( carpaachio :arg1 ( beef :mod ( portion :mod huge )  )  )  )  :op1 ( fresh :domain pasta )  :op2 ( prepare :arg1 pasta )  )
do :arg0 ( and :op1 kalbus :op2 nebbiolo )  :arg1 work :manner together
do :arg0 ( and :op1 kalbus :op2 nebbiolo )  :arg1 work :manner together
food :mod ( good :degree most )  :mod ( country :name ( name :op1 italian )  )  :null_edge ( and :domain i :time ever :op1 ( country :name ( name :op1 italian )  )  :op1 mean )
recommend :arg0 i :arg1 scopa :condition ( go :arg4 ( food :arg1-of wonderful :mod ( country :name ( name :op1 italian )  )  )  )  :arg1 ( person :mod all :arg0-of ( have-rel-role :arg2 friend )  )
locate :time ( end :arg1 ( block :mod magnificent )  )
see :arg1 ( look :direction around )  :arg0 i :arg1 ( room :mod ( full :arg2 ( yorker :mod new :arg1-of ( enjoy :arg1 ( meal :mod real :mod ( clubhouse :mod ( fabulous :arg0-of ( try :location ( restaurant :mod real )  :arg1 see )  )  )  )  )  )  )  )
see :arg1 ( look :direction around )  :arg0 i :arg1 ( room :mod ( full :arg2 ( yorker :mod new :arg1-of ( enjoy :arg1 ( meal :mod real :mod ( clubhouse :mod ( fabulous :arg0-of ( try :location ( restaurant :mod real )  :arg1 see )  )  )  )  )  )  )  )
see :arg1 ( look :direction around )  :arg0 i :arg1 ( room :mod ( full :arg2 ( yorker :mod new :arg1-of ( enjoy :arg1 ( meal :mod real :mod ( clubhouse :mod ( fabulous :arg0-of ( try :location ( restaurant :mod real )  :arg1 see )  )  )  )  )  )  )  )
don :arg0 they :arg1 ( walk :direction around :prep-with ( tray :arg1 ( sum :mod dim )  )  )
see :arg1 ( bartender :mod great :arg1 bar :mod ( gorgeous :degree most )  )  :arg0 you :time ever :arg1 ( lady :manner specific :mod blond )
see :arg1 ( bartender :mod great :arg1 bar :mod ( gorgeous :degree most )  )  :arg0 you :time ever :arg1 ( lady :manner specific :mod blond )
plan :arg0 we :arg1 ( get :arg0 we :arg1 ( dessert :null_edge ( contrast :arg2 waitress )  )  :mod basic :arg2 bill :time ( before :op1 ( chance :arg0 we :arg1 order )  )  )
plan :arg0 we :arg1 ( get :arg0 we :arg1 ( dessert :null_edge ( contrast :arg2 waitress )  )  :mod basic :arg2 bill :time ( before :op1 ( chance :arg0 we :arg1 order )  )  )
plan :arg0 we :arg1 ( get :arg0 we :arg1 ( dessert :null_edge ( contrast :arg2 waitress )  )  :mod basic :arg2 bill :time ( before :op1 ( chance :arg0 we :arg1 order )  )  )
love :arg0 i :mod really :arg1 ( and :op2 ( touch-up :arg1-of differ :mod inovated :arg0-of ( s :arg1 ( give :arg2 food )  )  )  )
love :arg0 i :mod really :arg1 ( and :op2 ( touch-up :arg1-of differ :mod inovated :arg0-of ( s :arg1 ( give :arg2 food )  )  )  )
and :op1 ( come :arg1 they )  :time over :op2 ( cook :arg0 they )  :op2 ( existant :arg0 they :arg1 cheese-off :mod almost )
and :domain i :op2 ( meal :arg1-of terrific )  :op2 ( guide :arg0 i :arg0 server :arg2 ( wine :arg1-of ( nice :degree very )  :arg1-of range )  )  :op1 ( allow :arg0 i :arg1-of instead-of :arg1 ( purchase :arg1 ( wine :arg1-of price :mod good )  )  )
and :domain i :op2 ( meal :arg1-of terrific )  :op2 ( guide :arg0 i :arg0 server :arg2 ( wine :arg1-of ( nice :degree very )  :arg1-of range )  )  :op1 ( allow :arg0 i :arg1-of instead-of :arg1 ( purchase :arg1 ( wine :arg1-of price :mod good )  )  )
and :domain i :op2 ( meal :arg1-of terrific )  :op2 ( guide :arg0 i :arg0 server :arg2 ( wine :arg1-of ( nice :degree very )  :arg1-of range )  )  :op1 ( allow :arg0 i :arg1-of instead-of :arg1 ( purchase :arg1 ( wine :arg1-of price :mod good )  )  )
and :domain i :op2 ( meal :arg1-of terrific )  :op2 ( guide :arg0 i :arg0 server :arg2 ( wine :arg1-of ( nice :degree very )  :arg1-of range )  )  :op1 ( allow :arg0 i :arg1-of instead-of :arg1 ( purchase :arg1 ( wine :arg1-of price :mod good )  )  )
and :domain i :op2 ( meal :arg1-of terrific )  :op2 ( guide :arg0 i :arg0 server :arg2 ( wine :arg1-of ( nice :degree very )  :arg1-of range )  )  :op1 ( allow :arg0 i :arg1-of instead-of :arg1 ( purchase :arg1 ( wine :mod priced/0 :mod good )  )  )
and :domain i :op2 ( meal :arg1-of terrific )  :op2 ( guide :arg0 i :arg0 server :arg2 ( wine :arg1-of ( nice :degree very )  :arg1-of range )  )  :op1 ( allow :arg0 i :arg1-of instead-of :arg1 ( purchase :null_edge ( good :null_edge ( price :null_edge wine/n )  )  )  )
contrast :arg1 ( possible :arg1 ( rude :domain svc :degree bit :arg1 ( restaurant :mod overall )  )  :condition ( have :arg0 you :arg1 ( group :mod big )  )  )
and :op1 ( good :domain food :arg2 ( dish :mod ( basic :degree more )  )  )  :op2 ( delicious :domain drink )
and :op1 ( good :domain food :arg2 ( dish :mod ( basic :degree more )  )  )  :op2 ( delicious :domain drink )
and :op1 ( good :domain food :arg2 ( dish :mod ( basic :degree more )  )  )  :op2 ( delicious :domain drink )
contrast :arg1 ( fish :domain ( hit :mod main )  :mod whole :mod grilled )
and :domain i :op1 ( tartare :mod tuna )  :op1 sake :op2 ( ravioli :mod mushroom :null_edge ( noir :null_edge pinot )  )  :op2 ( wine :mod chocolate :mod dessert )
and :domain i :op1 ( tartare :mod tuna )  :op1 sake :op2 ( ravioli :mod mushroom :null_edge ( noir :null_edge pinot )  )  :op2 ( wine :mod chocolate :mod dessert )
and :domain i :op1 ( tartare :mod tuna )  :op1 sake :op2 ( ravioli :mod mushroom :null_edge ( noir :null_edge pinot )  )  :op2 ( wine :mod chocolate :mod dessert )
and :domain i :op1 ( tartare :mod tuna )  :op1 sake :op2 ( ravioli :mod mushroom :null_edge ( noir :null_edge pinot )  )  :op2 ( wine :mod chocolate :mod dessert )
and :domain i :op1 ( tartare :mod tuna )  :op1 sake :op2 ( ravioli :mod mushroom :null_edge ( noir :null_edge pinot )  )  :op2 ( wine :mod chocolate :mod dessert )
and :domain i :op1 ( tartare :mod tuna )  :op1 sake :op2 ( ravioli :mod mushroom :null_edge ( noir :null_edge pinot )  )  :op2 ( wine :mod chocolate :mod dessert )
fabulous :time ( day :arg1-of hot )  :arg1 ( and :op1 stop :op2 ( enjoy :arg1 lunch )  )
and :op1 ( delicious :domain food :topic ( serve :arg2 ( and :op1 friendly :op2 personable )  )  )  :op2 ( prepare :arg1 food :arg1-of beautiful )
and :op1 ( delicious :domain food :topic ( serve :arg2 ( and :op1 friendly :op2 personable )  )  )  :op2 ( prepare :arg1 food :arg1-of beautiful )
go :arg0 i :mod usual :arg4 there :time ( late :time night )  :purpose ( get :arg1 work :arg1 ( deal :arg2 ( t :null_edge don )  :arg2 ( or :op1 crowd :op2 line )  )  )
go :arg0 i :mod usual :arg4 there :time ( late :time night )  :purpose ( get :arg1 work :arg1 ( deal :arg2 ( t :null_edge don )  :arg2 ( or :op1 crowd :op2 line )  )  )
good :domain pizza :location here :manner consistent
and :domain we :op2 ( tiem :mod great :arg0-of ( watch :arg1 ( and :op1 show :op2 character )  )  )  :op2 ( food :null_edge null_tag :mod just :arg0-of ( look :arg0 we )  )
and :domain we :op2 ( tiem :mod great :arg0-of ( watch :arg1 ( and :op1 show :op2 character )  )  )  :op2 ( food :null_edge null_tag :mod just :arg0-of ( look :arg0 we )  )
and :domain we :op2 ( tiem :mod great :arg0-of ( watch :arg1 ( and :op1 show :op2 character )  )  )  :op2 ( food :null_edge null_tag :mod just :arg0-of ( look :arg0 we )  )
and :op1 ( approach :time ( after :op1 ( try :quant 2 :arg0 ( waiter :arg1-of ( take :arg3 away )  )  :arg1 ( look :arg0 we :arg1 hadn :mod even :arg1 ( beer :mod full )  :purpose ( drink :arg0 we :arg0 we :time yet )  )  )  )  :arg0 manage )  :op2 ( tell :arg0 manage :arg1 ( need :time reserve )  )
and :op1 ( approach :time ( after :op1 ( try :quant 2 :arg0 ( waiter :arg1-of ( take :arg3 away )  )  :arg1 ( look :arg0 we :arg1 hadn :mod even :arg1 ( beer :mod full )  :purpose ( drink :arg0 we :arg0 we :time yet )  )  )  )  :arg0 manage )  :op2 ( tell :arg0 manage :arg1 ( need :time reserve )  )
and :op1 ( approach :time ( after :op1 ( try :quant 2 :arg0 ( waiter :arg1-of ( take :arg3 away )  )  :arg1 ( look :arg0 we :arg1 hadn :mod even :arg1 ( beer :mod full )  :purpose ( drink :arg0 we :arg0 we :time yet )  )  )  )  :arg0 manage )  :op2 ( tell :arg0 manage :arg1 ( need :time reserve )  )
and :op1 ( approach :time ( after :op1 ( try :quant 2 :arg0 ( waiter :arg1-of ( take :arg3 away )  )  :arg1 ( look :arg0 we :arg1 hadn :mod even :arg1 ( beer :mod full )  :purpose ( drink :arg0 we :arg0 we :time yet )  )  )  )  :arg0 manage )  :op2 ( tell :arg0 manage :arg1 ( need :time reserve )  )
recommend :arg1 wouldn :arg1 it :arg2 dinner
and :op1 ( watery :domain sauce )  :op2 ( have :arg1 sauce :arg1 ( didn :mod food )  :arg1 ( flavor :quant much )  )
and :op1 ( watery :domain sauce )  :op2 ( have :arg1 sauce :arg1 ( didn :mod food )  :arg1 ( flavor :quant much )  )
and :op1 ( watery :domain sauce )  :op2 ( have :arg1 sauce :arg1 ( didn :mod food )  :arg1 ( flavor :quant much )  )
enjoy :arg0 ( and :op2 i :op1 ( person :arg0-of ( have-rel-role :arg2 husband )  )  )  :arg1 sangrium
contrast :arg1 ( place :time ( after :op1 ( night :mod last )  )  :domain ( grill :arg1 spice )  :mod only :location-of ( cuisine :li i :null_edge null_tag :mod eat :mod ( country :name ( name :op1 indian )  )  )  )
and :op1 ( opt :arg0 ( we :mod both )  :arg1 ( dish :mod pasta )  )  :op3 ( serve :arg1 they :arg1 ( and :op1 timely :op2 fresh )  )
and :op1 ( opt :arg0 ( we :mod both )  :arg1 ( dish :mod pasta )  )  :op3 ( serve :arg1 they :arg1 ( and :op1 timely :op2 fresh )  )
come :time first :arg1 ( bread :arg1-of wrong )  :arg1 appetizer :time ( try :arg0 i :arg1 ( order :arg0 i :arg1 ( wine :quant glass )  :purpose ( course :mod main )  )  )
come :time first :arg1 ( bread :arg1-of wrong )  :arg1 appetizer :time ( try :arg0 i :arg1 ( order :arg0 i :arg1 ( wine :quant glass )  :purpose ( course :mod main )  )  )
come :time first :arg1 ( bread :arg1-of wrong )  :arg1 appetizer :time ( try :arg0 i :arg1 ( order :arg0 i :arg1 ( wine :quant glass )  :purpose ( course :mod main )  )  )
come :time first :arg1 ( bread :arg1-of wrong )  :arg1 appetizer :time ( try :arg0 i :arg1 ( order :arg0 i :arg1 ( wine :quant glass )  :purpose ( course :mod main )  )  )
contrast :arg1 ( sure :arg1 ( dine :arg0 ( reviewer :time previous )  )  :arg1 ( and :null_edge ( saul :location ( neighborhood :mod great )  )  :op2 ( have :arg1 ( food :mod great )  )  )  )
contrast :arg1 ( sure :arg1 ( dine :arg0 ( reviewer :time previous )  )  :arg1 ( and :null_edge ( saul :location ( neighborhood :mod great )  )  :op2 ( have :arg1 ( food :mod great )  )  )  )
spot :location ( area :domain ( lack :arg1 ( food :mod decency :mod thai )  :arg1 this )  )  :quant one :mod ( good :degree most )
and :op1 ( tell :arg1 ( send :arg0 herky :arg1 you )  )  :op2 ( get :arg1 ( look :arg1-of ( confuse :arg2 free )  :arg1 waiter )  )
reserve :arg1-of ( contrast :arg1 ( expect :arg1 ( delay :null_edge ( date-entity :null_edge 15 )  :arg1 ( difficult :arg0 ( person :arg2-of staff :arg0-of host )  :domain ( seat :arg1 ( guest :arg1-of ( arrive :accompanier reserve )  )  )  :arg1-of ( cause :arg0 ( have :null_edge probable :arg1 ( lot :mod ( close-down :arg2 walk :degree so :arg2 ( square :mod time )  )  )  )  )  )  )  )  )
reserve :arg1-of ( contrast :arg1 ( expect :arg1 ( delay :null_edge ( date-entity :null_edge 15 )  :arg1 ( difficult :arg0 ( person :arg2-of staff :arg0-of host )  :domain ( seat :arg1 ( guest :arg1-of ( arrive :accompanier reserve )  )  )  :arg1-of ( cause :arg0 ( have :null_edge probable :arg1 ( lot :mod ( close-down :arg2 walk :degree so :arg2 ( square :mod time )  )  )  )  )  )  )  )  )
reserve :arg1-of ( contrast :arg1 ( expect :arg1 ( delay :null_edge ( date-entity :null_edge 15 )  :arg1 ( difficult :arg0 ( person :arg2-of staff :arg0-of host )  :domain ( seat :arg1 ( guest :arg1-of ( arrive :accompanier reserve )  )  )  :arg1-of ( cause :arg0 ( have :null_edge probable :arg1 ( lot :mod ( close-down :arg2 walk :degree so :arg2 ( square :mod time )  )  )  )  )  )  )  )  )
reserve :arg1-of ( contrast :arg1 ( expect :arg1 ( delay :null_edge ( date-entity :null_edge 15 )  :arg1 ( difficult :arg0 ( person :arg2-of staff :arg0-of host )  :domain ( seat :arg1 ( guest :arg1-of ( arrive :accompanier reserve )  )  )  :arg1-of ( cause :arg0 ( have :null_edge probable :arg1 ( lot :mod ( close-down :arg2 walk :degree so :arg2 ( square :mod time )  )  )  )  )  )  )  )  )
food :quant ( or :op1 ( average :arg1 ( thing :location above )  )  :op2 ( include :arg0 food :arg1 ( dish :quant some :arg1-of surprise :mod tasty )  )  )
food :quant ( or :op1 ( average :arg1 ( thing :location above )  )  :op2 ( include :arg0 food :arg1 ( dish :quant some :arg1-of surprise :mod tasty )  )  )
seem :arg1 they :arg1 ( place :arg0 ( t :null_edge don )  :arg1 ( emphasize :arg1 ( or :op1 special :op2 ( ingredient :arg1-of fresh )  :arg1-of ( necessary :null_edge ( thaus :mod good )  )  )  )  )
seem :arg1 they :arg1 ( place :arg0 ( t :null_edge don )  :arg1 ( emphasize :arg1 ( or :op1 special :op2 ( ingredient :arg1-of fresh )  :arg1-of ( necessary :null_edge ( thaus :mod good )  )  )  )  )
seem :arg1 they :arg1 ( place :arg0 ( t :null_edge don )  :arg1 ( emphasize :arg1 ( or :op1 special :op2 ( ingredient :arg1-of fresh )  :arg1-of ( necessary :null_edge ( thaus :mod good )  )  )  )  )
and :op1 ( apetizer :mod other )  :op2 food
and :op1 ( apetizer :mod other )  :op2 food
taste :arg0 ( dish :example ( and :op1 noodle )  )  :null_edge great
good :domain food :arg2 ever
and :op1 ( thin :arg1 crust )  :op2 ( fresh :domain crust :arg1 ingredient )  :op2 ( friendly :arg1 crust :arg1 ( person :arg2-of staff )  )
and :op1 ( thin :arg1 crust )  :op2 ( fresh :domain crust :arg1 ingredient )  :op2 ( friendly :arg1 crust :arg1 ( person :arg2-of staff )  )
and :op1 ( thin :arg1 crust )  :op2 ( fresh :domain crust :arg1 ingredient )  :op2 ( friendly :arg1 crust :arg1 ( person :arg2-of staff )  )
also :arg2 ( expensive :degree ( more :mod little )  :compared-to ( place :arg1-of average :mod bagel )  )
sauce :mod ( undercooked :arg1 food )  :arg1 ( and :op1 watery :op2 ( raw :arg1 vegetable )  )
sauce :mod ( undercooked :arg1 food )  :arg1 ( and :op1 watery :op2 ( raw :arg1 vegetable )  )
sauce :mod ( undercooked :arg1 food )  :arg1 ( and :op1 watery :op2 ( raw :arg1 vegetable )  )
xconcept :x and :x ( have :arg0 ( clam :mod fried )  :arg1 ( kick :mod just :quant enough )  :purpose ( make :arg0 clam :arg1 ( em :topic eat )  )  )
excite :domain ( sauce :arg1-of use )  :mod also :degree that
menu :domain secret :purpose lunch :arg0-of ( offer :arg1 ( appetizer :mod complimentary )  :arg1 ( order :mod every )  )
menu :domain secret :purpose lunch :arg0-of ( offer :arg1 ( appetizer :mod complimentary )  :arg1 ( order :mod every )  )
menu :domain secret :purpose lunch :arg0-of ( offer :arg1 ( appetizer :mod complimentary )  :arg1 ( order :mod every )  )
and :op1 ( quality :domain rice :mod poor )  :op2 ( cook :arg1 rice :manner ( badly :degree so :null_edge hard )  )
and :op1 ( quality :domain rice :mod poor )  :op2 ( cook :arg1 rice :manner ( badly :degree so :null_edge hard )  )
and :op1 ( quality :domain rice :mod poor )  :op2 ( cook :arg1 rice :manner ( badly :degree so :null_edge hard )  )
and :op1 ( have :arg0 we :arg1 ( and :op1 champagne :op2 caviar :op1 ( feel :arg0 we :arg2 princess )  )  )
and :op1 ( have :arg0 we :arg1 ( and :op1 champagne :op2 caviar :op1 ( feel :arg0 we :arg2 princess )  )  )
and :op1 ( excellent :arg1 shrimp )  :op2 ( plentiful :arg1 antipasto )
and :op1 ( excellent :arg1 shrimp )  :op2 ( plentiful :arg1 antipasto )
and :op1 ( candle :arg1-of ( come :arg1 dessert )  :arg1-of ( cause :arg0 ( ask :arg0 anyone :arg1 one :arg2 contrast :null_edge ( see :arg1-of cause :arg0 waiter :arg1 ( open :arg1 ( and :op1 ( card :mod birthday )  :op2 gift )  )  )  )  )  )  :op2 ( say :arg1 ( know :arg1 ( occassion :arg1-of special :mod ( sort :mod some )  )  )  )
and :op1 ( candle :arg1-of ( come :arg1 dessert )  :arg1-of ( cause :arg0 ( ask :arg0 anyone :arg1 one :arg2 contrast :null_edge ( see :arg1-of cause :arg0 waiter :arg1 ( open :arg1 ( and :op1 ( card :mod birthday )  :op2 gift )  )  )  )  )  )  :op2 ( say :arg1 ( know :arg1 ( occassion :arg1-of special :mod ( sort :mod some )  )  )  )
get :arg0 i :arg1 ( combo :null_edge 10 :mod ( dim :arg1 piece )  :arg2-of ( bite :mod great )  )
and :op2 ( seating :arg1-of ( limit :degree ( very :mod also )  )  )  :op2 ( possible :arg1 ( wait :mod substantial :arg2 ( get :arg1 food :arg2 peak )  )  )
and :op2 ( seating :arg1-of ( limit :degree ( very :mod also )  )  )  :op2 ( possible :arg1 ( wait :mod substantial :arg2 ( get :arg1 food :arg2 peak )  )  )
and :op2 ( seating :arg1-of ( limit :degree ( very :mod also )  )  )  :op2 ( possible :arg1 ( wait :mod substantial :arg2 ( get :arg1 food :arg2 peak )  )  )
go :arg1 ( or :op1 ( martini :mod just :arg1-of quick )  :op1 bar :op1 ( recommend :arg1 ( s :null_edge jeffery )  )  :op2 ( mind :arg1 ( blow :arg1 ( chicken :mod roast )  )  )  )  :arg4 village
go :arg1 ( or :op1 ( martini :mod just :arg1-of quick )  :op1 bar :op1 ( recommend :arg1 ( s :null_edge jeffery )  )  :op2 ( mind :arg1 ( blow :arg1 ( chicken :mod roast )  )  )  )  :arg4 village
go :arg1 ( or :op1 ( martini :mod just :arg1-of quick )  :op1 bar :op1 ( recommend :arg1 ( s :null_edge jeffery )  )  :op2 ( mind :arg1 ( blow :arg1 ( chicken :mod roast )  )  )  )  :arg4 village
contrast :location outside :arg2 ( hot :degree ( too :degree little )  :prep-in sun :mod anyway )  :arg2 ( nice :arg1 ( table :null_edge insde )  :degree very )  :time ( before :op1 ( wait :arg1-of long :arg2 table )  )
contrast :location outside :arg2 ( hot :degree ( too :degree little )  :prep-in sun :mod anyway )  :arg2 ( nice :arg1 ( table :null_edge insde )  :degree very )  :time ( before :op1 ( wait :arg1-of long :arg2 table )  )
contrast :location outside :arg2 ( hot :degree ( too :degree little )  :prep-in sun :mod anyway )  :arg2 ( nice :arg1 ( table :null_edge insde )  :degree very )  :time ( before :op1 ( wait :arg1-of long :arg2 table )  )
price :arg2 ( low :degree wonderfully )
have-condition :arg2 ( like :arg0 you :arg1 ( food :mod spicy )  )  :arg1 ( vindaloo :mod chicken )
have-condition :arg2 ( like :arg0 you :arg1 ( food :mod spicy )  )  :arg1 ( vindaloo :mod chicken )
contrast :arg1 ( disappoint :arg1 i :arg1 ( and :op1 ( strength :mod true )  :op1 ( delicious :degree amaze )  :op2 ( cheap :degree amaze )  :op2 ( special :arg1-of lunch )  )  )
enjoy :degree ( more :mod much :compared-to ( food :mod usual :mod bar )  )  :location there :arg1 menu :arg1 ( sample :arg1 ( beer :quant one :arg1-of craft )  )
enjoy :degree ( more :mod much :compared-to ( food :mod usual :mod bar )  )  :location there :arg1 menu :arg1 ( sample :arg1 ( beer :quant one :arg1-of craft )  )
enjoy :degree ( more :mod much :compared-to ( food :mod usual :mod bar )  )  :location there :arg1 menu :arg1 ( sample :arg1 ( beer :quant one :arg1-of craft )  )
drink :polarity - :arg1-of free
cause :arg0 this :arg1 ( write :arg1 ( review :arg1 restaurant )  )  :arg0 ( excellent :arg1 ( and :op1 food :op2 service )  )
cause :arg0 this :arg1 ( write :arg1 ( review :arg1 restaurant )  )  :arg0 ( excellent :arg1 ( and :op1 food :op2 service )  )
cause :arg0 ( keep :arg4 minimum )  :arg0 they :arg1 ( cash :quant some :arg1 bagel )  :arg0 ( they :mod ( good :degree most :location city )  )
cause :arg0 ( keep :arg4 minimum )  :arg0 they :arg1 ( cash :quant some :arg1 bagel )  :arg0 ( they :mod ( good :degree most :location city )  )
leave :arg0 ( chef :quant 2 :mod star )  :purpose ( open :arg0 chef )  :time ( before :quant ( time :quant ( some :degree quite )  )  )
waste :arg1 ( money :arg0-of don )  :location decor
possible :null_edge they :mod also :arg1 ( garden :mod back :arg1-of ( open :arg3 ( and :op2 cute )  :time ( date-entity :season summer )  :arg1 ( country :name ( name :null_edge ( seating :null_edge france :location outdoor )  )  )  )  )  :arg1 ( ask :degree more :arg0 you )
possible :null_edge they :mod also :arg1 ( garden :mod back :arg1-of ( open :arg3 ( and :op2 cute )  :time ( date-entity :season summer )  :arg1 ( country :name ( name :null_edge ( seating :null_edge france :location outdoor )  )  )  )  )  :arg1 ( ask :degree more :arg0 you )
eat :arg0 i :time before :arg1 ( piece :quant 40 :part-of ( nigirus :mod ( good :degree relative )  )  )
have :arg1 ( architecture :mod incredible :arg1-of ( surround :arg1 it )  )  :arg0 ( place :mod this )  :arg1 ( character :polarity - )
have :arg1 ( architecture :mod incredible :arg1-of ( surround :arg1 it )  )  :arg0 ( place :mod this )  :arg1 ( character :polarity - )
call :arg0 i :arg2 ( dinner :mod ( country :name ( name :op1 italian )  )  )
and :op1 ( unique :domain ( hangout :mod hotspot )  :domain drink )  :op2 ( pack :arg1 ( bang :quant lot )  :purpose buck )
and :op1 ( unique :domain ( hangout :mod hotspot )  :domain drink )  :op2 ( pack :arg1 ( bang :quant lot )  :purpose buck )
and :op1 ( frequent :arg1 ( ino :duration ( several :op1 ( temporal-quantity :unit year )  )  )  )  :op2 ( remain :arg1 food :arg3 excellent )
delicate :domain eggplant :degree so :domain ( tender :arg1-of sweet )
and :op1 ( delicious :arg1 ( bite :mod each :arg1 food )  :mod indeed )  :op2 ( fresh :domain bite )  :op2 ( elegant :domain bite )
excellent :arg1 ( food :quant all )  :null_edge ( mediocre :condition ( consider :arg1 ( quality :poss food )  :location ( restaurant :arg1-of ( price :manner ( moderate :degree most )  )  )  )  :arg1 ( and :op1 ( pricey :domain this :degree slight :degree more )  :op2 worth )  )
excellent :arg1 ( food :quant all )  :null_edge ( mediocre :condition ( consider :arg1 ( quality :poss food )  :location ( restaurant :arg1-of ( price :manner ( moderate :degree most )  )  )  )  :arg1 ( and :op1 ( pricey :domain this :degree slight :degree more )  :op2 worth )  )
excellent :arg1 ( food :quant all )  :null_edge ( mediocre :condition ( consider :arg1 ( quality :poss food )  :location ( restaurant :arg1-of ( price :manner ( moderate :degree most )  )  )  )  :arg1 ( and :op1 ( pricey :domain this :degree slight :degree more )  :op2 worth )  )
get :arg1 ( pizza :mod mushroom :arg1-of ( taste :arg2 good )  )  :arg0 ( person :arg0-of ( have-rel-role :arg2 friend )  )
have :arg0 i :arg1 ( product :name ( name :op1 cod )  )  :null_edge paellum :arg1 ( and :op2 spicy :op2 ( fill :degree very )  )  :null_edge ( and :op1 ( m :arg1 ( eater :mod big )  )  :op2 ( possible :arg1 ( eat :mod only )  )  )  :null_edge ( have :arg0 i :arg1 ( and :op1 ( fish :mod classic :mod ( big :mod again :arg0-of ( serve :arg1 ( and :op1 ( fish :mod ( piece :quant 5 :mod ( fries :mod basketful )  )  )  )  )  )  )  :op2 chip )  :arg1 ( person :arg0-of ( have-rel-role :arg2 boyfriend )  )  )
have :arg0 i :arg1 ( product :name ( name :op1 cod )  )  :null_edge paellum :arg1 ( and :op2 spicy :op2 ( fill :degree very )  )  :null_edge ( and :op1 ( m :arg1 ( eater :mod big )  )  :op2 ( possible :arg1 ( eat :mod only )  )  )  :null_edge ( have :arg0 i :arg1 ( and :op1 ( fish :mod classic :mod ( big :mod again :arg0-of ( serve :arg1 ( and :op1 ( fish :mod ( piece :quant 5 :mod ( fries :mod basketful )  )  )  )  )  )  )  :op2 chip )  :arg1 ( person :arg0-of ( have-rel-role :arg2 boyfriend )  )  )
have :arg0 i :arg1 ( product :name ( name :op1 cod )  )  :null_edge paellum :arg1 ( and :op2 spicy :op2 ( fill :degree very )  )  :null_edge ( and :op1 ( m :arg1 ( eater :mod big )  )  :op2 ( possible :arg1 ( eat :mod only )  )  )  :null_edge ( have :arg0 i :arg1 ( and :op1 ( fish :mod classic :mod ( big :mod again :arg0-of ( serve :arg1 ( and :op1 ( fish :mod ( piece :quant 5 :mod ( fries :mod basketful )  )  )  )  )  )  )  :op2 chip )  :arg1 ( person :arg0-of ( have-rel-role :arg2 boyfriend )  )  )
have :arg0 i :arg1 ( product :name ( name :op1 cod )  )  :null_edge paellum :arg1 ( and :op2 spicy :op2 ( fill :degree very )  )  :null_edge ( and :op1 ( m :arg1 ( eater :mod big )  )  :op2 ( possible :arg1 ( eat :mod only )  )  )  :null_edge ( have :arg0 i :arg1 ( and :op1 ( fish :mod classic :mod ( big :mod again :arg0-of ( serve :arg1 ( and :op1 ( fish :mod ( piece :quant 5 :mod ( fries :mod basketful )  )  )  )  )  )  )  :op2 chip )  :arg1 ( person :arg0-of ( have-rel-role :arg2 boyfriend )  )  )
have :arg0 i :arg1 ( product :name ( name :op1 cod )  )  :null_edge paellum :arg1 ( and :op2 spicy :op2 ( fill :degree very )  )  :null_edge ( and :op1 ( m :arg1 ( eater :mod big )  )  :op2 ( possible :arg1 ( eat :mod only )  )  )  :null_edge ( have :arg0 i :arg1 ( and :op1 ( fish :mod classic :mod ( big :mod again :arg0-of ( serve :arg1 ( and :op1 ( fish :mod ( piece :quant 5 :mod ( fries :mod basketful )  )  )  )  )  )  )  :op2 chip )  :arg1 ( person :arg0-of ( have-rel-role :arg2 boyfriend )  )  )
shame :domain ( possible :arg1 ( ruin :arg1 ( place :arg1-of nice :mod convenient :location-of ( pony :mod pink )  )  :degree so :arg0 ( serve :arg1-of lousy )  )  )
shame :domain ( possible :arg1 ( ruin :arg1 ( place :arg1-of nice :mod convenient :location-of ( pony :mod pink )  )  :degree so :arg0 ( serve :arg1-of lousy )  )  )
recommend :arg1 ( pass :arg0 you :medium calamarus )
tasteless :domain ( special :mod ( mushroom :name porcinus )  :arg1 pasta )  :null_edge ( tagliatelle :domain special :mod seafood )
tasteless :domain ( special :mod ( mushroom :name porcinus )  :arg1 pasta )  :null_edge ( tagliatelle :domain special :mod seafood )
try :arg1 ( and :op1 ( wonton :mod spicy )  :op2 ( shrimp :mod ( pepper :mod salt )  )  )
try :arg1 ( and :op1 ( wonton :mod spicy )  :op2 ( shrimp :mod ( pepper :mod salt )  )  )
large :domain ( portion :mod food )  :degree really
yummy :domain fries
staff :arg1 ( and :op2 ( and :op1 friendly :op2 informative )  :op1 ( attentive :degree very )  :op2 ( service :manner prompt :mod raw :mod bar )  )
staff :arg1 ( and :op2 ( and :op1 friendly :op2 informative )  :op1 ( attentive :degree very )  :op2 ( service :manner prompt :mod raw :mod bar )  )
food :mod ( good :degree most )  :mod ( country :name ( name :op1 taiwanese )  )  :arg1-of ny
stop :domain ( place :mod this )  :mod great :arg1 ( food :mod great )
and :op1 ( fantastic :domain ( pasta :quant all )  )  :op2 ( some :location ( city :mod ( good :degree most :domain ( lasagna :arg1-of ( make :location home )  )  )  :domain i )  )
and :op1 ( fantastic :domain ( pasta :quant all )  )  :op2 ( some :location ( city :mod ( good :degree most :domain ( lasagna :arg1-of ( make :location home )  )  )  :domain i )  )
laugh :arg0 we :arg1 ( and :op1 ( offer :arg0 he :time final :arg1 ( menu :mod dessert )  )  :op2 ( leave :arg0 he :arg0 we :arg1 ( tip :mod ( percentage-entity :value 10 )  :arg2-of generous )  )  :op1 feel )
laugh :arg0 we :arg1 ( and :op1 ( offer :arg0 he :time final :arg1 ( menu :mod dessert )  )  :op2 ( leave :arg0 he :arg0 we :arg1 ( tip :mod ( percentage-entity :value 10 )  :arg2-of generous )  )  :op1 feel )
and :op2 price :mod way :op1 high :op1 ( get :arg0 you )
and :op1 ( ignore :arg0 ( person :arg2-of staff )  :arg0 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  :op2 ( time :mod entire :null_edge we )
recommend :arg1 ( pair :time yet :arg1 ( serve :mod ( rude :mod such )  )  )  :arg1 ( anyone :arg1-of ( interest :arg2 ( carry :arg1 ( converse :mod ( kind :mod any )  )  :duration ( while :op1 there )  )  )  )
and :op1 ( have :arg1 ( taste :mod outrageously :mod good :consist-of music )  :arg1 ( and :arg1 ( lady :mod house )  :op1 ( night :mod ( event :name ( name :op1 saturday )  )  )  )  )  :op2 ( take :arg1 request )
and :op1 ( have :arg1 ( taste :mod outrageously :mod good :consist-of music )  :arg1 ( and :arg1 ( lady :mod house )  :op1 ( night :mod ( event :name ( name :op1 saturday )  )  )  )  )  :op2 ( take :arg1 request )
and :op1 ( need :arg0 i :arg1 ( roll :quant 3 )  :mod full :null_edge 14 )
00
price :arg0 ( list :mod great :arg2 wine )  :manner reasonable
music :name ( name :op1 sara )
price :arg0 ( list :mod great :arg2 wine )  :manner reasonable
music :name ( name :op1 sara )
and :op1 ( cold :domain ( dog :arg1-of hot )  :location middle )  :op2 ( stale :domain bun )
and :op1 ( cold :domain ( dog :arg1-of hot )  :location middle )  :op2 ( stale :domain bun )
wasn :arg1-of ( excellent :arg1 food )  :null_edge ( cheap :mod ( expensive :degree extreme :mod either )  )
good :domain ( soup :mod ( noodle :mod beef )  )
great :domain ( service :mod deliver )  :degree too
overwhelm :arg0 ( flavor :poss food :mod dazzle )  :arg1 palate :arg1 ( embrace :arg1 ( beauty :arg1 ( cuisine :mod authentic :mod thai )  )  )
overwhelm :arg0 ( flavor :poss food :mod dazzle )  :arg1 palate :arg1 ( embrace :arg1 ( beauty :arg1 ( cuisine :mod authentic :mod thai )  )  )
overwhelm :arg0 ( flavor :poss food :mod dazzle )  :arg1 palate :arg1 ( embrace :arg1 ( beauty :arg1 ( cuisine :mod authentic :mod thai )  )  )
recieve :arg0 i :arg1 ( service :manner prompt )  :manner smile
pray :arg0 they :arg2 ( person :name ( name :op1 gods )  :mod food )  :arg1 ( make :arg2 ( pizza :mod good )  )
and :op1 ( quiet :domain place )  :op2 ( delight :domain place )
diamond :domain food :arg1-of rough :null_edge ( and :op1 ( delicious :domain food :domain ( balance :arg1-of perfect :arg1 ( and :op1 herb :op2 tomato )  )  :domain ( make :arg1 home )  )  )
diamond :domain food :arg1-of rough :null_edge ( and :op1 ( delicious :domain food :domain ( balance :arg1-of perfect :arg1 ( and :op1 herb :op2 tomato )  )  :domain ( make :arg1 home )  )  )
diamond :domain food :arg1-of rough :null_edge ( and :op1 ( delicious :domain food :domain ( balance :arg1-of perfect :arg1 ( and :op1 herb :op2 tomato )  )  :domain ( make :arg1 home )  )  )
diamond :domain food :arg1-of rough :null_edge ( and :op1 ( delicious :domain food :domain ( balance :arg1-of perfect :arg1 ( and :op1 herb :op2 tomato )  )  :domain ( make :arg1 home )  )  )
possible :arg1 ( like :arg1 food )  :arg1 ( bring :arg0 i :arg2 ( go :direction back )  )
look :null_edge ( do :arg1 ( cheese-off :arg1-of shredded :mod ( strip :time still )  )  :manner part )
great :degree especially :condition ( consider :arg2 ( s :location ( village :location west )  )  )  :arg1-of ( cause :arg0 ( and :op1 price :op2 ambience )  )
great :degree especially :condition ( consider :arg2 ( s :location ( village :location west )  )  )  :arg1-of ( cause :arg0 ( and :op1 price :op2 ambience )  )
good :domain soup :degree pretty :degree too
easy :degree so :arg1 ( get :arg1 reserve :arg2 ( place :mod top )  :null_edge nyc :arg2 ( notice :time week )  )
and :op1 ( enjoy :arg0 i :manner good :arg1 ( or :op1 ( vegetable :mod humble :mod root )  :op2 ( consomme :mod mushroom )  )  )  :op2 ( accomplish :arg0 i :arg0 ( chef :mod this )  :prep-without fat )
and :op1 ( enjoy :arg0 i :manner good :arg1 ( or :op1 ( vegetable :mod humble :mod root )  :op2 ( consomme :mod mushroom )  )  )  :op2 ( accomplish :arg0 i :arg0 ( chef :mod this )  :prep-without fat )
and :op1 ( enjoy :arg0 i :manner good :arg1 ( or :op1 ( vegetable :mod humble :mod root )  :op2 ( consomme :mod mushroom )  )  )  :op2 ( accomplish :arg0 i :arg0 ( chef :mod this )  :prep-without fat )
great :condition ( go :arg0 you :arg4 roth :time ( person :arg0-of try :arg1 serve :arg0 mike )  )  :domain he
xconcept
multi-sentence :op2 ( food :arg1-of ( agree :arg1 ( review :time previous :arg1 ( and :op1 ( wait :arg1 you )  :op2 ( wait :arg1 you )  )  )  :arg1 ( and :op1 ( rude :domain ( wait :arg1 ( person :arg2-of staff )  )  :degree very :domain ( get :arg0 you :condition ( look :arg1 ( get :arg1 you :arg2 ( out :mod right )  )  )  )  )  )  )  )
multi-sentence :op2 ( food :arg1-of ( agree :arg1 ( review :time previous :arg1 ( and :op1 ( wait :arg1 you )  :op2 ( wait :arg1 you )  )  )  :arg1 ( and :op1 ( rude :domain ( wait :arg1 ( person :arg2-of staff )  )  :degree very :domain ( get :arg0 you :condition ( look :arg1 ( get :arg1 you :arg2 ( out :mod right )  )  )  )  )  )  )  )
multi-sentence :op2 ( food :arg1-of ( agree :arg1 ( review :time previous :arg1 ( and :op1 ( wait :arg1 you )  :op2 ( wait :arg1 you )  )  )  :arg1 ( and :op1 ( rude :domain ( wait :arg1 ( person :arg2-of staff )  )  :degree very :domain ( get :arg0 you :condition ( look :arg1 ( get :arg1 you :arg2 ( out :mod right )  )  )  )  )  )  )  )
multi-sentence :op2 ( food :arg1-of ( agree :arg1 ( review :time previous :arg1 ( and :op1 ( wait :arg1 you )  :op2 ( wait :arg1 you )  )  )  :arg1 ( and :op1 ( rude :domain ( wait :arg1 ( person :arg2-of staff )  )  :degree very :domain ( get :arg0 you :condition ( look :arg1 ( get :arg1 you :arg2 ( out :mod right )  )  )  )  )  )  )  )
and :op1 ( get :arg0 i :time always :arg1 ( shabu :mod ( dinner :mod shabu )  )  )  :op2 ( fresh :arg1 beef :time always )
and :op1 ( get :arg0 i :time always :arg1 ( shabu :mod ( dinner :mod shabu )  )  )  :op2 ( fresh :arg1 beef :time always )
and :op1 ( deliver :arg1 pizza :arg2 cold )  :op2 ( melt :arg1 pizza :arg1 ( t :arg1 cheese-off )  :mod even :degree full )
and :op1 ( deliver :arg1 pizza :arg2 cold )  :op2 ( melt :arg1 pizza :arg1 ( t :arg1 cheese-off )  :mod even :degree full )
surprise :arg1 we :degree very :arg2 good :arg1 ( food :topic-of ( visit :location here :time ( night :mod ( event :name ( name :op1 sunday )  )  )  )  )
notorious :arg2 ( and :op1 ( trang :mod nha )  :op1 ( lack :arg1-of utter :arg1 ( and :op1 comfort :op2 decor )  :arg1 ( wait :manner ( slow :mod horribly )  :arg1 ( person :arg2-of staff )  )  )  :op2 ( meal :arg1-of horribly :arg1-of quick )  )  :arg2 ( restaurant :mod ( good :degree most )  :mod ( country :name ( name :op1 vietnamese )  )  :time ever )
and :op1 ( delicious :domain pho )  :op2 ( come :arg1 pho :accompanier ( vegtable :arg1-of ( fresh :degree very )  )  )
notorious :arg2 ( and :op1 ( trang :mod nha )  :op1 ( lack :arg1-of utter :arg1 ( and :op1 comfort :op2 decor )  :arg1 ( wait :manner ( slow :mod horribly )  :arg1 ( person :arg2-of staff )  )  )  :op2 ( meal :arg1-of horribly :arg1-of quick )  )  :arg2 ( restaurant :mod ( good :degree most )  :mod ( country :name ( name :op1 vietnamese )  )  :time ever )
and :op1 ( delicious :domain pho )  :op2 ( come :arg1 pho :accompanier ( vegtable :arg1-of ( fresh :degree very )  )  )
notorious :arg2 ( and :op1 ( trang :mod nha )  :op1 ( lack :arg1-of utter :arg1 ( and :op1 comfort :op2 decor )  :arg1 ( wait :manner ( slow :mod horribly )  :arg1 ( person :arg2-of staff )  )  )  :op2 ( meal :arg1-of horribly :arg1-of quick )  )  :arg2 ( restaurant :mod ( good :degree most )  :mod ( country :name ( name :op1 vietnamese )  )  :time ever )
and :op1 ( delicious :domain pho )  :op2 ( come :arg1 pho :accompanier ( vegtable :arg1-of ( fresh :degree very )  )  )
notorious :arg2 ( and :op1 ( trang :mod nha )  :op1 ( lack :arg1-of utter :arg1 ( and :op1 comfort :op2 decor )  :arg1 ( wait :manner ( slow :mod horribly )  :arg1 ( person :arg2-of staff )  )  )  :op2 ( meal :arg1-of horribly :arg1-of quick )  )  :arg2 ( restaurant :mod ( good :degree most )  :mod ( country :name ( name :op1 vietnamese )  )  :time ever )
and :op1 ( delicious :domain pho )  :op2 ( come :arg1 pho :accompanier ( vegtable :arg1-of ( fresh :degree very )  )  )
notorious :arg2 ( and :op1 ( trang :mod nha )  :op1 ( lack :arg1-of utter :arg1 ( and :op1 comfort :op2 decor )  :arg1 ( wait :manner ( slow :mod horribly )  :arg1 ( person :arg2-of staff )  )  )  :op2 ( meal :arg1-of horribly :arg1-of quick )  )  :arg2 ( restaurant :mod ( good :degree most )  :mod ( country :name ( name :op1 vietnamese )  )  :time ever )
and :op1 ( delicious :domain pho )  :op2 ( come :arg1 pho :accompanier ( vegtable :arg1-of ( fresh :degree very )  )  )
notorious :arg2 ( and :op1 ( trang :mod nha )  :op1 ( lack :arg1-of utter :arg1 ( and :op1 comfort :op2 decor )  :arg1 ( wait :manner ( slow :mod horribly )  :arg1 ( person :arg2-of staff )  )  )  :op2 ( meal :arg1-of horribly :arg1-of quick )  )  :arg2 ( restaurant :mod ( good :degree most )  :mod ( country :name ( name :op1 vietnamese )  )  :time ever )
and :op1 ( delicious :domain pho )  :op2 ( come :arg1 pho :accompanier ( vegtable :arg1-of ( fresh :degree very )  )  )
find :condition fool :arg0 you :location ( restaurant :arg1 ( and :op1 service :op2 ambiance :op2 ( par :null_edge ( ducasse :mod alain )  )  :op2 ( food :arg0-of ( outshine :arg1 and :arg1 ( and :op1 presentaion :op2 ( quality :mod taste )  :op2 quantity )  )  )  )  )
find :condition fool :arg0 you :location ( restaurant :arg1 ( and :op1 service :op2 ambiance :op2 ( par :null_edge ( ducasse :mod alain )  )  :op2 ( food :arg0-of ( outshine :arg1 and :arg1 ( and :op1 presentaion :op2 ( quality :mod taste )  :op2 quantity )  )  )  )  )
find :condition fool :arg0 you :location ( restaurant :arg1 ( and :op1 service :op2 ambiance :op2 ( par :null_edge ( ducasse :mod alain )  )  :op2 ( food :arg0-of ( outshine :arg1 and :arg1 ( and :op1 presentaion :op2 ( quality :mod taste )  :op2 quantity )  )  )  )  )
find :condition fool :arg0 you :location ( restaurant :arg1 ( and :op1 service :op2 ambiance :op2 ( par :null_edge ( ducasse :mod alain )  )  :op2 ( food :arg0-of ( outshine :arg1 and :arg1 ( and :op1 presentaion :op2 ( quality :mod taste )  :op2 quantity )  )  )  )  )
find :condition fool :arg0 you :location ( restaurant :arg1 ( and :op1 service :op2 ambiance :op2 ( par :null_edge ( ducasse :mod alain )  )  :op2 ( food :arg0-of ( outshine :arg1 and :arg1 ( and :op1 presentaion :op2 ( quality :mod taste )  :op2 quantity )  )  )  )  )
find :condition fool :arg0 you :location ( restaurant :arg1 ( and :op1 service :op2 ambiance :op2 ( par :null_edge ( ducasse :mod alain )  )  :op2 ( food :arg0-of ( outshine :arg1 and :arg1 ( and :op1 presentaion :op2 ( quality :mod taste )  :op2 quantity )  )  )  )  )
find :condition fool :arg0 you :location ( restaurant :arg1 ( and :op1 service :op2 ambiance :op2 ( par :null_edge ( ducasse :mod alain )  )  :op2 ( food :arg0-of ( outshine :arg1 and :arg1 ( and :op1 presentaion :op2 ( quality :mod taste )  :op2 quantity )  )  )  )  )
find :condition fool :arg0 you :location ( restaurant :arg1 ( and :op1 service :op2 ambiance :op2 ( par :null_edge ( ducasse :mod alain )  )  :op2 ( food :arg0-of ( outshine :arg1 and :arg1 ( and :op1 presentaion :op2 ( quality :mod taste )  :op2 quantity )  )  )  )  )
and :op1 ( live :arg0 i :location neighborhood )  :op2 ( meet :arg0 i :location here :concession ( promise :mod ( only :mod ( also :beneficiary ( scene :mod bar :arg1-of contrast )  )  )  :arg2 ( place :mod pizza :time date-entity )  )  :arg1 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )
possible :arg1 ( rate :arg1 ( good :degree most :domain ( place :mod this :arg1-of chart )  :mod ( pizza :arg1-of sorry )  :location nyc )  )
possible :arg1 ( rate :arg1 ( good :degree most :domain ( place :mod this :arg1-of chart )  :mod ( pizza :arg1-of sorry )  :location nyc )  )
amaze :arg0 food
xconcept
xconcept
xconcept
contrast :arg2 home :arg2 ( skew :time ( date-entity :mod last )  :degree bit )  :arg1 ( reviewer :mod this )  :arg2 ( and :op1 ( tasty :domain food )  :op2 spicy :op1 ( san :null_edge possible :arg1 ( oil :arg1-of ( float :arg1-of come :location ( venue :arg1-of ( resemble :op similar )  )  )  )  )  )
contrast :arg2 home :arg2 ( skew :time ( date-entity :mod last )  :degree bit )  :arg1 ( reviewer :mod this )  :arg2 ( and :op1 ( tasty :domain food )  :op2 spicy :op1 ( san :null_edge possible :arg1 ( oil :arg1-of ( float :arg1-of come :location ( venue :arg1-of ( resemble :op similar )  )  )  )  )  )
seem :arg1 ( frantic :arg1 ( small :domain portion :time now :degree very :null_edge ( ambitious :domain sauce :degree over :degree ( inedible :mod usual :mod ( good :domain service :mod still )  )  )  )  :domain ( restaurant :arg1-of popularity )  )
seem :arg1 ( frantic :arg1 ( small :domain portion :time now :degree very :null_edge ( ambitious :domain sauce :degree over :degree ( inedible :mod usual :mod ( good :domain service :mod still )  )  )  )  :domain ( restaurant :arg1-of popularity )  )
seem :arg1 ( frantic :arg1 ( small :domain portion :time now :degree very :null_edge ( ambitious :domain sauce :degree over :degree ( inedible :mod usual :mod ( good :domain service :mod still )  )  )  )  :domain ( restaurant :arg1-of popularity )  )
possible :arg1 ( eat :purpose ( thing :arg2-of price )  :arg0 you :arg1 ( well :mod this )  :location manhattan )
ll :domain ( go :arg1 ( guy :mod ( friendly :arg1 ( person :arg0-of own )  :degree very )  :mod great )  :arg1 ( try :arg1 pizza )  :arg0 you )  :domain you
ll :domain ( go :arg1 ( guy :mod ( friendly :arg1 ( person :arg0-of own )  :degree very )  :mod great )  :arg1 ( try :arg1 pizza )  :arg0 you )  :domain you
great :domain atmosphere
xconcept
xconcept
need :prep-with ( restaurant :quant ( many :degree so )  :mod good :null_edge uw )  :arg0 i :arg0 ( t :null_edge don )  :arg1 ( and :op1 ( food :arg1-of overpriced :arg1-of ( arrogant :degree absurd )  :arg1-of ( recognize :arg0 ( t :null_edge ( don :arg2 ( person :arg2-of staff )  )  )  :arg1 work :arg1 ( diner :arg1-of glorify )  )  )  :op2 ( service :manner clumsy )  :op2 ( manage :arg1 ( care :arg1 doesn )  )  )
need :prep-with ( restaurant :quant ( many :degree so )  :mod good :null_edge uw )  :arg0 i :arg0 ( t :null_edge don )  :arg1 ( and :op1 ( food :arg1-of overpriced :arg1-of ( arrogant :degree absurd )  :arg1-of ( recognize :arg0 ( t :null_edge ( don :arg2 ( person :arg2-of staff )  )  )  :arg1 work :arg1 ( diner :arg1-of glorify )  )  )  :op2 ( service :manner clumsy )  :op2 ( manage :arg1 ( care :arg1 doesn )  )  )
need :prep-with ( restaurant :quant ( many :degree so )  :mod good :null_edge uw )  :arg0 i :arg0 ( t :null_edge don )  :arg1 ( and :op1 ( food :arg1-of overpriced :arg1-of ( arrogant :degree absurd )  :arg1-of ( recognize :arg0 ( t :null_edge ( don :arg2 ( person :arg2-of staff )  )  )  :arg1 work :arg1 ( diner :arg1-of glorify )  )  )  :op2 ( service :manner clumsy )  :op2 ( manage :arg1 ( care :arg1 doesn )  )  )
need :prep-with ( restaurant :quant ( many :degree so )  :mod good :null_edge uw )  :arg0 i :arg0 ( t :null_edge don )  :arg1 ( and :op1 ( food :arg1-of overpriced :arg1-of ( arrogant :degree absurd )  :arg1-of ( recognize :arg0 ( t :null_edge ( don :arg2 ( person :arg2-of staff )  )  )  :arg1 work :arg1 ( diner :arg1-of glorify )  )  )  :op2 ( service :manner clumsy )  :op2 ( manage :arg1 ( care :arg1 doesn )  )  )
need :prep-with ( restaurant :quant ( many :degree so )  :mod good :null_edge uw )  :arg0 i :arg0 ( t :null_edge don )  :arg1 ( and :op1 ( food :arg1-of overpriced :arg1-of ( arrogant :degree absurd )  :arg1-of ( recognize :arg0 ( t :null_edge ( don :arg2 ( person :arg2-of staff )  )  )  :arg1 work :arg1 ( diner :arg1-of glorify )  )  )  :op2 ( service :manner clumsy )  :op2 ( manage :arg1 ( care :arg1 doesn )  )  )
tend :arg0 i :arg1 ( judge :arg0 i :arg1 ( restaurant :mod sushi )  :null_edge ( urchin :mod sea :null_edge ( heavenly :arg1-of ( rise :mod sushi )  )  )  )
contrast :arg1 ( service :mod ( scatty :mod little )  :arg1-of ( forgive :time ( arrive :arg1 ( food :quant all )  )  )  )
contrast :arg1 ( service :mod ( scatty :mod little )  :arg1-of ( forgive :time ( arrive :arg1 ( food :quant all )  )  )  )
include :arg1 ( contrast :arg1 ( soggy :domain bruscetta :degree bit )  :arg2 ( fresh :arg1 salad )  )  :arg1 ( mix :arg1-of nice :consist-of ( person :name ( name :op1 greens )  :arg1-of ( serve :arg1 ( dish :quant all )  :arg1 ( piping :arg1-of hot )  :arg2 kitchen )  )  )
include :arg1 ( contrast :arg1 ( soggy :domain bruscetta :degree bit )  :arg2 ( fresh :arg1 salad )  )  :arg1 ( mix :arg1-of nice :consist-of ( person :name ( name :op1 greens )  :arg1-of ( serve :arg1 ( dish :quant all )  :arg1 ( piping :arg1-of hot )  :arg2 kitchen )  )  )
include :arg1 ( contrast :arg1 ( soggy :domain bruscetta :degree bit )  :arg2 ( fresh :arg1 salad )  )  :arg1 ( mix :arg1-of nice :consist-of ( person :name ( name :op1 greens )  :arg1-of ( serve :arg1 ( dish :quant all )  :arg1 ( piping :arg1-of hot )  :arg2 kitchen )  )  )
include :arg1 ( contrast :arg1 ( soggy :domain bruscetta :degree bit )  :arg2 ( fresh :arg1 salad )  )  :arg1 ( mix :arg1-of nice :consist-of ( person :name ( name :op1 greens )  :arg1-of ( serve :arg1 ( dish :quant all )  :arg1 ( piping :arg1-of hot )  :arg2 kitchen )  )  )
include :arg1 ( contrast :arg1 ( soggy :domain bruscetta :degree bit )  :arg2 ( fresh :arg1 salad )  )  :arg1 ( mix :arg1-of nice :consist-of ( person :name ( name :op1 greens )  :arg1-of ( serve :arg1 ( dish :quant all )  :arg1 ( piping :arg1-of hot )  :arg2 kitchen )  )  )
include :arg1 ( contrast :arg1 ( soggy :domain bruscetta :degree bit )  :arg2 ( fresh :arg1 salad )  )  :arg1 ( mix :arg1-of nice :consist-of ( person :name ( name :op1 greens )  :arg1-of ( serve :arg1 ( dish :quant all )  :arg1 ( piping :arg1-of hot )  :arg2 kitchen )  )  )
contrast :arg1 ( great :degree most :mod atmosphere )  :arg2 ( suppose :arg1 ( s :arg1 ( keep :arg1 price )  )  )
contrast :arg1 ( great :degree most :mod atmosphere )  :arg2 ( suppose :arg1 ( s :arg1 ( keep :arg1 price )  )  )
addition :domain pickle :mod great
place :condition ( chicken :domain ( food :arg1-of favor :mod ( country :name ( name :op1 chinese )  )  )  :mod general :mod tao )  :domain ( this :time then )
place :condition ( chicken :domain ( food :arg1-of favor :mod ( country :name ( name :op1 chinese )  )  )  :mod general :mod tao )  :domain ( this :time then )
try :arg0 you :arg1 ( appetizer :mod shrimp )
and :op1 ( attentive :arg1 ( cuisine :mod only :mod ( good :degree most :location around )  )  :domain service :time always )  :op2 ( charm :domain cuisine )
and :op1 ( attentive :arg1 ( cuisine :mod only :mod ( good :degree most :location around )  )  :domain service :time always )  :op2 ( charm :domain cuisine )
fun :domain produce :mod symphony :arg0-of ( experience :arg0 symphony )
sublime :arg0 ( food :prep-for ( part :quant most )  )
tend :arg1 waiter :arg2 ( forget :arg0 waiter :arg1 drink :arg1-of complete )  :arg1 ( tiny :domain ( portion :mod food )  )  :null_edge ( have :quant 2 :arg1 ( trouble :arg0 ( share :arg1 ( entree :quant 1 )  )  )  )
tend :arg1 waiter :arg2 ( forget :arg0 waiter :arg1 drink :arg1-of complete )  :arg1 ( tiny :domain ( portion :mod food )  )  :null_edge ( have :quant 2 :arg1 ( trouble :arg0 ( share :arg1 ( entree :quant 1 )  )  )  )
tend :arg1 waiter :arg2 ( forget :arg0 waiter :arg1 drink :arg1-of complete )  :arg1 ( tiny :domain ( portion :mod food )  )  :null_edge ( have :quant 2 :arg1 ( trouble :arg0 ( share :arg1 ( entree :quant 1 )  )  )  )
tend :arg1 waiter :arg2 ( forget :arg0 waiter :arg1 drink :arg1-of complete )  :arg1 ( tiny :domain ( portion :mod food )  )  :null_edge ( have :quant 2 :arg1 ( trouble :arg0 ( share :arg1 ( entree :quant 1 )  )  )  )
taste :arg0 ( dish :mod cold :mod appetizer )  :arg1-of ( resemble :arg2 ( way :manner-of ( remember :arg1 ( taste :time ( grow :location taiwan )  )  )  )  )
pack :arg2 restaurant :manner ( wait :arg1 restaurant :arg1 we :duration ( temporal-quantity :unit minute :null_edge ( about :op1 bar :null_edge 20 )  )  :time ( before :op1 ( seat :arg1 we )  )  )
select :mod interesting :arg1 ( and :op3 ( wine :mod good )  :arg1 ( fine :arg1 service )  :arg2 fun )
select :mod interesting :arg1 ( and :op3 ( wine :mod good )  :arg1 ( fine :arg1 service )  :arg2 fun )
select :mod interesting :arg1 ( and :op3 ( wine :mod good )  :arg1 ( fine :arg1 service )  :arg2 fun )
wait :mod any :null_edge ( have :arg0 you :arg1 reserve )  :arg1 you :arg2 ll :duration ( temporal-quantity :unit minute :quant 5 )  :arg2 ( bar :arg1 drink )
wait :mod any :null_edge ( have :arg0 you :arg1 reserve )  :arg1 you :arg2 ll :duration ( temporal-quantity :unit minute :quant 5 )  :arg2 ( bar :arg1 drink )
wait :mod any :null_edge ( have :arg0 you :arg1 reserve )  :arg1 you :arg2 ll :duration ( temporal-quantity :unit minute :quant 5 )  :arg2 ( bar :arg1 drink )
transport :condition ( or :op1 souffle :op2 ( lamb :arg1-of ( glaze :arg2 ( vinegar :mod balsamic )  )  )  )  :arg1 you :arg1-of sure :arg4 ( country :name ( name :op1 italy )  :null_edge null_tag )  :instrument ( bite :quant 1 )
transport :condition ( or :op1 souffle :op2 ( lamb :arg1-of ( glaze :arg2 ( vinegar :mod balsamic )  )  )  )  :arg1 you :arg1-of sure :arg4 ( country :name ( name :op1 italy )  :null_edge null_tag )  :instrument ( bite :quant 1 )
cuisine :domain ( food :location ( place :mod this )  )  :mod gourmet :mod ( country :name ( name :op1 indian )  )
cuisine :domain ( food :location ( place :mod this )  )  :mod gourmet :mod ( country :name ( name :op1 indian )  )
cuisine :domain ( food :location ( place :mod this )  )  :mod gourmet :mod ( country :name ( name :op1 indian )  )
go :arg1 ( place :quant plenty )  :arg4 ( sandwich :mod good :mod corned :mod beef )  :concession-of ( charm :arg1 it )
wish :time ( look :arg1 ( table :mod next-to )  :arg0 we )  :arg0 we :mod sort-of :arg1 ( order :arg0 we :arg1 ( pizza :arg1-of ( look :arg0 have-org-role :arg1 perrrrrrrrrfect )  )  )
price :arg2 ( range :mod upper :mod intermediate )
and :op1 ( find :time ( live :arg0 you :location ( city :location new :location york )  )  :arg0 you :arg1 ll :arg1 ( food :mod good )  :location ( restaurant :mod small :location ( outside :op1 ( square :mod time )  )  )  )  :op2 ( spend :arg1 ( amount :op1 half )  )
and :op1 ( find :time ( live :arg0 you :location ( city :location new :location york )  )  :arg0 you :arg1 ll :arg1 ( food :mod good )  :location ( restaurant :mod small :location ( outside :op1 ( square :mod time )  )  )  )  :op2 ( spend :arg1 ( amount :op1 half )  )
try :arg1 ( or :op1 ( cheese-off :mod olive :mod cream )  :op2 ( spread :arg1 ( bagel :mod whole :mod ( everything :mod wheat )  )  )  )
try :arg1 ( or :op1 ( cheese-off :mod olive :mod cream )  :op2 ( spread :arg1 ( bagel :mod whole :mod ( everything :mod wheat )  )  )  )
try :arg1 ( or :op1 ( cheese-off :mod olive :mod cream )  :op2 ( spread :arg1 ( bagel :mod whole :mod ( everything :mod wheat )  )  )  )
and :op1 ( pleasant :arg1 ( disappoint :arg0 they :arg1 didn )  :domain ( service :arg1-of ( arrive :arg1 i :arg1 door )  )  :degree extreme :arg2 ( server :mod ( almost :op1 table )  )  )  :op2 attentive
and :op1 ( pleasant :arg1 ( disappoint :arg0 they :arg1 didn )  :domain ( service :arg1-of ( arrive :arg1 i :arg1 door )  )  :degree extreme :arg2 ( server :mod ( almost :op1 table )  )  )  :op2 attentive
and :op1 ( pleasant :arg1 ( disappoint :arg0 they :arg1 didn )  :domain ( service :arg1-of ( arrive :arg1 i :arg1 door )  )  :degree extreme :arg2 ( server :mod ( almost :op1 table )  )  )  :op2 attentive
contrast :arg1 ( know :arg0 i :arg0 ( t :null_edge don )  :arg1 ( think :arg0 they )  :arg1 ( respect :polarity - :arg1 ( person :arg0-of reside :arg1 ( neighborhood :time ( since :mod ever :op1 ( open :arg0 they :arg0 ( and :op1 ( door :mod cabaret :mod next :mod ( blast :arg1 ( music :mod loud )  )  )  )  :time till :time morning :time weekend :time ( date-entity :season summer )  )  )  )  )  )  )
good :domain ( rice :null_edge ( ration :arg0 fish )  )  :mod also :domain ( person :arg0-of try :arg1 ( overpack :arg1 rice )  )
good :domain ( rice :null_edge ( ration :arg0 fish )  )  :mod also :domain ( person :arg0-of try :arg1 ( overpack :arg1 rice )  )
use :arg0 they :arg1 ( cheese-off :arg1-of shredded )  :arg2 top
and :op1 ( great :domain food )  :op2 ( have :arg1 ( wine :mod ( selecion :mod good )  :arg1 ( thing :arg2-of price :arg1-of reasonable )  )  )
and :op1 ( great :domain food )  :op2 ( have :arg1 ( wine :mod ( selecion :mod good )  :arg1 ( thing :arg2-of price :arg1-of reasonable )  )  )
and :op1 ( great :domain food )  :op2 ( have :arg1 ( wine :mod ( selecion :mod good )  :arg1 ( thing :arg2-of price :arg1-of reasonable )  )  )
xconcept :x ( positive :mod only )  :x ( wait :arg1 ( staff :mod ( likeable :degree knowledgable )  )  :manner ( prompt :mod knowledgable )  )
reccommend :arg0 i :null_edge couldn :arg1 ( pizza :mod godmother :arg1-of ( high :mod any )  )
vegetarian :domain i :degree ( great :domain ( dish :quant ( all :mod almost )  )  )
impress :arg1 i :degree very :arg0 ( low :mod this :arg1 ( and :op1 ( eastsider :arg1-of key :mod upper )  :op2 ( cuisine :mod authentically )  )  )
xconcept
xconcept
reasonable :arg2 location :domain price :degree very
reasonable :arg2 location :domain price :degree very
and :op1 ( okay :arg1 food )  :op2 ( mediocre :arg1 ( price :location here )  )
and :op1 ( okay :arg1 food )  :op2 ( mediocre :arg1 ( price :location here )  )
opposite :arg1 ( food :poss ( have-rel-role :arg2 friend )  )  :mod also :arg1-of complete :arg1-of ( suppose :arg2 ( taste :arg1 ( and :op1 look )  )  )
and :op1 ( order :arg0 i :arg1 ( cocktail :mod crab )  )  :op2 ( soak :prep-in ( concoction :mod lime :arg1 juice :mod ( lime :arg1-of ( taste :arg0 you :arg1-of possible )  )  )  )
and :op1 ( order :arg0 i :arg1 ( cocktail :mod crab )  )  :op2 ( soak :prep-in ( concoction :mod lime :arg1 juice :mod ( lime :arg1-of ( taste :arg0 you :arg1-of possible )  )  )  )
and :op1 ( order :arg0 i :arg1 ( cocktail :mod crab )  )  :op2 ( soak :prep-in ( concoction :mod lime :arg1 juice :mod ( lime :arg1-of ( taste :arg0 you :arg1-of possible )  )  )  )
like :arg0 i :arg1 ( and :op1 ( return :arg1 ( item :quant some :mod other :mod menu :arg0-of don )  )  :op2 try )  :arg1 ( rush :arg0 i :arg2 show )
and :quant ( many :arg2 ( place :arg0 we :mod this )  )  :op2 ( have :arg0 we :time always :arg1 ( and :op1 ( food :mod great )  :op3 wine :op2 service )  )
and :quant ( many :arg2 ( place :arg0 we :mod this )  )  :op2 ( have :arg0 we :time always :arg1 ( and :op1 ( food :mod great )  :op3 wine :op2 service )  )
and :quant ( many :arg2 ( place :arg0 we :mod this )  )  :op2 ( have :arg0 we :time always :arg1 ( and :op1 ( food :mod great )  :op3 wine :op2 service )  )
hope :arg1 ( save :frequency ( time :mod next )  :arg0 i :arg1 ( room :purpose dessert )  )
contrast :arg1 ( joint :mod ( pizza :arg1-of typical )  )  :arg2 ( sit :manner ( good :null_edge ( and :op1 ( key :arg1-of low :arg1-of nice )  :op2 ( cheap :degree fair )  )  )  :arg1 dinner )
and :op1 ( tender :arg1 ( beef :mod corn )  )  :op2 ( melt :arg1 mouth )
have :arg1 ( pad :mod ( good :degree most )  :mod chicken :mod taus )  :arg0 i :time ever
possible :arg1 ( beat :null_edge ( eat :null_edge 20 :arg1-of possible :arg1 sushi )  )
have :arg1 ( serve :arg0 haru :arg2 ( fresh :degree very )  :arg2 fish )  :arg1 ( avenue :null_edge null_tag )  :arg1 ( and :op1 ( ambiance :mod trendy )  :op4 ( location :arg1-of modern :mod prime )  :op2 ( service :arg1-of friendly )  )
have :arg1 ( serve :arg0 haru :arg2 ( fresh :degree very )  :arg2 fish )  :arg1 ( avenue :null_edge null_tag )  :arg1 ( and :op1 ( ambiance :mod trendy )  :op4 ( location :arg1-of modern :mod prime )  :op2 ( service :arg1-of friendly )  )
have :arg1 ( serve :arg0 haru :arg2 ( fresh :degree very )  :arg2 fish )  :arg1 ( avenue :null_edge null_tag )  :arg1 ( and :op1 ( ambiance :mod trendy )  :op4 ( location :arg1-of modern :mod prime )  :op2 ( service :arg1-of friendly )  )
have :arg1 ( serve :arg0 haru :arg2 ( fresh :degree very )  :arg2 fish )  :arg1 ( avenue :null_edge null_tag )  :arg1 ( and :op1 ( ambiance :mod trendy )  :op4 ( location :arg1-of modern :mod prime )  :op2 ( service :arg1-of friendly )  )
warm :null_edge ( and :op2 friendly :op1 ( winter :mod terrific )  :op2 ( seating :location outdoor :duration ( temporal-quantity :unit month :arg1-of warm )  )  )
fire :mod ( romantic :degree very )  :null_edge ( spend :arg0 i :manner literal :arg1 ( temporal-quantity :unit hour )  :location lanterna :arg1 ( and :op1 ( drink :arg1 ( wine :source ( wine :arg1-of extensive )  )  )  :op2 ( enjoy :arg1 ambience )  )  )
fire :mod ( romantic :degree very )  :null_edge ( spend :arg0 i :manner literal :arg1 ( temporal-quantity :unit hour )  :location lanterna :arg1 ( and :op1 ( drink :arg1 ( wine :source ( wine :arg1-of extensive )  )  )  :op2 ( enjoy :arg1 ambience )  )  )
fire :mod ( romantic :degree very )  :null_edge ( spend :arg0 i :manner literal :arg1 ( temporal-quantity :unit hour )  :location lanterna :arg1 ( and :op1 ( drink :arg1 ( wine :source ( wine :arg1-of extensive )  )  )  :op2 ( enjoy :arg1 ambience )  )  )
contrast :arg1 ( get :arg0 we :arg1 ( tipsy :quant little )  )  :arg2 ( and :op1 ( night :mod ( event :name ( name :op1 saturday )  )  )  :null_edge all :arg2 ( person :arg0-of ( have-rel-role :arg2 girlfriend )  )  )
and :op1 ( want :arg0 i :mod almost :arg1 ( write :arg0 i :arg1 ( review :arg1-of bad )  )  )  :op2 ( go :arg0 i :polarity - :time ever :location here )  :op2 ( possible :arg1 ( have :arg1 ( dumpling :quant all )  )  )
contrast :arg2 ( crowd :arg1-of ( nice :time always )  )  :arg2 loud
raw :arg1 ( cook :arg1 ( burger :mod turkey )  )  :domain ( salmon :poss ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  :arg1-of complete
raw :arg1 ( cook :arg1 ( burger :mod turkey )  )  :domain ( salmon :poss ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  :arg1-of complete
and :op1 ( minimalist :domain decor :arg1 ( or :op2 nothing :op1 distract :op2 commend )  )  :op2 ( clean :arg1 decor )
and :op1 ( inventive :domain drink :degree very :null_edge ( classy :arg1 drink )  )  :op2 delicious
and :op1 ( food :mod great :arg2-of ( price :mod great )  )  :arg1 ( service :mod great )
and :op1 ( food :mod great :arg2-of ( price :mod great )  )  :arg1 ( service :mod great )
and :op1 ( food :mod great :arg2-of ( price :mod great )  )  :arg1 ( service :mod great )
t :null_edge ( isn :mod this )  :arg1 ( takeout :arg0 corner :mod ( country :name ( name :op1 chinese )  )  :mod food )
pizza :mod awsome :null_edge ( slice :mod especially )
pizza :mod awsome :null_edge ( slice :mod especially )
and :op1 ( have :arg0 ( place :mod this )  :arg1 ( pretension :degree ( less :degree lot :compared-to joya )  )  )  :op2 ( food :mod thai :mod still :location ( above :op1 average )  )
and :op1 ( have :arg0 ( place :mod this )  :arg1 ( pretension :degree ( less :degree lot :compared-to joya )  )  )  :op2 ( food :mod thai :mod still :location ( above :op1 average )  )
regret :arg1 ( try :arg1 ( order :arg2 ( menu :arg1-of regular )  )  )  :arg0 you
and :op1 ( tell :arg1 ( sit :manner anywhere )  )  :op2 ( say :time ( person :arg1-of sit :arg1 we )  :arg1 ( reserve :arg1 table )  )
get :null_edge ( uni :source ( californium :null_edge maine :mod ( eel :mod sea :mod freshwater )  )  )  :arg1 ( compare :manner good :arg1 taste )
and :op1 ( start :arg0 we :manner ( and :op1 lox :op2 mussel )  :arg1 ( have :arg1 ( good :degree most :time ever )  :time ever )  :arg1 ( dinner :arg1 ( and :op1 ( product :name ( name :op1 cod )  )  :op2 trout )  )  )
and :op1 ( start :arg0 we :manner ( and :op1 lox :op2 mussel )  :arg1 ( have :arg1 ( good :degree most :time ever )  :time ever )  :arg1 ( dinner :arg1 ( and :op1 ( product :name ( name :op1 cod )  )  :op2 trout )  )  )
and :op1 ( start :arg0 we :manner ( and :op1 lox :op2 mussel )  :arg1 ( have :arg1 ( good :degree most :time ever )  :time ever )  :arg1 ( dinner :arg1 ( and :op1 ( product :name ( name :op1 cod )  )  :op2 trout )  )  )
and :op1 ( start :arg0 we :manner ( and :op1 lox :op2 mussel )  :arg1 ( have :arg1 ( good :degree most :time ever )  :time ever )  :arg1 ( dinner :arg1 ( and :op1 ( product :name ( name :op1 cod )  )  :op2 trout )  )  )
and :op1 ( start :arg0 we :manner ( and :op1 lox :op2 mussel )  :arg1 ( have :arg1 ( good :degree most :time ever )  :time ever )  :arg1 ( dinner :arg1 ( and :op1 ( product :name ( name :op1 cod )  )  :op2 trout )  )  )
t :null_edge ( chicken :mod crispy )
great :domain food
and :op2 ( and :op1 ( recommend :arg0 i :arg1 meatball )  :op2 ( start :domain ( bean :arg1 toast )  :arg1-of wonderful :arg1 meal )  )  :op2 ( caprese :arg1 salad )
and :op2 ( and :op1 ( recommend :arg0 i :arg1 meatball )  :op2 ( start :domain ( bean :arg1 toast )  :arg1-of wonderful :arg1 meal )  )  :op2 ( caprese :arg1 salad )
and :op2 ( and :op1 ( recommend :arg0 i :arg1 meatball )  :op2 ( start :domain ( bean :arg1 toast )  :arg1-of wonderful :arg1 meal )  )  :op2 ( caprese :arg1 salad )
and :op2 ( and :op1 ( recommend :arg0 i :arg1 meatball )  :op2 ( start :domain ( bean :arg1 toast )  :arg1-of wonderful :arg1 meal )  )  :op2 ( caprese :arg1 salad )
tiny :domain ( place :mod this )  :degree incredible
like :arg1 ( didn :arg0 i :null_edge complain )  :arg0 i :arg1 atmosphere :quant ( much :degree so )
and :op1 ( take :manner reality :null_edge ( maximize :arg1 ( diner :mod potential )  )  :arg0 they :mod still :arg1 ( reserve :mod phone )  )  :op2 ( reallocate :arg1 ( table :arg1-of ( wait :arg2 lobby )  )  )
and :op1 ( take :manner reality :null_edge ( maximize :arg1 ( diner :mod potential )  )  :arg0 they :mod still :arg1 ( reserve :mod phone )  )  :op2 ( reallocate :arg1 ( table :arg1-of ( wait :arg2 lobby )  )  )
and :op1 ( take :manner reality :null_edge ( maximize :arg1 ( diner :mod potential )  )  :arg0 they :mod still :arg1 ( reserve :mod phone )  )  :op2 ( reallocate :arg1 ( table :arg1-of ( wait :arg2 lobby )  )  )
and :op1 ( take :manner reality :null_edge ( maximize :arg1 ( diner :mod potential )  )  :arg0 they :mod still :arg1 ( reserve :mod phone )  )  :op2 ( reallocate :arg1 ( table :arg1-of ( wait :arg2 lobby )  )  )
and :op1 ( take :manner reality :null_edge ( maximize :arg1 ( diner :mod potential )  )  :arg0 they :mod still :arg1 ( reserve :mod phone )  )  :op2 ( reallocate :arg1 ( table :arg1-of ( wait :arg2 lobby )  )  )
good :domain wine :time always :time always :domain ( yummy :domain tapa :prep-with ( bread :mod especially :arg1-of warm :arg1-of pita )  )
good :domain wine :time always :time always :domain ( yummy :domain tapa :prep-with ( bread :mod especially :arg1-of warm :arg1-of pita )  )
good :domain wine :time always :time always :domain ( yummy :domain tapa :prep-with ( bread :mod especially :arg1-of warm :arg1-of pita )  )
contrast :arg1 ( explain :arg1 ( seat :arg1 you :arg1 ( great :domain waitress )  )  :arg0 they :arg1 everything :arg1 menu :arg1 ( and :op2 ( cheap :domain ( price :arg1 food )  :mod really :arg1 ( serve :arg0-of ( get :arg0 you )  )  )  )  )
contrast :arg1 ( explain :arg1 ( seat :arg1 you :arg1 ( great :domain waitress )  )  :arg0 they :arg1 everything :arg1 menu :arg1 ( and :op2 ( cheap :domain ( price :arg1 food )  :mod really :arg1 ( serve :arg0-of ( get :arg0 you )  )  )  )  )
contrast :arg1 ( explain :arg1 ( seat :arg1 you :arg1 ( great :domain waitress )  )  :arg0 they :arg1 everything :arg1 menu :arg1 ( and :op2 ( cheap :domain ( price :arg1 food )  :mod really :arg1 ( serve :arg0-of ( get :arg0 you )  )  )  )  )
contrast :arg1 ( explain :arg1 ( seat :arg1 you :arg1 ( great :domain waitress )  )  :arg0 they :arg1 everything :arg1 menu :arg1 ( and :op2 ( cheap :domain ( price :arg1 food )  :mod really :arg1 ( serve :arg0-of ( get :arg0 you )  )  )  )  )
contrast :arg1 ( explain :arg1 ( seat :arg1 you :arg1 ( great :domain waitress )  )  :arg0 they :arg1 everything :arg1 menu :arg1 ( and :op2 ( cheap :domain ( price :arg1 food )  :mod really :arg1 ( serve :arg0-of ( get :arg0 you )  )  )  )  )
and :domain i :op2 ( place :quant several )  :beneficiary ( sum :mod dim )  :op2 ( get :arg0 this :manner bad )
and :op1 freshest :op2 ( variety :mod ( good :degree most )  )  :op3 ( deliver :manner ( fast :degree most )  )
and :op1 freshest :op2 ( variety :mod ( good :degree most )  )  :op3 ( deliver :manner ( fast :degree most )  )
go :arg4 volare :purpose ( and :op1 ( serve :mod class )  :op2 ( food :arg1-of terrific )  )
go :arg4 volare :purpose ( and :op1 ( serve :mod class )  :op2 ( food :arg1-of terrific )  )
and :op1 super-power :op1 trendy :op2 ( s :time always :arg0 ( someone :arg1-of ( take :arg1 ( seat :mod that :arg1-of empty )  )  )  )  :op2 ( seem :arg1 ( deem :arg1 ( service :poss customer )  :arg1 essence )  )
and :op1 super-power :op1 trendy :op2 ( s :time always :arg0 ( someone :arg1-of ( take :arg1 ( seat :mod that :arg1-of empty )  )  )  )  :op2 ( seem :arg1 ( deem :arg1 ( service :poss customer )  :arg1 essence )  )
take :arg0 dinner :arg1 ( temporal-quantity :unit hour :quant almost )  :time ( time :mod any :mod lag )
and :op1 ( obnoxious :arg1 restaurant :degree pretty )  :op2 loud
and :op2 dry :op2 ( tasteless :domain sandwich )  :op1 ( overprice :arg1 sandwich :manner way )
contrast :arg1 ( price :degree ( more :polarity - :compared-to ( deli :mod jersey )  )  :manner ( good :manner way )  )
good :domain ( rice :arg1-of fry )  :mod really :degree too
attend :arg1 we :arg0 ( person :arg2-of staff :mod enthusiastic )  :arg1 ( gaskin :mod ( tony :mod ( manage :mod especially )  )  :arg1 ( suggest :arg1-of excellent :arg1 ( thing :arg0-of select :mod menu )  )  )
attend :arg1 we :arg0 ( person :arg2-of staff :mod enthusiastic )  :arg1 ( gaskin :mod ( tony :mod ( manage :mod especially )  )  :arg1 ( suggest :arg1-of excellent :arg1 ( thing :arg0-of select :mod menu )  )  )
attend :arg1 we :arg0 ( person :arg2-of staff :mod enthusiastic )  :arg1 ( gaskin :mod ( tony :mod ( manage :mod especially )  )  :arg1 ( suggest :arg1-of excellent :arg1 ( thing :arg0-of select :mod menu )  )  )
make :arg1 ( comfortable :polarity - :arg1 ( experience :mod dine )  )
walk :arg1 ( stay :mod still :arg3 away )  :arg0 ( table :mod next-to )  :time ( after :op1 ( serve :arg0 ( and :op1 table :op2 aanother )  :arg1 ( eventhough :arg1-of ( long :degree ( more :degree much )  )  )  )  )
and :domain i :null_edge 7 :op2 ( next :op1 ( close :null_edge contrast )  :op1 ( door :mod front )  )  :op2 ( and :op2 ( eat :arg0 we )  :op1 coat )
restaurant :arg0-of ( invite :degree very )  :topic ( serve :mod friendly )
pleasant :domain ( area :mod back :mod garden :arg1-of sit )  :degree very :arg1 ( possible :arg1 ( see :arg0 you :arg1 ( garden :arg1-of personal :arg1 herb )  )  )
pleasant :domain ( area :mod back :mod garden :arg1-of sit )  :degree very :arg1 ( possible :arg1 ( see :arg0 you :arg1 ( garden :arg1-of personal :arg1 herb )  )  )
restaurant :mod good :location ( area :mod ( devoid :op1 ( restaurant :mod decency :arg1-of ( re :arg0 you :arg2 ( eat :arg0 you :arg1 ( sandwich :quant 4 :mod pastrami )  :location ( or :op2 ( food :mod ( country :name ( name :op1 mexican )  )  :arg1-of ( supply :arg0 ( restaurant :arg1-of capable )  )  )  :op2 ( country :name ( name :op1 france )  )  )  )  )  )  )  )
restaurant :mod good :location ( area :mod ( devoid :op1 ( restaurant :mod decency :arg1-of ( re :arg0 you :arg2 ( eat :arg0 you :arg1 ( sandwich :quant 4 :mod pastrami )  :location ( or :op2 ( food :mod ( country :name ( name :op1 mexican )  )  :arg1-of ( supply :arg0 ( restaurant :arg1-of capable )  )  )  :op2 ( country :name ( name :op1 france )  )  )  )  )  )  )  )
and :null_edge ( welll :arg1 drink :time always )  :op2 ( price :arg1 drink :arg1 ( select :arg1 wine )  :degree fair )
and :null_edge ( welll :arg1 drink :time always )  :op2 ( price :arg1 drink :arg1 ( select :arg1 wine )  :degree fair )
and :null_edge ( welll :arg1 drink :time always )  :op2 ( price :arg1 drink :arg1 ( select :arg1 wine )  :degree fair )
share :arg0 we :mod also :arg1 ( salad :mod house :arg1-of fresh )
amaze :arg0 ceiling
and :time ( conclude :arg0 ( nightmare :mod this :mod culinary )  )  :op1 ( give :arg1 check :arg2 table :manner ( knock-down :arg0 check :arg1 ( water :quant glass )  )  )
and :time ( conclude :arg0 ( nightmare :mod this :mod culinary )  )  :op1 ( give :arg1 check :arg2 table :manner ( knock-down :arg0 check :arg1 ( water :quant glass )  )  )
and :time ( conclude :arg0 ( nightmare :mod this :mod culinary )  )  :op1 ( give :arg1 check :arg2 table :manner ( knock-down :arg0 check :arg1 ( water :quant glass )  )  )
feat :mod small :prep-for ( food :mod good :location area :mod ( country :name ( name :op1 france )  )  )
possible :arg1 space :mod ( too :degree bit :beneficiary ( music :mod live )  )  :time ( night :mod jazz )  :arg1 ( loud :location ( and :op2 cramped )  )
possible :arg1 space :mod ( too :degree bit :beneficiary ( music :mod live )  )  :time ( night :mod jazz )  :arg1 ( loud :location ( and :op2 cramped )  )
possible :arg1 space :mod ( too :degree bit :beneficiary ( music :mod live )  )  :time ( night :mod jazz )  :arg1 ( loud :location ( and :op2 cramped )  )
contrast :arg1 food :arg1 average :arg2 ( tasty :arg1 food )
get :arg0 ( wong :mod big )  :arg1 ( up :mod big )  :arg3 ( establish :manner fine )
inspire :arg1 ( and :op1 ( bland :domain entree )  :op2 ( small :arg1 entree )  )  :arg1 dessert
inspire :arg1 ( and :op1 ( bland :domain entree )  :op2 ( small :arg1 entree )  )  :arg1 dessert
person :arg2-of staff :mod ( friendliest :arg1-of ( see :location ( york :null_edge new )  )  )
great :manner ( exception :arg1 ( salad :mod lemon )  :arg1 ( pepper :quant ( much :degree so )  :arg1-of ( start :arg1 eye :arg1 ( water :arg0 eye )  )  )  )  :domain food :location here :mod decency
great :manner ( exception :arg1 ( salad :mod lemon )  :arg1 ( pepper :quant ( much :degree so )  :arg1-of ( start :arg1 eye :arg1 ( water :arg0 eye )  )  )  )  :domain food :location here :mod decency
great :manner ( exception :arg1 ( salad :mod lemon )  :arg1 ( pepper :quant ( much :degree so )  :arg1-of ( start :arg1 eye :arg1 ( water :arg0 eye )  )  )  )  :domain food :location here :mod decency
contrast :arg2 pad :arg1 ( look :arg0 ( and :op2 lad :op2 ( dish :mod various :mod other )  :quant all )  :arg1 good :arg1 paper )  :arg2 ( have :arg0 i :arg1 ( food :mod good :mod thai )  :location ( place :mod less :mod please )  )
contrast :arg2 pad :arg1 ( look :arg0 ( and :op2 lad :op2 ( dish :mod various :mod other )  :quant all )  :arg1 good :arg1 paper )  :arg2 ( have :arg0 i :arg1 ( food :mod good :mod thai )  :location ( place :mod less :mod please )  )
contrast :arg1 ( food :mod delicious :arg1-of ( thing :arg2-of price :mod great )  )  :arg1 ( go :location here :time ( day :mod cold )  :null_edge ( and :op3 ( sit :arg2 ( door :mod front )  )  )  )
contrast :arg1 ( food :mod delicious :arg1-of ( thing :arg2-of price :mod great )  )  :arg1 ( go :location here :time ( day :mod cold )  :null_edge ( and :op3 ( sit :arg2 ( door :mod front )  )  )  )
contrast :arg1 ( food :mod delicious :arg1-of ( thing :arg2-of price :mod great )  )  :arg1 ( go :location here :time ( day :mod cold )  :null_edge ( and :op3 ( sit :arg2 ( door :mod front )  )  )  )
pick :location ( fish :mod ( chicken :arg0-of guizhou :null_edge ( fillet :mod fish :source ( source :mod spicy )  :domain ( menu :arg1-of special )  )  )  :arg0-of ( source :arg1-of hot :mod bean )  )
pick :location ( fish :mod ( chicken :arg0-of guizhou :null_edge ( fillet :mod fish :source ( source :mod spicy )  :domain ( menu :arg1-of special )  )  )  :arg0-of ( source :arg1-of hot :mod bean )  )
pick :location ( fish :mod ( chicken :arg0-of guizhou :null_edge ( fillet :mod fish :source ( source :mod spicy )  :domain ( menu :arg1-of special )  )  )  :arg0-of ( source :arg1-of hot :mod bean )  )
pick :location ( fish :mod ( chicken :arg0-of guizhou :null_edge ( fillet :mod fish :source ( source :mod spicy )  :domain ( menu :arg1-of special )  )  )  :arg0-of ( source :arg1-of hot :mod bean )  )
impress :mod overall :arg0 i :arg0 m :mod still :arg1 ( and :op2 ( exist :mod even )  :op2 ( decent :arg1 price :degree quite )  :op2 ( chinatown :mod ( again :mod then )  )  )
and :op1 ( night :quant some :location ( inside :op1 restaurant )  )  :arg1 ( warm :mod admittedly :arg1 ( kitchen :arg1-of open :poss charm )  )
soggy :domain pizza :mod little
inlude :arg0 food :arg1 ( and :mod scrumptious :op2 ( style :mod bombay )  :op1 bhelpurus :op2 sevpurus :op2 chaat :op3 ( appetizer :mod other :mod great :mod ( country :name ( name :op1 indian )  )  )  )
inlude :arg0 food :arg1 ( and :mod scrumptious :op2 ( style :mod bombay )  :op1 bhelpurus :op2 sevpurus :op2 chaat :op3 ( appetizer :mod other :mod great :mod ( country :name ( name :op1 indian )  )  )  )
inlude :arg0 food :arg1 ( and :mod scrumptious :op2 ( style :mod bombay )  :op1 bhelpurus :op2 sevpurus :op2 chaat :op3 ( appetizer :mod other :mod great :mod ( country :name ( name :op1 indian )  )  )  )
inlude :arg0 food :arg1 ( and :mod scrumptious :op2 ( style :mod bombay )  :op1 bhelpurus :op2 sevpurus :op2 chaat :op3 ( appetizer :mod other :mod great :mod ( country :name ( name :op1 indian )  )  )  )
inlude :arg0 food :arg1 ( and :mod scrumptious :op2 ( style :mod bombay )  :op1 bhelpurus :op2 sevpurus :op2 chaat :op3 ( appetizer :mod other :mod great :mod ( country :name ( name :op1 indian )  )  )  )
inlude :arg0 food :arg1 ( and :mod scrumptious :op2 ( style :mod bombay )  :op1 bhelpurus :op2 sevpurus :op2 chaat :op3 ( appetizer :mod other :mod great :mod ( country :name ( name :op1 indian )  )  )  )
have :arg0 ( fun :time singapore )  :arg1 ( flavor :polarity - :arg2 ( curry :location whatsoever )  )
have :arg0 ( fun :time singapore )  :arg1 ( flavor :polarity - :arg2 ( curry :location whatsoever )  )
problem :mod only :domain ( person :arg1-of competent :domain manage :arg1-of complete )
and :op1 ( interest :domain ( list :arg2 wine )  )  :op2 ( have :arg1 ( value :quant many :mod good )  )
mad :arg0 i :mod still :arg1 ( have :arg0 i :arg2 ( pay :arg0 i :arg3 ( food :arg1-of lousy )  )  )
use :arg0 ( restaurant :mod this )  :arg2 ( location :arg1-of regular :mod ( dinner :time ( night :time ( event :name ( name :op1 thursday )  )  )  )  )
definite
compact :domain thr :location ( moshphere :arg1-of modern )  :concession-of cozy
pizza :mod ( good :degree most )  :arg1-of manhattan
food :mod decency :mod thai :arg1-of cute :null_edge ( contrast :arg2 ( dank :quant bit )  :arg1 ( hangout :mod little :mod nolita )  :arg2 ( service :mod terrible )  )
food :mod decency :mod thai :arg1-of cute :null_edge ( contrast :arg2 ( dank :quant bit )  :arg1 ( hangout :mod little :mod nolita )  :arg2 ( service :mod terrible )  )
and :op1 ( pour :arg1 waiter :mod actual :arg1 water )  :op2 ( walk :arg0 waiter :direction away )
and :op1 ( pour :arg1 waiter :mod actual :arg1 water )  :op2 ( walk :arg0 waiter :direction away )
scratch :arg1 food :mod most :arg1 ( and :op1 fresh :op2 prepare )
add :arg1 bad :null_edge 60 :manner erroneously :arg2 bill
and :op1 ( reserve :polarity - :mod more )  :op2 ( tip :mod expensive )  :op2 ( stuff :mod annoying )
and :op1 ( reserve :polarity - :mod more )  :op2 ( tip :mod expensive )  :op2 ( stuff :mod annoying )
and :op1 ( reserve :polarity - :mod more )  :op2 ( tip :mod expensive )  :op2 ( stuff :mod annoying )
try :arg1 ( bass :mod sea )
multi-sentence :snt1 ( get :null_edge 20 :arg1 you :arg1 ( sushi :mod ( limit :polarity - )  :arg1 ( quality :arg1-of ( high :degree very )  )  )  )  :snt2 ( take :mod even :arg1 ( person :arg0-of ( have-rel-role :arg2 friend :location here :arg0-of ( say :arg1 ( place :mod ( good :degree most )  :mod sushi )  )  )  )  )
get :null_edge 20 :arg1 you :arg1 ( sushi :mod ( limit :polarity - )  :arg1 ( quality :arg1-of ( high :degree very )  :poss ( person :mod even :arg0-of ( have-rel-role :arg2 friend :location here :arg0-of ( say :arg1 ( place :mod ( good :degree most )  :mod sushi )  )  )  )  )  )
wasn :mod sushi :null_edge ( t :arg1 ( anything :mod ( spectacular :prep-for ( thing :arg2-of price )  )  )  )
wasn :mod sushi :null_edge ( t :arg1 ( anything :mod ( spectacular :prep-for ( thing :arg2-of price )  )  )  )
and :op1 ( come :time meal :arg1 manage :manner ( and :op2 ( buy :arg0 manage :mod even :arg1 ( round :consist-of ( thing :arg1-of drink )  )  )  )  )  :op1 over :op2 check
and :op1 ( come :time meal :arg1 manage :manner ( and :op2 ( buy :arg0 manage :mod even :arg1 ( round :consist-of ( thing :arg1-of drink )  )  )  )  )  :op1 over :op2 check
and :op1 ( come :time meal :arg1 manage :manner ( and :op2 ( buy :arg0 manage :mod even :arg1 ( round :consist-of ( thing :arg1-of drink )  )  )  )  )  :op1 over :op2 check
contrast :arg1 ( have :arg0 they :arg0 ( t :null_edge don )  :arg1 ( toaster :mod strange )  )
food :mod so :mod good :arg1-of recommend :prep-for ( fun :location ( out :op1 night )  )
lack :arg1 ( resemble :op similar :arg2 menu )  :arg0 taste :arg1 ( flavor :quant more :arg1-of look )
lack :arg1 ( resemble :op similar :arg2 menu )  :arg0 taste :arg1 ( flavor :quant more :arg1-of look )
lack :arg1 ( resemble :op similar :arg2 menu )  :arg0 taste :arg1 ( flavor :quant more :arg1-of look )
lover :quant all :mod dosa
good :mod ( huge :domain portion )  :domain ( split :arg1 ( thing :quant 3 )  :arg1 ( and :op1 ( appetizer :quant 1 )  :op2 entree :frequency ( rate-entity :arg2 person )  )  :quant 2 )
good :mod ( huge :domain portion )  :domain ( split :arg1 ( thing :quant 3 )  :arg1 ( and :op1 ( appetizer :quant 1 )  :op2 entree :frequency ( rate-entity :arg2 person )  )  :quant 2 )
good :mod ( huge :domain portion )  :domain ( split :arg1 ( thing :quant 3 )  :arg1 ( and :op1 ( appetizer :quant 1 )  :op2 entree :frequency ( rate-entity :arg2 person )  )  :quant 2 )
and :op2 appetizer :mod just :op2 ( subpar :domain appetizer :arg1 ( course :mod main )  :degree decidedly )
and :op2 appetizer :mod just :op2 ( subpar :domain appetizer :arg1 ( course :mod main )  :degree decidedly )
recommend :arg0 ( someone :mod else )  :arg1 ( dessert :arg0-of ( leave :arg0 we :mod also )  )
and :op1 ( present :arg1 ( food :mod exotic )  :mod beautiful )  :op2 ( delight :arg1 food :arg1 ( thing :arg3-of combine :mod delicious )  )
and :op1 ( attentive :domain ( person :arg2-of staff )  :degree very )  :op2 ( possible :arg1 ( get :arg0 we :time ( always :mod almost )  :arg1 table )  )
and :op1 ( attentive :domain ( person :arg2-of staff )  :degree very )  :op2 ( possible :arg1 ( get :arg0 we :time ( always :mod almost )  :arg1 table )  )
experience :arg1 ( try :arg1 ( salad :name ( name :op1 mediterranean )  )  )  :mod true :beneficiary ( bud :arg1-of taste )
xconcept
friendly :time always
and :op2 ( cream :arg1 cheese-off )  :op2 ( out :arg2 ( world :mod this )  )  :op2 ( love :arg1 coffee )
xconcept
and :op2 ( cream :arg1 cheese-off )  :op2 ( out :arg2 ( world :mod this )  )  :op2 ( love :arg1 coffee )
xconcept
prepare :arg2 ( entree :arg2 ( thing :arg1-of drink )  )  :arg1 everything :mod creatively :null_edge ( simple :mod still )
prepare :arg2 ( entree :arg2 ( thing :arg1-of drink )  )  :arg1 everything :mod creatively :null_edge ( simple :mod still )
prepare :arg2 ( entree :arg2 ( thing :arg1-of drink )  )  :arg1 everything :mod creatively :null_edge ( simple :mod still )
and :op1 ( prompt :arg0 service )  :op2 courteous
and :op1 ( ordinary :degree above )  :op2 ( have :arg0 ( version :mod beef )  :arg1 ( beef :arg1-of cheap :mod undercooked )  )
and :op1 ( ordinary :degree above )  :op2 ( have :arg0 ( version :mod beef )  :arg1 ( beef :arg1-of cheap :mod undercooked )  )
great :domain ( restaurant :domain chance :mod small :mod cozy :manner ( feel :arg1 romantic )  )  :domain decor
contrast :arg1 ( and :op1 ( nice :arg1 it )  :op2 fresh :op2 ( possible :arg1 ( give :arg1 ( score :arg1-of high :arg2 ( thaus :null_edge authentic )  )  )  )  )
get :arg1 ( soda :mod club :arg1-of ( fill :arg1 club :arg2 ice )  )  :arg1 ( lime :polarity - )
get :arg1 ( soda :mod club :arg1-of ( fill :arg1 club :arg2 ice )  )  :arg1 ( lime :polarity - )
get :arg1 ( soda :mod club :arg1-of ( fill :arg1 club :arg2 ice )  )  :arg1 ( lime :polarity - )
contrast :arg1 ( serve :arg1 ( and :op1 ( wine :mod only )  :op2 beer :op2 ( good :domain ( varity :mod house )  :mod actual :mod quite )  )  )
contrast :arg1 ( serve :arg1 ( and :op1 ( wine :mod only )  :op2 beer :op2 ( good :domain ( varity :mod house )  :mod actual :mod quite )  )  )
contrast :arg1 ( serve :arg1 ( and :op1 ( wine :mod only )  :op2 beer :op2 ( good :domain ( varity :mod house )  :mod actual :mod quite )  )  )
contrast :arg1 ( serve :arg1 ( and :op1 ( wine :mod only )  :op2 beer :op2 ( good :domain ( varity :mod house )  :mod actual :mod quite )  )  )
cost :arg1 ( place :mod this )  :arg2 ( person :arg0-of own :arg1 build )
cost :arg1 ( place :mod this )  :arg2 ( person :arg0-of own :arg1 build )
and :op1 ( enough :mod oh :domain ( dessert :mod complimentary :mod pudding )  :mod ( just :compared-to yummy )  )
split :arg1 we :arg1 ( and :op1 ( samosa :mod ( vegetable :mod tasty )  )  :op2 wrap )
split :arg1 we :arg1 ( and :op1 ( samosa :mod ( vegetable :mod tasty )  )  :op2 wrap )
knowledge :arg1 ( and :op1 chef :op2 waitress )  :location ( below :op1 average )
knowledge :arg1 ( and :op1 chef :op2 waitress )  :location ( below :op1 average )
and :op1 ( walk :arg0 we :location ( around :op1 village )  )  :op2 ( go :arg4 ( place :mod this )  :arg3 ( thing :arg1-of drink :mod just :quant some )  )
select :mod decency :arg1 wine :mod too
save :arg1 ( and :op1 walk :op2 ( wait :arg2 table :mod ( noisy :frequency often )  :arg2 ( bar :arg1-of crowd :time date-entity )  )  )
save :arg1 ( and :op1 walk :op2 ( wait :arg2 table :mod ( noisy :frequency often )  :arg2 ( bar :arg1-of crowd :time date-entity )  )  )
save :arg1 ( and :op1 walk :op2 ( wait :arg2 table :mod ( noisy :frequency often )  :arg2 ( bar :arg1-of crowd :time date-entity )  )  )
obligate :arg1 i :arg2 ( say :arg1 ( person :arg0-of have-org-role :arg0 i :arg1 ( meal :mod ( disapoint :location here )  )  )  )
contrast :arg1 ( burnt :mod little )  :arg2 ( delicious :mod still :arg2 ( and :op1 ( cheese-off :mod goat :null_edge ( bitter :domain raddichio :degree kind-of )  )  )  )
contrast :arg1 ( burnt :mod little )  :arg2 ( delicious :mod still :arg2 ( and :op1 ( cheese-off :mod goat :null_edge ( bitter :domain raddichio :degree kind-of )  )  )  )
service :mod ( disappoint :arg1 food )  :mod lousy
service :mod ( disappoint :arg1 food )  :mod lousy
place :condition ( want :arg0 you :arg1 ( bistro :mod casual :mod neighborhood :arg0-of ( have :arg1 ( and :op1 ( food :mod great )  :op2 ( service :arg1-of excellent )  )  )  )  )  :domain this
place :condition ( want :arg0 you :arg1 ( bistro :mod casual :mod neighborhood :arg0-of ( have :arg1 ( and :op1 ( food :mod great )  :op2 ( service :arg1-of excellent )  )  )  )  )  :domain this
go :arg1 ( place :mod great )  :arg4 drink :mod too :arg1-of ( cause :arg0 ( have :arg1 ( beer :mod ( kind :quant 100 )  )  )  )
go :arg1 ( place :mod great )  :arg4 drink :mod too :arg1-of ( cause :arg0 ( have :arg1 ( beer :mod ( kind :quant 100 )  )  )  )
cause :arg0 ( and :op1 ( thing :arg2-of price )  :op2 ( portion :mod small )  )
cause :arg0 ( and :op1 ( thing :arg2-of price )  :op2 ( portion :mod small )  )
continue :time meanwhile :arg0 bartender :arg1 ( pour :arg0 bartender :arg1 champagne :arg3 reserve )  :time ( after :op1 ( and :op1 ( finish :arg0 we :arg1 bottle )  :op2 ( enjoy :arg0 we :arg0 we :null_edge ( amuse :arg1 ( soup :mod turnip )  )  :manner ( basil :mod pureed )  :arg1 ( grati :arg1 basil )  )  )  )
continue :time meanwhile :arg0 bartender :arg1 ( pour :arg0 bartender :arg1 champagne :arg3 reserve )  :time ( after :op1 ( and :op1 ( finish :arg0 we :arg1 bottle )  :op2 ( enjoy :arg0 we :arg0 we :null_edge ( amuse :arg1 ( soup :mod turnip )  )  :manner ( basil :mod pureed )  :arg1 ( grati :arg1 basil )  )  )  )
continue :time meanwhile :arg0 bartender :arg1 ( pour :arg0 bartender :arg1 champagne :arg3 reserve )  :time ( after :op1 ( and :op1 ( finish :arg0 we :arg1 bottle )  :op2 ( enjoy :arg0 we :arg0 we :null_edge ( amuse :arg1 ( soup :mod turnip )  )  :manner ( basil :mod pureed )  :arg1 ( grati :arg1 basil )  )  )  )
and :op1 ( prepare :arg1 food :arg1 service )
and :op1 ( prepare :arg1 food :arg1 service )
contrast :arg1 ( thh :domain ( dish :mod ( good :degree most )  )  :arg1 ( noodle :mod thai :mod spiced :mod ( curry :accompanier ( shrimp :arg1 ( dish :arg1-of ( cost :null_edge 23 )  )  )  )  )  )
contrast :arg1 ( place :domain 95 :quant most :location ( here :null_edge 16 )  )
contrast :arg1 ( thh :domain ( dish :mod ( good :degree most )  )  :arg1 ( noodle :mod thai :mod spiced :mod ( curry :accompanier ( shrimp :arg1 ( dish :arg1-of ( cost :null_edge 23 )  )  )  )  )  )
contrast :arg1 ( place :domain 95 :quant most :location ( here :null_edge 16 )  )
contrast :arg1 ( thh :domain ( dish :mod ( good :degree most )  )  :arg1 ( noodle :mod thai :mod spiced :mod ( curry :accompanier ( shrimp :arg1 ( dish :arg1-of ( cost :null_edge 23 )  )  )  )  )  )
contrast :arg1 ( place :domain 95 :quant most :location ( here :null_edge 16 )  )
contrast :arg1 ( thh :domain ( dish :mod ( good :degree most )  )  :arg1 ( noodle :mod thai :mod spiced :mod ( curry :accompanier ( shrimp :arg1 ( dish :arg1-of ( cost :null_edge 23 )  )  )  )  )  )
contrast :arg1 ( place :domain 95 :quant most :location ( here :null_edge 16 )  )
touch-on :arg0 ( and :op1 ( atmosphere :mod good :arg1-of dark )  :op2 music )  :arg1-of nice
touch-on :arg0 ( and :op1 ( atmosphere :mod good :arg1-of dark )  :op2 music )  :arg1-of nice
contrast :arg1 ( say :arg1 ( small :domain portion :degree very )  :arg0 ( person :arg0-of ( have-rel-role :arg2 husband )  )  )  :arg2 ( fine :arg1 ( good :domain ( course :mod main )  :domain ( eat :arg0 course :arg1 portion )  )  )
contrast :arg1 ( say :arg1 ( small :domain portion :degree very )  :arg0 ( person :arg0-of ( have-rel-role :arg2 husband )  )  )  :arg2 ( fine :arg1 ( good :domain ( course :mod main )  :domain ( eat :arg0 course :arg1 portion )  )  )
contrast :arg1 ( say :arg1 ( small :domain portion :degree very )  :arg0 ( person :arg0-of ( have-rel-role :arg2 husband )  )  )  :arg2 ( fine :arg1 ( good :domain ( course :mod main )  :domain ( eat :arg0 course :arg1 portion )  )  )
contrast :arg1 ( great :domain thaus :manner definite )  :arg2 ( and :op1 bland :op2 indistinguished )
great :null_edge ( null_tag :time ( date-entity :beneficiary group )  )  :degree ( great :prep-for ( or :op1 ( brunch :mod early )  :op2 nightcap )  )
great :null_edge ( null_tag :time ( date-entity :beneficiary group )  )  :degree ( great :prep-for ( or :op1 ( brunch :mod early )  :op2 nightcap )  )
and :op2 ( suggest :arg0 ( server :arg1-of friendly )  :mod great :mod food )  :op2 ( send :mod also :arg1 ( and :op1 sommelier :op2 fromager )  :arg2 table :purpose ( help :arg0 and :arg1 suggest :arg1 ( pair :arg1-of differ )  :arg1 ( and :op1 wine :op2 cheese-off )  )  )
and :op2 ( suggest :arg0 ( server :arg1-of friendly )  :mod great :mod food )  :op2 ( send :mod also :arg1 ( and :op1 sommelier :op2 fromager )  :arg2 table :purpose ( help :arg0 and :arg1 suggest :arg1 ( pair :arg1-of differ )  :arg1 ( and :op1 wine :op2 cheese-off )  )  )
and :op2 ( suggest :arg0 ( server :arg1-of friendly )  :mod great :mod food )  :op2 ( send :mod also :arg1 ( and :op1 sommelier :op2 fromager )  :arg2 table :purpose ( help :arg0 and :arg1 suggest :arg1 ( pair :arg1-of differ )  :arg1 ( and :op1 wine :op2 cheese-off )  )  )
and :op2 ( suggest :arg0 ( server :arg1-of friendly )  :mod great :mod food )  :op2 ( send :mod also :arg1 ( and :op1 sommelier :op2 fromager )  :arg2 table :purpose ( help :arg0 and :arg1 suggest :arg1 ( pair :arg1-of differ )  :arg1 ( and :op1 wine :op2 cheese-off )  )  )
and :op2 ( suggest :arg0 ( server :arg1-of friendly )  :mod great :mod food )  :op2 ( send :mod also :arg1 ( and :op1 sommelier :op2 fromager )  :arg2 table :purpose ( help :arg0 and :arg1 suggest :arg1 ( pair :arg1-of differ )  :arg1 ( and :op1 wine :op2 cheese-off )  )  )
and :op2 ( suggest :arg0 ( server :arg1-of friendly )  :mod great :mod food )  :op2 ( send :mod also :arg1 ( and :op1 sommelier :op2 fromager )  :arg2 table :purpose ( help :arg0 and :arg1 suggest :arg1 ( pair :arg1-of differ )  :arg1 ( and :op1 wine :op2 cheese-off )  )  )
possible :mod only :arg1 ( contrast :arg1 ( sit :arg1-of ( cause :arg0 we :arg0 reserve )  :arg1 we :arg2 ( garden :mod back )  )  :arg2 ( and :op1 ( great :domain ( weather :mod nice )  )  :op2 secluded :op2 perfect )  )
possible :mod only :arg1 ( contrast :arg1 ( sit :arg1-of ( cause :arg0 we :arg0 reserve )  :arg1 we :arg2 ( garden :mod back )  )  :arg2 ( and :op1 ( great :domain ( weather :mod nice )  )  :op2 secluded :op2 perfect )  )
thing :domain ( stuff :arg1 ( food :mod ( country :name ( name :op1 japanese )  )  )  )  :arg1-of rare
horrendous :condition ( good :domain food )  :polarity - :arg1 ( il :mod certainty )  :arg0 service
horrendous :condition ( good :domain food )  :polarity - :arg1 ( il :mod certainty )  :arg0 service
service :domain ( expect :arg0 one :condition ( category :mod joint :mod this :mod price )  )
service :domain ( expect :arg0 one :condition ( category :mod joint :mod this :mod price )  )
expect :arg0 family :arg1 ( entertain :mod ( incredible :degree such )  :location restaurant )
recommend :arg0 i :arg1 ( reserve :topic weekend )
pizza :mod great :arg1-of ( place :mod lunch )
contrast :arg1 ( expensive :domain food :degree very :null_edge ( spend :arg0 we :null_edge 160 :arg3 ( lunch :arg0 we )  :arg3 2 )  )  :arg2 ( tasty :degree extreme )
and :op1 ( group :arg0 we :consist-of 8 )  :op2 seve
country :name ( name :op1 japanese )  :domain ( and :op1 ( signal :mod even )  :op2 ( menu :null_edge null_tag )  :op2 food :op1 ( waitstaff :mod all )  :mod all )  :mod total
country :name ( name :op1 japanese )  :domain ( and :op1 ( signal :mod even )  :op2 ( menu :null_edge null_tag )  :op2 food :op1 ( waitstaff :mod all )  :mod all )  :mod total
country :name ( name :op1 japanese )  :domain ( and :op1 ( signal :mod even )  :op2 ( menu :null_edge null_tag )  :op2 food :op1 ( waitstaff :mod all )  :mod all )  :mod total
country :name ( name :op1 japanese )  :domain ( and :op1 ( signal :mod even )  :op2 ( menu :null_edge null_tag )  :op2 food :op1 ( waitstaff :mod all )  :mod all )  :mod total
and :op1 ( love :arg0 i :arg1 ( roll :mod spicy :arg1 scallop )  :arg1 ( person :arg0-of ( have-rel-role :arg2 boyfriend )  :manner consistent :op1 ( chicken :mod sesame )  )  )
and :op1 ( love :arg0 i :arg1 ( roll :mod spicy :arg1 scallop )  :arg1 ( person :arg0-of ( have-rel-role :arg2 boyfriend )  :manner consistent :op1 ( chicken :mod sesame )  )  )
contrast :arg2 m :arg1 ( criticize :arg0 i :polarity - :arg1 food )  :arg2 ( think :arg0 i :arg1 ( live-up :arg0 i :arg1 ( experience :quant ( bit :mod tiny )  )  :manner belt :location ny :time ( year :mod last :null_edge null_tag )  )  )
note :arg0 i :arg1 ( cross :arg1 bill )
dish :mod ( good :degree most )  :mod ( tuna :arg1-of wrap )
dish :mod ( good :degree most )  :mod ( tuna :arg1-of wrap )
amaze :domain food :degree absolute
xconcept
make :arg0 ( server :quant some )  :arg1 ( feel :arg0 you :time ( do :arg0 you :arg0 you :arg1 ( favor :arg1 ( bring :arg1 you :arg1 food )  )  )  )
make :arg0 ( server :quant some )  :arg1 ( feel :arg0 you :time ( do :arg0 you :arg0 you :arg1 ( favor :arg1 ( bring :arg1 you :arg1 food )  )  )  )
contrast :arg1 ( and :op1 ( fast :arg1 ( alternative :arg1-of excellent )  :arg1 ( joint :mod food )  :null_edge ( disappoint :domain food :degree slight )  )  :op2 order )
contrast :arg1 ( and :op1 ( fast :arg1 ( alternative :arg1-of excellent )  :arg1 ( joint :mod food )  :null_edge ( disappoint :domain food :degree slight )  )  :op2 order )
restaurant :domain ( inn :mod mermaid )  :mod overall :mod good :arg2 ( seafood :mod ( good :mod really )  )
and :op1 ( attentive :domain ( person :arg2-of staff )  :mod also )  :op2 ( friendly :arg1 person )
amaze :null_edge ( eat :arg1-of possible :arg1 deal )  :location here
problem :domain that :arg1-of ( cause :arg1 ( and :op1 ( pay :arg0 we :arg1 ( buck :null_edge ( about :null_edge 20 )  )  )  :op2 ( order :arg0 we :arg1 ( dish :quant 5 )  :arg2 ( get :arg1 ( taste :mod decency )  )  )  )  )
problem :domain that :arg1-of ( cause :arg1 ( and :op1 ( pay :arg0 we :arg1 ( buck :null_edge ( about :null_edge 20 )  )  )  :op2 ( order :arg0 we :arg1 ( dish :quant 5 )  :arg2 ( get :arg1 ( taste :mod decency )  )  )  )  )
problem :domain that :arg1-of ( cause :arg1 ( and :op1 ( pay :arg0 we :arg1 ( buck :null_edge ( about :null_edge 20 )  )  )  :op2 ( order :arg0 we :arg1 ( dish :quant 5 )  :arg2 ( get :arg1 ( taste :mod decency )  )  )  )  )
rip :arg0 they :mod such
xconcept :x 95 :x ( multi-sentence :snt2 ( and :op1 ( patty :quant 4 :mod small :mod meat :location ( bun :mod steamed )  )  )  :arg1 ( worth :domain try )  )
and :op1 ( terrific :arg1 ( pizza :quant all )  )  :op2 ( good :domain price :mod even )
and :op1 ( terrific :arg1 ( pizza :quant all )  )  :op2 ( good :domain price :mod even )
and :op2 ( and :op1 food :op2 ambiance )  :op2 ( have :arg1 ( imagine :manner dreadful )  :arg0 we :mod only :null_edge ( listen :arg0 we :arg1 ( engine :mod idle )  )  )
and :op2 ( and :op1 food :op2 ambiance )  :op2 ( have :arg1 ( imagine :manner dreadful )  :arg0 we :mod only :null_edge ( listen :arg0 we :arg1 ( engine :mod idle )  )  )
good :domain food :degree too
and :op1 ( take :time ( after :op1 ( pay :time immediate :arg0 we )  )  :arg0 waiter :arg1 money )  :op2 ( say :arg0 waiter :arg1 ( outta :null_edge okay :arg0 ( you :mod guy )  :location here )  )
elegant :domain ( room :mod dine )  :manner quiet :arg1 ( music :polarity - :purpose ( shout :manner over )  :arg1-of refreshing )
elegant :domain ( room :mod dine )  :manner quiet :arg1 ( music :polarity - :purpose ( shout :manner over )  :arg1-of refreshing )
contrast :arg2 admittedly :arg1 this :arg2 ( piece :mod gigantic :arg1-of ( overflow :arg1 ( plate :source ( and :op1 fish :op1 ( thank :arg1 goodness :arg2 opine )  )  )  )  )  :arg2 ( place :beneficiary ( sushi :mod ( elegant :arg1-of simple )  )  :mod ( good :polarity - )  :location ( or :op1 ( york :null_edge new )  :op2 anywhere )  )
contrast :arg2 admittedly :arg1 this :arg2 ( piece :mod gigantic :arg1-of ( overflow :arg1 ( plate :source ( and :op1 fish :op1 ( thank :arg1 goodness :arg2 opine )  )  )  )  )  :arg2 ( place :beneficiary ( sushi :mod ( elegant :arg1-of simple )  )  :mod ( good :polarity - )  :location ( or :op1 ( york :null_edge new )  :op2 anywhere )  )
seem :arg1 ( have :arg0 menu :arg1 ( variety :arg1-of wide :consist-of ( dish :example ( and :op1 ( lover :mod seafood )  :op2 ( way :mod interesting :instrument-of prepare )  )  )  )  )
seem :arg1 ( have :arg0 menu :arg1 ( variety :arg1-of wide :consist-of ( dish :example ( and :op1 ( lover :mod seafood )  :op2 ( way :mod interesting :instrument-of prepare )  )  )  )  )
seem :arg1 ( have :arg0 menu :arg1 ( variety :arg1-of wide :consist-of ( dish :example ( and :op1 ( lover :mod seafood )  :op2 ( way :mod interesting :instrument-of prepare )  )  )  )  )
and :op1 ( incredible :arg1 ( bean :mod white :arg1-of start )  )  :op2 ( phenomenal :domain pasta )
and :op1 ( incredible :arg1 ( bean :mod white :arg1-of start )  )  :op2 ( phenomenal :domain pasta )
limit :arg1 ( rest :part-of menu )  :arg1 ( eat :mod ( good :domain everything )  )
xconcept :x menu :x ( website :mod nothing )
and :op1 ( food :mod great )  :op2 ( lay :mod great )  :op2 service
and :op1 ( food :mod great )  :op2 ( lay :mod great )  :op2 service
and :op1 ( food :mod great )  :op2 ( lay :mod great )  :op2 service
ask :arg1 ( attendant :mod cart )  :arg1 ( leaf :mod lotus :arg1-of ( wrap :arg1 rice )  )  :arg2 and :arg2 ( and :op1 reply :op2 ( walk :mod just :direction away )  )
ask :arg1 ( attendant :mod cart )  :arg1 ( leaf :mod lotus :arg1-of ( wrap :arg1 rice )  )  :arg2 and :arg2 ( and :op1 reply :op2 ( walk :mod just :direction away )  )
ask :arg1 ( attendant :mod cart )  :arg1 ( leaf :mod lotus :arg1-of ( wrap :arg1 rice )  )  :arg2 and :arg2 ( and :op1 reply :op2 ( walk :mod just :direction away )  )
and :op1 ( walk :arg0 we :null_edge ( event :name ( name :op1 wednesday )  )  :time night )  :op2 ( seat :manner prompt )
make :arg1 ( wait :arg1 ( person :arg2-of staff )  :degree very )  :arg0 they :arg1 ( feel :arg2 you :null_edge ( eat :condition ( be-located-at :location ( town :mod ( little :degree freindly )  :mod ( continent :name ( name :op1 european )  )  )  )  )  )
busy :domain waitstaff :null_edge all :degree very :null_edge ( contrast :arg1 ( service :mod outstanding )  :arg2 ( deal :manner rudely )  )
and :op1 ( live :arg0 i :duration ( temporal-quantity :unit year :quant 7 )  :arg1 ( taste :arg1 ( and :op1 food :op2 ( feel :arg1 restaurant )  )  )  )
and :op1 ( live :arg0 i :duration ( temporal-quantity :unit year :quant 7 )  :arg1 ( taste :arg1 ( and :op1 food :op2 ( feel :arg1 restaurant )  )  )  )
and :op1 ( live :arg0 i :duration ( temporal-quantity :unit year :quant 7 )  :arg1 ( taste :arg1 ( and :op1 food :op2 ( feel :arg1 restaurant )  )  )  )
have :arg0 they :arg1 ( it :quant all )  :arg1 ( and :op2 food :op2 service :op1 ( monetary-quantity :arg2-of ( price :degree great )  )  )
have :arg0 they :arg1 ( it :quant all )  :arg1 ( and :op2 food :op2 service :op1 ( monetary-quantity :arg2-of ( price :degree great )  )  )
have :arg0 they :arg1 ( it :quant all )  :arg1 ( and :op2 food :op2 service :op1 ( monetary-quantity :arg2-of ( price :degree great )  )  )
and :op1 ( great :domain flavor )  :op2 ( extensive :arg1 flavor :arg0 menu )
and :op1 ( great :domain flavor )  :op2 ( extensive :arg1 flavor :arg0 menu )
and :op1 ( amaze :arg0 food :arg1 ambience )  :op2 ( and :op1 ( attentive :domain service )  :op2 personable )
and :op1 ( amaze :arg0 food :arg1 ambience )  :op2 ( and :op1 ( attentive :domain service )  :op2 personable )
and :op1 ( amaze :arg0 food :arg1 ambience )  :op2 ( and :op1 ( attentive :domain service )  :op2 personable )
and :domain ( place :mod this )  :op1 ( interior :mod ( good :degree most :arg1-of ( see :location anywhere :medium burg )  )  )  :op2 ( impress :arg1 ( bring :arg0 you :location there )  )
and :domain ( place :mod this )  :op1 ( interior :mod ( good :degree most :arg1-of ( see :location anywhere :medium burg )  )  )  :op2 ( impress :arg1 ( bring :arg0 you :location there )  )
and :op1 ( consistent :domain food :duration ( multiple :op1 ( temporal-quantity :unit year )  )  )  :op2 ( let :arg1 you )
find :arg0 i :arg1 ( variety :consist-of ( plate :mod sashimus )  )  :arg1 ( and :op1 ( satisfy :null_edge yummy )  :op2 fresh )
and :op1 ( forget :arg1 ( read :arg0 you :arg3 ( bad :concession atmosphere :mod either )  )  )
couldn :arg0 we :arg1 ( carry-on :arg1 ( converse :time ( interrupt :arg1 we :manner routine :arg0 ( and :op1 waitress :op3 ( person :arg0-of serve )  )  :arg1 ( and :op1 ( ask :arg1 order )  :op2 ( hint :arg1 ( re :arg0-of ( take :arg1 ( time :quant ( much :degree too )  )  )  )  :arg1 ( person :arg1-of sit :arg1 we :arg2 amaze :arg1 we :mod just )  )  )  )  )  )
couldn :arg0 we :arg1 ( carry-on :arg1 ( converse :time ( interrupt :arg1 we :manner routine :arg0 ( and :op1 waitress :op3 ( person :arg0-of serve )  )  :arg1 ( and :op1 ( ask :arg1 order )  :op2 ( hint :arg1 ( re :arg0-of ( take :arg1 ( time :quant ( much :degree too )  )  )  )  :arg1 ( person :arg1-of sit :arg1 we :arg2 amaze :arg1 we :mod just )  )  )  )  )  )
get :frequency sometimes :arg0 i :arg1 ( and :op1 ( food :mod good )  :op2 service )
get :frequency sometimes :arg0 i :arg1 ( and :op1 ( food :mod good )  :op2 service )
place :domain it :location-of ( pay :arg3 ( and :op1 ( food :quant lot :mod mediocre )  :op2 noise :op2 ( chance :arg1 ( and :op2 ( folk :mod tunnel )  :arg1-of ( cause :arg0 ( bridge :arg0-of fellow )  )  )  )  )  )
place :domain it :location-of ( pay :arg3 ( and :op1 ( food :quant lot :mod mediocre )  :op2 noise :op2 ( chance :arg1 ( and :op2 ( folk :mod tunnel )  :arg1-of ( cause :arg0 ( bridge :arg0-of fellow )  )  )  )  )  )
come :time ( after :op1 ( complain :arg1 ( dish :mod chicken )  )  )  :arg1 manage :direction over :purpose ( tell :arg0 manage :arg1 ( and :op1 ( complain :polarity - :time ever :time before :null_edge ( know :arg0 we :mod just :arg1 suppose )  )  )  )
come :time ( after :op1 ( complain :arg1 ( dish :mod chicken )  )  )  :arg1 manage :direction over :purpose ( tell :arg0 manage :arg1 ( and :op1 ( complain :polarity - :time ever :time before :null_edge ( know :arg0 we :mod just :arg1 suppose )  )  )  )
come :time ( after :op1 ( complain :arg1 ( dish :mod chicken )  )  )  :arg1 manage :direction over :purpose ( tell :arg0 manage :arg1 ( and :op1 ( complain :polarity - :time ever :time before :null_edge ( know :arg0 we :mod just :arg1 suppose )  )  )  )
and :op1 ( spicy :domain food )  :op2 ( delicious :domain food )
go :purpose ( lunch :time late :mod weekday )
unable :arg1 ( tear :arg0 bartender :arg1 ( person :arg0-of ( have-rel-role :arg2 friend :location bar )  )  )
unable :arg1 ( tear :arg0 bartender :arg1 ( person :arg0-of ( have-rel-role :arg2 friend :location bar )  )  )
waste :mod anyways :arg0 i :arg1 time :domain ( try :arg1 ( find :arg1 something :arg1 ( go :arg4 ( across :op1 street )  :arg4 tamarus )  )  :arg0-of ( possible :arg1 ( re :arg0 you :location ( neighborhood :poss you :domain ( eat :arg1 ( food :mod good )  )  )  )  )  )
offer :arg0 dahkin :mod also :arg0 prix :arg1 ( and :op1 lunch :op2 buffet )
offer :arg0 dahkin :mod also :arg0 prix :arg1 ( and :op1 lunch :op2 buffet )
time :domain this :mod frist :location cafe
say :arg1 ( and :op1 s :op2 i )  :arg1 ( and :op1 food :op2 service )
time :domain this :mod frist :location cafe
say :arg1 ( and :op1 s :op2 i )  :arg1 ( and :op1 food :op2 service )
and :null_edge ( null_tag :time ( date-entity :mod double )  )  :op2 ( person :arg0-of ( friend :arg1 ( person :arg0-of ( have-rel-role :arg2 girlfriend :arg3 ( and :op1 ( thing :arg1-of drink :quant few )  :op2 appetizer )  )  )  )  )
and :null_edge ( null_tag :time ( date-entity :mod double )  )  :op2 ( person :arg0-of ( friend :arg1 ( person :arg0-of ( have-rel-role :arg2 girlfriend :arg3 ( and :op1 ( thing :arg1-of drink :quant few )  :op2 appetizer )  )  )  )  )
grab :arg0 ( place :mod great )  :arg1 ( bagel :poss place :arg1-of hot )  :manner ( way :poss place :instrument-of work )
s :arg1 ( and :op1 ( take :arg1 ( chicken :mod leftover )  )  :op2 ( pour :arg1 oil )  :op2 ( sprinkle :arg1 ( powder :mod pepper )  :arg1 it :arg1 ( and :op1 ( translucent :domain sauce )  :op2 red )  )  )
s :arg1 ( and :op1 ( take :arg1 ( chicken :mod leftover )  )  :op2 ( pour :arg1 oil )  :op2 ( sprinkle :arg1 ( powder :mod pepper )  :arg1 it :arg1 ( and :op1 ( translucent :domain sauce )  :op2 red )  )  )
s :arg1 ( and :op1 ( take :arg1 ( chicken :mod leftover )  )  :op2 ( pour :arg1 oil )  :op2 ( sprinkle :arg1 ( powder :mod pepper )  :arg1 it :arg1 ( and :op1 ( translucent :domain sauce )  :op2 red )  )  )
s :arg1 ( and :op1 ( take :arg1 ( chicken :mod leftover )  )  :op2 ( pour :arg1 oil )  :op2 ( sprinkle :arg1 ( powder :mod pepper )  :arg1 it :arg1 ( and :op1 ( translucent :domain sauce )  :op2 red )  )  )
think :arg0 one :arg0 we :arg1 ( get :arg0 one :arg1 we :arg1 ( or :op1 apologize :op2 ( drink :mod complimentary )  )  :arg1 ( wouldn :arg1-of instead-of :arg0 we :arg1 ( waiter :mod snobby )  )  :arg1 ( and :op2 ( give :arg1 lip :condition ( ask :arg0 we :arg1 ( do :arg1 so )  )  )  :op1 ( multi-sentence :arg2 ( take :mod even :beneficiary ( temporal-quantity :unit minute :quant 15 )  )  )  )  )
think :arg0 one :arg0 we :arg1 ( get :arg0 one :arg1 we :arg1 ( or :op1 apologize :op2 ( drink :mod complimentary )  )  :arg1 ( wouldn :arg1-of instead-of :arg0 we :arg1 ( waiter :mod snobby )  )  :arg1 ( and :op2 ( give :arg1 lip :condition ( ask :arg0 we :arg1 ( do :arg1 so )  )  )  :op1 ( multi-sentence :arg2 ( take :mod even :beneficiary ( temporal-quantity :unit minute :quant 15 )  )  )  )  )
cause :arg1 ( give :arg0 we :mod actual )  :arg0 ( feel :arg1 ( and :op1 we :op1 ( food :mod mediocre )  :op2 service :op1 ( percentage-entity :value 10 )  )  :arg0 we :degree total :arg1 rip )
cause :arg1 ( give :arg0 we :mod actual )  :arg0 ( feel :arg1 ( and :op1 we :op1 ( food :mod mediocre )  :op2 service :op1 ( percentage-entity :value 10 )  )  :arg0 we :degree total :arg1 rip )
cause :arg1 ( give :arg0 we :mod actual )  :arg0 ( feel :arg1 ( and :op1 we :op1 ( food :mod mediocre )  :op2 service :op1 ( percentage-entity :value 10 )  )  :arg0 we :degree total :arg1 rip )
look :arg0 we :direction forward :arg1 ( sangrium :consist-of ( glass :arg1-of nice )  )  :time ( arrive :arg1 we )
recommand :arg0 i :degree high :arg1 ( request :arg0 i :arg1 table :arg1 window )
disappoint :time ( enjoy :arg0 we :arg1 food )  :arg1 we :degree high :arg0 ( and :op1 ( serve :mod poor )  :op2 ( service :domain waiter :arg2 ( and :op1 ( competent :degree quite )  :op2 slow )  )  :op2 ( lack :arg1 remorse )  )
disappoint :time ( enjoy :arg0 we :arg1 food )  :arg1 we :degree high :arg0 ( and :op1 ( serve :mod poor )  :op2 ( service :domain waiter :arg2 ( and :op1 ( competent :degree quite )  :op2 slow )  )  :op2 ( lack :arg1 remorse )  )
disappoint :time ( enjoy :arg0 we :arg1 food )  :arg1 we :degree high :arg0 ( and :op1 ( serve :mod poor )  :op2 ( service :domain waiter :arg2 ( and :op1 ( competent :degree quite )  :op2 slow )  )  :op2 ( lack :arg1 remorse )  )
flower :domain service :arg1-of bright :location garden
and :op2 ( disappoint :arg1 we :arg1 grocery :arg1 ( item :domain menu )  )
contrast :arg2 ( good :domain food :degree very :degree too :arg2 ( part :mod ( food :arg1-of ( regular :mod ( just :degree most )  )  :mod ( nothing :arg1-of special )  )  )  )
contrast :arg2 ( good :domain food :degree very :degree too :arg2 ( part :mod ( food :arg1-of ( regular :mod ( just :degree most )  )  :mod ( nothing :arg1-of special )  )  )  )
and :op2 ( touch-up :degree more )  :op1 ( heat :purpose contrast )  :op2 ( good :degree very :mod indeed )
see :arg1 try :arg0 pad :arg1 ew :arg1 ( recommend :arg0 ( reviewer :mod last )  )  :arg1 ( dish :quant 1 :arg1-of favor )
see :arg1 try :arg0 pad :arg1 ew :arg1 ( recommend :arg0 ( reviewer :mod last )  )  :arg1 ( dish :quant 1 :arg1-of favor )
eat :arg0 we :location ( patio :mod back :null_edge ( and :op1 cool :op1 ( hear :arg1 music :arg2 there )  )  )
eat :arg0 we :location ( patio :mod back :null_edge ( and :op1 cool :op1 ( hear :arg1 music :arg2 there )  )  )
perfect :arg1 location
care :arg1 ( contrast :arg1 ( great :domain ( appetizer :mod guacamole :mod shrimp )  :degree really :domain ( filet :arg0 ( we :mod both )  :mod ( good :degree very )  )  :mod ( good :domain filet )  :arg1-of ( resemble :degree much :arg2 ( frite :arg1-of come-out )  )  )  )
care :arg1 ( contrast :arg1 ( great :domain ( appetizer :mod guacamole :mod shrimp )  :degree really :domain ( filet :arg0 ( we :mod both )  :mod ( good :degree very )  )  :mod ( good :domain filet )  :arg1-of ( resemble :degree much :arg2 ( frite :arg1-of come-out )  )  )  )
care :arg1 ( contrast :arg1 ( great :domain ( appetizer :mod guacamole :mod shrimp )  :degree really :domain ( filet :arg0 ( we :mod both )  :mod ( good :degree very )  )  :mod ( good :domain filet )  :arg1-of ( resemble :degree much :arg2 ( frite :arg1-of come-out )  )  )  )
care :arg1 ( contrast :arg1 ( great :domain ( appetizer :mod guacamole :mod shrimp )  :degree really :domain ( filet :arg0 ( we :mod both )  :mod ( good :degree very )  )  :mod ( good :domain filet )  :arg1-of ( resemble :degree much :arg2 ( frite :arg1-of come-out )  )  )  )
asbolute :null_edge ( lunch :arg1-of special )  :arg1 steal
fusion :name ( name :op1 asian :domain ( food :mod this )  )  :arg1 air
food :mod ( nothing :mod fancy )  :mod ( good :degree really )  :arg1-of ( thing :arg2-of price :arg1-of ( reasonable :degree pretty )  )
food :mod ( nothing :mod fancy )  :mod ( good :degree really )  :arg1-of ( thing :arg2-of price :arg1-of ( reasonable :degree pretty )  )
and :op1 ( excpetiona :arg1 ( pie :mod ( pot :mod chicken )  )  :arg1 ( and :op1 huge :op2 delictable :op3 ( warm :arg1 ( service :mod professional )  )  )  )
and :op1 ( excpetiona :arg1 ( pie :mod ( pot :mod chicken )  )  :arg1 ( and :op1 huge :op2 delictable :op3 ( warm :arg1 ( service :mod professional )  )  )  )
and :op1 ( excpetiona :arg1 ( pie :mod ( pot :mod chicken )  )  :arg1 ( and :op1 huge :op2 delictable :op3 ( warm :arg1 ( service :mod professional )  )  )  )
m :condition ( like :arg0 i :degree quite :arg1 ( and :op1 food :op2 ambience )  :arg0 i )  :arg0 i :arg1-of ( sure :mod quite )  :condition ( deserve :arg0 they :mod really :arg1 ( rate :arg1 they :mod michelin :arg1-of ( display :manner ( prooudly :degree so )  :arg2 window )  )  )
m :condition ( like :arg0 i :degree quite :arg1 ( and :op1 food :op2 ambience )  :arg0 i )  :arg0 i :arg1-of ( sure :mod quite )  :condition ( deserve :arg0 they :mod really :arg1 ( rate :arg1 they :mod michelin :arg1-of ( display :manner ( prooudly :degree so )  :arg2 window )  )  )
and :op1 ( once :arg1 ( dinner :location brunch )  )
and :op1 ( once :arg1 ( dinner :location brunch )  )
thing :arg2-of price
enter :time moment :arg0 you :arg1-of ( fantastic :arg1 ( moment :arg0-of ( walk :arg0 you :arg1 ( and :op1 friendly :op2 helpful :op2 staff )  :mod just )  )  )
and :op1 ( good :domain service )  :op2 ( wonderful :domain food )
and :op1 ( good :domain service )  :op2 ( wonderful :domain food )
and :domain she :op2 ( person :op 10 )  :op1 ( serve :arg1-of excellent )  :op2 advise
contrast :arg1 ( noisy :domain restaurant :degree bit :domain ( something :domain that :arg1-of ( overlook :arg1-of possible :arg1 ( and :op1 sit :op2 ( enjoy :arg1 ( meal :mod great )  )  )  )  )  )
fan :arg1 ( food :mod spicy :mod ethnic )  :arg2-of ( include :arg2 ( country :name ( name :op1 indian )  )  )  :arg0-of ( have-rel-role :arg2 friend :arg1 i :null_edge long )  :topic ( place :mod this )
and :op1 ( say :arg0 i :arg1 ( snack :arg1-of cause :time ( set :null_edge really :arg2 ( dinner :mod proper )  )  )  )
and :op1 ( say :arg0 i :arg1 ( snack :arg1-of cause :time ( set :null_edge really :arg2 ( dinner :mod proper )  )  )  )
make :arg1 ( place :arg0 ( quality :poss food :poss ( restaurant :mod this :arg1-of ( accompany :arg0 ( jazz :arg1-of fantastic :mod live )  )  )  )  :mod this )  :arg1 ( person :op 10 :arg1-of perfect )
make :arg1 ( place :arg0 ( quality :poss food :poss ( restaurant :mod this :arg1-of ( accompany :arg0 ( jazz :arg1-of fantastic :mod live )  )  )  )  :mod this )  :arg1 ( person :op 10 :arg1-of perfect )
good :domain ( eat :arg0 i :null_edge ( many :op1 saul )  )  :domain food :time always :manner consistent :degree outrageously
ask :time always :arg1 bartender :arg1 ( beer :mod seasonal )
xconcept
xconcept
ask :time always :arg1 bartender :arg1 ( beer :mod seasonal )
xconcept
xconcept
enjoy :time visit :arg0 you :arg0 ll :arg1 ( and :op1 ambiance :op1 ( sq :mod time )  )
and :null_edge we :time ( way :poss we :null_edge nj )  :op2 ( figure-out :arg0 ny :arg0 we :purpose ( grab :arg2 ny :arg1 ( food :quant some )  )  )
expect :arg1 ( and :op1 service :op2 food )  :arg0 ( one :mod any )  :arg1 ( spend :arg1 ( type :mod money )  )
expect :arg1 ( and :op1 service :op2 food )  :arg0 ( one :mod any )  :arg1 ( spend :arg1 ( type :mod money )  )
feel :arg1 love :arg0 atmosphere :null_edge paris
good :arg1 ( course :mod every )  :compared-to next
and :op1 ( helpful :arg0 ( person :arg2-of staff )  :mod incredible )  :op2 attentive
work :arg1 ( and :op1 presentation :op2 service :op1 thing )  :arg1 ( show :mod then :mod this :mod magic )
work :arg1 ( person :arg0-of cook :mod apparent :mod good )  :time then
good :domain yellowtail :mod particular
eat :arg0 i :arg1 ( and :op1 ( oreganta :mod clam )  :op2 ( salad :mod spectacular )  )  :accompanier ( and :op1 ( cucumber :arg1-of ( marinate :arg1-of perfect )  )  :op2 ( tomato :arg1-of marinate )  )  :arg1 ( and :quant lot :op1 shrimp :op2 basil )
eat :arg0 i :arg1 ( and :op1 ( oreganta :mod clam )  :op2 ( salad :mod spectacular )  )  :accompanier ( and :op1 ( cucumber :arg1-of ( marinate :arg1-of perfect )  )  :op2 ( tomato :arg1-of marinate )  )  :arg1 ( and :quant lot :op1 shrimp :op2 basil )
lack :arg0 ( change :arg1 menu :null_edge ( small :quant portion :mod even )  :time before :arg1 ( dish :mod lentil :null_edge beyond )  )  :arg0 ( dish :mod basmatus :mod rice )  :arg1 flavor
lack :arg0 ( change :arg1 menu :null_edge ( small :quant portion :mod even )  :time before :arg1 ( dish :mod lentil :null_edge beyond )  )  :arg0 ( dish :mod basmatus :mod rice )  :arg1 flavor
lack :arg0 ( change :arg1 menu :null_edge ( small :quant portion :mod even )  :time before :arg1 ( dish :mod lentil :null_edge beyond )  )  :arg0 ( dish :mod basmatus :mod rice )  :arg1 flavor
lack :arg0 ( change :arg1 menu :null_edge ( small :quant portion :mod even )  :time before :arg1 ( dish :mod lentil :null_edge beyond )  )  :arg0 ( dish :mod basmatus :mod rice )  :arg1 flavor
lack :arg0 ( change :arg1 menu :null_edge ( small :quant portion :mod even )  :time before :arg1 ( dish :mod lentil :null_edge beyond )  )  :arg0 ( dish :mod basmatus :mod rice )  :arg1 flavor
and :op1 ( sleek :domain spice :prep-with ( menu :arg2-of ( hurt :arg1 wallet )  )  )  :op2 ( modern :domain spice )  :op2 cool
and :op1 ( feature :arg0 patroon )  :op2 ( bar :arg1-of nice :consist-of cigar )  :op2 ( have :arg0 patroon :arg1 ( staff :mod great )  )
and :op1 ( feature :arg0 patroon )  :op2 ( bar :arg1-of nice :consist-of cigar )  :op2 ( have :arg0 patroon :arg1 ( staff :mod great )  )
and :op1 afford :op2 excellent :op1 ( ambient :degree very )
rival :null_edge ( important :degree more )  :arg0 sushi :arg1 ( good :degree most :location tokyo )
cheescake :arg0 i :arg1-of ( resemble :arg2 this )
person :arg0-of work :arg0-of ( have :null_edge ( wait :mod almost :duration ( temporal-quantity :unit hour )  :arg2 deliver :arg2 ( discover :mod only :arg1 ( get :arg0 they :arg1 ( order :arg0 they )  )  )  )  )
go :time ( date-entity :mod ( entertain :arg2 ( guest :mod town )  )  )
rave :arg1 ambience
and :op1 ( meet :arg1 drink :arg1 ( walk :manner ( famish :mod ( angel :name thai )  )  )  :arg1 ( person :quant some :arg0-of ( have-rel-role :arg2 friend )  )  )
sashimus :mod fluke :arg1-of ( drizzle :prep-with jalapeno )  :arg1 ( oil :mod lime :mod olive :source ( fruit :mod ( oil :arg0-of ( highlight :manner nice :arg1 ( sweetness :poss fish )  )  )  )  )
sashimus :mod fluke :arg1-of ( drizzle :prep-with jalapeno )  :arg1 ( oil :mod lime :mod olive :source ( fruit :mod ( oil :arg0-of ( highlight :manner nice :arg1 ( sweetness :poss fish )  )  )  )  )
sashimus :mod fluke :arg1-of ( drizzle :prep-with jalapeno )  :arg1 ( oil :mod lime :mod olive :source ( fruit :mod ( oil :arg0-of ( highlight :manner nice :arg1 ( sweetness :poss fish )  )  )  )  )
sashimus :mod fluke :arg1-of ( drizzle :prep-with jalapeno )  :arg1 ( oil :mod lime :mod olive :source ( fruit :mod ( oil :arg0-of ( highlight :manner nice :arg1 ( sweetness :poss fish )  )  )  )  )
experience :degree great :mod sushi
xconcept :x ( look :arg0 you :null_edge ( null_tag :arg1 you :arg1 ( go :arg4 ( frisco :null_edge del )  )  )  :arg1 ( meal :mod great :arg1 ( thing :arg2-of price :mod decency )  )  )
xconcept :x ( look :arg0 you :null_edge ( null_tag :arg1 you :arg1 ( go :arg4 ( frisco :null_edge del )  )  )  :arg1 ( meal :mod great :arg1 ( thing :arg2-of price :mod decency )  )  )
charge :arg0 they :null_edge 6
rice :quant 00
poivre :mod ( au :mod steak )  :arg1-of ( bad :arg0-of ( have :arg0 i )  )
and :op1 ( country :name ( name :op1 japanese )  :arg0 ( and :op1 ( person :arg0-of own )  :op2 ( person :arg2-of staff )  :mod all )  :mod well )  :op2 ( add :arg2 ( ambiance :mod entire )  )
and :op1 ( country :name ( name :op1 japanese )  :arg0 ( and :op1 ( person :arg0-of own )  :op2 ( person :arg2-of staff )  :mod all )  :mod well )  :op2 ( add :arg2 ( ambiance :mod entire )  )
and :op1 ( country :name ( name :op1 japanese )  :arg0 ( and :op1 ( person :arg0-of own )  :op2 ( person :arg2-of staff )  :mod all )  :mod well )  :op2 ( add :arg2 ( ambiance :mod entire )  )
try :arg1 ( and :op1 congee :op2 donut )  :arg1-of ( deep :arg1 ( dough :mod fried :arg1-of ( call :arg1 ( and :op1 ( soh :mod ( ley :mod ( organization :name ( name :op1 ow )  )  )  )  :op2 delicious :op3 ( bread :arg1-of sweet :mod tasting )  )  )  )  )
try :arg1 ( and :op1 congee :op2 donut )  :arg1-of ( deep :arg1 ( dough :mod fried :arg1-of ( call :arg1 ( and :op1 ( soh :mod ( ley :mod ( organization :name ( name :op1 ow )  )  )  )  :op2 delicious :op3 ( bread :arg1-of sweet :mod tasting )  )  )  )  )
try :arg1 ( and :op1 congee :op2 donut )  :arg1-of ( deep :arg1 ( dough :mod fried :arg1-of ( call :arg1 ( and :op1 ( soh :mod ( ley :mod ( organization :name ( name :op1 ow )  )  )  )  :op2 delicious :op3 ( bread :arg1-of sweet :mod tasting )  )  )  )  )
and :op2 ( possible :arg1 ( situate :arg1 table :manner close )  )  :op2 service :op1 ( overcompensate :arg1 ( quality :mod ( candle :domain ( food :null_edge null_tag )  )  )  )
and :op2 ( possible :arg1 ( situate :arg1 table :manner close )  )  :op2 service :op1 ( overcompensate :arg1 ( quality :mod ( candle :domain ( food :null_edge null_tag )  )  )  )
and :op2 ( possible :arg1 ( situate :arg1 table :manner close )  )  :op2 service :op1 ( overcompensate :arg1 ( quality :mod ( candle :domain ( food :null_edge null_tag )  )  )  )
and :op2 ( possible :arg1 ( situate :arg1 table :manner close )  )  :op2 service :op1 ( overcompensate :arg1 ( quality :mod ( candle :domain ( food :null_edge null_tag )  )  )  )
and :op1 ( delicious :domain food )  :op2 ( and :op1 ( helpful :arg0 waiter :mod incredible :arg1 ( consider :arg0 waiter :arg1 ( one :domain we :mod only :location there :duration ( temporal-quantity :unit hour )  )  )  )  :op2 attentive )
and :op1 ( delicious :domain food )  :op2 ( and :op1 ( helpful :arg0 waiter :mod incredible :arg1 ( consider :arg0 waiter :arg1 ( one :domain we :mod only :location there :duration ( temporal-quantity :unit hour )  )  )  )  :op2 attentive )
and :op1 ( feel :arg2 ( caviar :mod spectacular :arg4 ( waitstaff :mod hospitable )  )  :arg0 i :arg2 royalty )  :op2 enjoy
and :op1 ( feel :arg2 ( caviar :mod spectacular :arg4 ( waitstaff :mod hospitable )  )  :arg0 i :arg2 royalty )  :op2 enjoy
xconcept :x ( consider :arg1 ( extreme :domain ( food :mod this )  :arg2 ( side :mod upper :mod east :mod reside )  )  :concession ( dull :duration ( rest :arg1-of ( eat :mod actual :arg1 ( food :mod ethnic )  )  )  :null_edge this :mod simple )  )  :x contrast
contrast :arg1 ( empty :domain place :degree real :arg1-of ( cause :arg0 this :arg1 ( open :time first :arg0 ( person :name ( name :op1 sunday )  )  :time ever )  )  )
and :op1 ( exceed :arg0 ( place :mod this :mod little )  :mod definite :arg1 expect )  :op2 ( get :arg0 place :arg0 you :arg1-of sure :arg1 ( food :quant lot :source money )  )
and :op1 ( exceed :arg0 ( place :mod this :mod little )  :mod definite :arg1 expect )  :op2 ( get :arg0 place :arg0 you :arg1-of sure :arg1 ( food :quant lot :source money )  )
service :mod ( impeccable :domain ( ambience :arg1-of delight )  )
service :mod ( impeccable :domain ( ambience :arg1-of delight )  )
thank :arg1 ( and :op1 ( excellent :arg1 service )  :op2 ( work :arg0 ac :manner ( well :degree very )  :mod too )  )  :arg1 god :arg2 hot
xconcept
thank :arg1 ( and :op1 ( excellent :arg1 service )  :op2 ( work :arg0 ac :manner ( well :degree very )  :mod too )  )  :arg1 god :arg2 hot
xconcept
sense :arg0 you :arg1 ( care :arg0 you :arg0 ( and :op1 restaurant :op2 experience )  )  :arg1 ( and :op2 ( nice :arg1 that :degree very )  )
and :op1 ( delicious :domain both )  :op1 ( friendly :domain ( person :arg0-of cook )  )  :op2 ( will :arg0 person :arg1 ( and :op1 ( take :arg1 moment )  :op2 ( speak :arg2 you )  :op2 ( shake :arg1 and )  )  )
order :arg0 ( have-rel-role :arg2 friend )  :arg1 ( some :arg1-of ( include :arg2 ( roll :arg1-of special :mod sushi :arg1 ( and :op2 ( presentation :arg1-of excellent )  :op2 ( taste :null_edge great )  )  )  )  )
differ :condition ( warn :arg2 ( menu :mod dinner )  :arg1 ( and :op3 sit :op2 ( take :arg1 price )  )  )
differ :condition ( warn :arg2 ( menu :mod dinner )  :arg1 ( and :op3 sit :op2 ( take :arg1 price )  )  )
and :op1 ( accommodate :arg0 ( person :arg2-of staff )  )  :op2 ( delicious :domain food :degree absolute )  :op2 lovely
and :op1 ( accommodate :arg0 ( person :arg2-of staff )  )  :op2 ( delicious :domain food :degree absolute )  :op2 lovely
and :op1 ( accommodate :arg0 ( person :arg2-of staff )  )  :op2 ( delicious :domain food :degree absolute )  :op2 lovely
wouldn :null_edge ( fry :arg1 ( pancake :domain pick :mod scallion :domain ( chicken :mod guizhou )  :mod ( style :mod shredded :mod ( family :mod squid )  :domain ( favor :arg1-of personal )  )  :mod ( shell :mod sichuan :mod spicy :arg1-of soft )  :domain ( fish :mod shuizhu )  )  :arg1 ( juice :mod vegetable :arg1 ( and :op1 ( special :degree very )  :op2 tasty )  )  )  :null_edge ( one :mod this :quant-of ( fan :mod hardcore :mod sichuan :mod food )  )  :arg0 i :null_edge ( t :null_edge ( recommend :condition ( spicy :degree very )  :arg2 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  )
wouldn :null_edge ( fry :arg1 ( pancake :domain pick :mod scallion :domain ( chicken :mod guizhou )  :mod ( style :mod shredded :mod ( family :mod squid )  :domain ( favor :arg1-of personal )  )  :mod ( shell :mod sichuan :mod spicy :arg1-of soft )  :domain ( fish :mod shuizhu )  )  :arg1 ( juice :mod vegetable :arg1 ( and :op1 ( special :degree very )  :op2 tasty )  )  )  :null_edge ( one :mod this :quant-of ( fan :mod hardcore :mod sichuan :mod food )  )  :arg0 i :null_edge ( t :null_edge ( recommend :condition ( spicy :degree very )  :arg2 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  )
wouldn :null_edge ( fry :arg1 ( pancake :domain pick :mod scallion :domain ( chicken :mod guizhou )  :mod ( style :mod shredded :mod ( family :mod squid )  :domain ( favor :arg1-of personal )  )  :mod ( shell :mod sichuan :mod spicy :arg1-of soft )  :domain ( fish :mod shuizhu )  )  :arg1 ( juice :mod vegetable :arg1 ( and :op1 ( special :degree very )  :op2 tasty )  )  )  :null_edge ( one :mod this :quant-of ( fan :mod hardcore :mod sichuan :mod food )  )  :arg0 i :null_edge ( t :null_edge ( recommend :condition ( spicy :degree very )  :arg2 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  )
wouldn :null_edge ( fry :arg1 ( pancake :domain pick :mod scallion :domain ( chicken :mod guizhou )  :mod ( style :mod shredded :mod ( family :mod squid )  :domain ( favor :arg1-of personal )  )  :mod ( shell :mod sichuan :mod spicy :arg1-of soft )  :domain ( fish :mod shuizhu )  )  :arg1 ( juice :mod vegetable :arg1 ( and :op1 ( special :degree very )  :op2 tasty )  )  )  :null_edge ( one :mod this :quant-of ( fan :mod hardcore :mod sichuan :mod food )  )  :arg0 i :null_edge ( t :null_edge ( recommend :condition ( spicy :degree very )  :arg2 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  )
wouldn :null_edge ( fry :arg1 ( pancake :domain pick :mod scallion :domain ( chicken :mod guizhou )  :mod ( style :mod shredded :mod ( family :mod squid )  :domain ( favor :arg1-of personal )  )  :mod ( shell :mod sichuan :mod spicy :arg1-of soft )  :domain ( fish :mod shuizhu )  )  :arg1 ( juice :mod vegetable :arg1 ( and :op1 ( special :degree very )  :op2 tasty )  )  )  :null_edge ( one :mod this :quant-of ( fan :mod hardcore :mod sichuan :mod food )  )  :arg0 i :null_edge ( t :null_edge ( recommend :condition ( spicy :degree very )  :arg2 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  )
wouldn :null_edge ( fry :arg1 ( pancake :domain pick :mod scallion :domain ( chicken :mod guizhou )  :mod ( style :mod shredded :mod ( family :mod squid )  :domain ( favor :arg1-of personal )  )  :mod ( shell :mod sichuan :mod spicy :arg1-of soft )  :domain ( fish :mod shuizhu )  )  :arg1 ( juice :mod vegetable :arg1 ( and :op1 ( special :degree very )  :op2 tasty )  )  )  :null_edge ( one :mod this :quant-of ( fan :mod hardcore :mod sichuan :mod food )  )  :arg0 i :null_edge ( t :null_edge ( recommend :condition ( spicy :degree very )  :arg2 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  )
wouldn :null_edge ( fry :arg1 ( pancake :domain pick :mod scallion :domain ( chicken :mod guizhou )  :mod ( style :mod shredded :mod ( family :mod squid )  :domain ( favor :arg1-of personal )  )  :mod ( shell :mod sichuan :mod spicy :arg1-of soft )  :domain ( fish :mod shuizhu )  )  :arg1 ( juice :mod vegetable :arg1 ( and :op1 ( special :degree very )  :op2 tasty )  )  )  :null_edge ( one :mod this :quant-of ( fan :mod hardcore :mod sichuan :mod food )  )  :arg0 i :null_edge ( t :null_edge ( recommend :condition ( spicy :degree very )  :arg2 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  )
smell :condition ( stuff :prep-with ( vegetable :mod old :mod canned :example ( calzone :arg2 ( mushroom :mod spinach )  )  )  )
smell :condition ( stuff :prep-with ( vegetable :mod old :mod canned :example ( calzone :arg2 ( mushroom :mod spinach )  )  )  )
go :arg0 3 :arg4 mare :arg1-of ( cause :arg1 ( celebrate :arg1 birthday :arg1 ( anticipate :arg0 3 :arg1 ( food :mod great )  )  )  )
deal :mod great :arg2 ( and :op1 ( oyster :quant 6 :mod ( point :mod blue )  :arg1 ( or :op1 ( beer :mod wine )  :op1 glass )  )  )
deal :mod great :arg2 ( and :op1 ( oyster :quant 6 :mod ( point :mod blue )  :arg1 ( or :op1 ( beer :mod wine )  :op1 glass )  )  )
deal :mod great :arg2 ( and :op1 ( oyster :quant 6 :mod ( point :mod blue )  :arg1 ( or :op1 ( beer :mod wine )  :op1 glass )  )  )
like :arg0 i :mod really :arg1 ( dish :mod noodle :arg1-of ( compare :arg2 ( dish :path ( avenue :mod rice )  :mod ( person :name ( name :op1 green )  )  :arg1-of curry )  )  )
like :arg0 i :mod really :arg1 ( dish :mod noodle :arg1-of ( compare :arg2 ( dish :path ( avenue :mod rice )  :mod ( person :name ( name :op1 green )  )  :arg1-of curry )  )  )
contrast :arg1 ( price :arg1-of ( high :arg1 about :arg0-of ( cause :arg0 whatever )  )  )
xconcept :x ( and :op2 ( and :op1 ( new :domain i :degree relative :arg2 area )  :op2 ( try :arg0 i :arg1 ( pick-up :arg1 bgel :arg1 ( government-organization :name ( name :op1 2nd )  )  )  )  :op2 ( think :arg0 i :arg1 ( overate :arg1 food :arg1 ( and :op1 ( side :mod pricey )  )  )  )  )  )  :x ( and :op2 ( disappoint :arg1 i :arg1 serve )  )
xconcept :x ( and :op2 ( and :op1 ( new :domain i :degree relative :arg2 area )  :op2 ( try :arg0 i :arg1 ( pick-up :arg1 bgel :arg1 ( government-organization :name ( name :op1 2nd )  )  )  )  :op2 ( think :arg0 i :arg1 ( overate :arg1 food :arg1 ( and :op1 ( side :mod pricey )  )  )  )  )  )  :x ( and :op2 ( disappoint :arg1 i :arg1 serve )  )
and :op1 ( atmoshere :mod great )  :op2 ( worth :degree ( bit :mod every )  )
and :op1 ( good :domain ( roll :mod spicy :mod tuna )  :mod ( usual :polarity - )  :domain ( share :arg1 ( appetizer :domain ( shrimp :mod rock )  :mod great )  )  )
and :op1 ( good :domain ( roll :mod spicy :mod tuna )  :mod ( usual :polarity - )  :domain ( share :arg1 ( appetizer :domain ( shrimp :mod rock )  :mod great )  )  )
and :op1 ( good :domain ( roll :mod spicy :mod tuna )  :mod ( usual :polarity - )  :domain ( share :arg1 ( appetizer :domain ( shrimp :mod rock )  :mod great )  )  )
and :op1 ( know :arg0 ( person :arg2-of staff )  )  :op2 ( full :arg2 personality )
staff :mod great
complain :mod only :arg1 ( like :arg1 ( worry :arg1 ( find :arg1 ( seat :arg1-of ( cost :arg2 average :arg1 ( meal :quant 15 )  )  )  )  )  )
complain :mod only :arg1 ( like :arg1 ( worry :arg1 ( find :arg1 ( seat :arg1-of ( cost :arg2 average :arg1 ( meal :quant 15 )  )  )  )  )  )
complain :mod only :arg1 ( like :arg1 ( worry :arg1 ( find :arg1 ( seat :arg1-of ( cost :arg2 average :arg1 ( meal :quant 15 )  )  )  )  )  )
have :null_edge ( finish :arg1 ( experience :mod such :arg1-of delight :mod dinner )  )  :arg0 you :arg1 dessert :arg1 ( pudding :mod especially :mod white :mod ( bread :mod chocolate )  :topic ( and :op1 gelato :op2 ( chocolate :arg1-of hot )  )  )
have :null_edge ( finish :arg1 ( experience :mod such :arg1-of delight :mod dinner )  )  :arg0 you :arg1 dessert :arg1 ( pudding :mod especially :mod white :mod ( bread :mod chocolate )  :topic ( and :op1 gelato :op2 ( chocolate :arg1-of hot )  )  )
have :null_edge ( finish :arg1 ( experience :mod such :arg1-of delight :mod dinner )  )  :arg0 you :arg1 dessert :arg1 ( pudding :mod especially :mod white :mod ( bread :mod chocolate )  :topic ( and :op1 gelato :op2 ( chocolate :arg1-of hot )  )  )
dessert :domain ( tower :mod banana )  :mod amazing :mod well
dessert :domain ( tower :mod banana )  :mod amazing :mod well
atmosphere :arg1-of excellent :domain ( and :op2 ( dish :mod delicious )  :op1 good :op2 friendly :op2 service )
atmosphere :arg1-of excellent :domain ( and :op2 ( dish :mod delicious )  :op1 good :op2 friendly :op2 service )
atmosphere :arg1-of excellent :domain ( and :op2 ( dish :mod delicious )  :op1 good :op2 friendly :op2 service )
hang :arg0 ( place :arg1-of cool )  :arg1 ( and :quant couple :op1 ( thing :arg1-of drink :mod healthy )  :op2 dessert :op1 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )
hang :arg0 ( place :arg1-of cool )  :arg1 ( and :quant couple :op1 ( thing :arg1-of drink :mod healthy )  :op2 dessert :op1 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )
hang :arg0 ( place :arg1-of cool )  :arg1 ( and :quant couple :op1 ( thing :arg1-of drink :mod healthy )  :op2 dessert :op1 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )
vibe :mod great
like :arg0 i :arg1 ( food :poss mamoun )  :null_edge ( produce :arg1 ( side :mod side :arg1 ( roll :mod katus )  )  :arg1 roll :mod just :arg1 ( hand :arg1-of tastier :part-of food )  )
like :arg0 i :arg1 ( food :poss mamoun )  :null_edge ( produce :arg1 ( side :mod side :arg1 ( roll :mod katus )  )  :arg1 roll :mod just :arg1 ( hand :arg1-of tastier :part-of food )  )
contrast :arg1 ( slow :domain service :mod bit )  :arg2 ( harken :direction back :arg1 ( grow :duration ( temporal-quantity :unit year )  :arg2 ( and :op2 ( country :name ( name :op1 italy )  )  :op1 ( rush :arg1 thing )  :op3 ( sit :arg2 dinner :time ( night :mod all )  )  )  )  )
contrast :arg1 ( slow :domain service :mod bit )  :arg2 ( harken :direction back :arg1 ( grow :duration ( temporal-quantity :unit year )  :arg2 ( and :op2 ( country :name ( name :op1 italy )  )  :op1 ( rush :arg1 thing )  :op3 ( sit :arg2 dinner :time ( night :mod all )  )  )  )  )
contrast :arg1 ( slow :domain service :mod bit )  :arg2 ( harken :direction back :arg1 ( grow :duration ( temporal-quantity :unit year )  :arg2 ( and :op2 ( country :name ( name :op1 italy )  )  :op1 ( rush :arg1 thing )  :op3 ( sit :arg2 dinner :time ( night :mod all )  )  )  )  )
contrast :arg2 ( cake :null_edge ( wasn :mod that )  :arg2 ( ice :arg1 ( tiramisu :arg1-of ( person :arg0-of have-org-role :time ever )  )  )  )
contrast :arg2 ( cake :null_edge ( wasn :mod that )  :arg2 ( ice :arg1 ( tiramisu :arg1-of ( person :arg0-of have-org-role :time ever )  )  )  )
reasonable :arg1 ( and :op1 ( food :mod great )  :op2 price )  :degree very
reasonable :arg1 ( and :op1 ( food :mod great )  :op2 price )  :degree very
bar :arg1-of cool :arg2 ( and :op1 ( food :mod great :mod ( beer :quant ( mass-quantity :unit ton )  :arg1-of excellent )  )  )
bar :arg1-of cool :arg2 ( and :op1 ( food :mod great :mod ( beer :quant ( mass-quantity :unit ton )  :arg1-of excellent )  )  )
bar :arg1-of cool :arg2 ( and :op1 ( food :mod great :mod ( beer :quant ( mass-quantity :unit ton )  :arg1-of excellent )  )  )
sure :arg1 ( try :manner seasonal :arg1 ( special :arg1 ( and :op1 ( delicious :time always )  )  )  )
and :op2 ( and :op1 ( authentic :domain ambience )  :op2 ( relaxing :domain ambience )  :op2 ( receive :arg0 we :time always :arg1 ( service :arg2 ( and :op1 attentive :op2 prompt )  )  )  )
and :op2 ( and :op1 ( authentic :domain ambience )  :op2 ( relaxing :domain ambience )  :op2 ( receive :arg0 we :time always :arg1 ( service :arg2 ( and :op1 attentive :op2 prompt )  )  )  )
cuisine :null_edge ( authentic :null_edge fresh )  :location ( portion :mod substantial )  :mod ( country :name ( name :op1 france )  )
cuisine :null_edge ( authentic :null_edge fresh )  :location ( portion :mod substantial )  :mod ( country :name ( name :op1 france )  )
act :arg1 ( screw :arg1 drink )  :arg0 she :arg1-of ( put :arg0 she )
surprise :null_edge ( vegetarian :quant 1 :domain treasure )  :mod actual :degree quite :condition ( and :op1 delicious :op2 ( have :arg1 ( wintermelon :arg0-of ( cover :arg1 ( assortment :arg1 ( and :op1 ( mushroom :arg1-of fresh )  :op2 vegetable )  )  )  )  )  )
surprise :null_edge ( vegetarian :quant 1 :domain treasure )  :mod actual :degree quite :condition ( and :op1 delicious :op2 ( have :arg1 ( wintermelon :arg0-of ( cover :arg1 ( assortment :arg1 ( and :op1 ( mushroom :arg1-of fresh )  :op2 vegetable )  )  )  )  )  )
surprise :null_edge ( vegetarian :quant 1 :domain treasure )  :mod actual :degree quite :condition ( and :op1 delicious :op2 ( have :arg1 ( wintermelon :arg0-of ( cover :arg1 ( assortment :arg1 ( and :op1 ( mushroom :arg1-of fresh )  :op2 vegetable )  )  )  )  )  )
surprise :null_edge ( vegetarian :quant 1 :domain treasure )  :mod actual :degree quite :condition ( and :op1 delicious :op2 ( have :arg1 ( wintermelon :arg0-of ( cover :arg1 ( assortment :arg1 ( and :op1 ( mushroom :arg1-of fresh )  :op2 vegetable )  )  )  )  )  )
possible :arg1 ( go :arg4 ( dumpling :quant 5 :null_edge 1 )  :arg0 you :mod just :arg2 wrong )
contrast :arg1 ( expensive :domain pizza )
and :op2 ( and :op1 ( young :domain ( person :arg2-of staff )  :null_edge also )  :op2 energeic :op2 hot )
xconcept
xconcept
xconcept
know :manner ( good :mod even )  :arg0 they :arg1 ( cook :arg1 ( classic :example ( and :op2 ( au :mod steak )  :op2 onglet )  :mod ( country :name ( name :op1 france )  )  )  :manner ( or :op1 ( burn :arg1 die )  :op2 overcook )  )
know :manner ( good :mod even )  :arg0 they :arg1 ( cook :arg1 ( classic :example ( and :op2 ( au :mod steak )  :op2 onglet )  :mod ( country :name ( name :op1 france )  )  )  :manner ( or :op1 ( burn :arg1 die )  :op2 overcook )  )
decency :arg0 service :arg2 ( smooth :arg1 service :arg1-of ( expect :arg0 i :source ( place :accompanier ( and :op1 ( thing :arg2-of price )  :op2 reputation )  )  )  )
decency :arg0 service :arg2 ( smooth :arg1 service :arg1-of ( expect :arg0 i :source ( place :accompanier ( and :op1 ( thing :arg2-of price )  :op2 reputation )  )  )  )
visit :arg0 we :arg1 ( meal :arg1-of wonderful :location ( naple :quant 45 )  )  :arg1 nyc :time ( before :quant ( temporal-quantity :unit month )  )
good :arg2 drink
and :op1 ( food :mod great )  :op2 ( and :op2 ( and :op1 spinach :op2 corn )  :op1 dumpling :op2 ( curry :mod massamman )  )  :op2 ( service :arg1 ( and :op1 ( friendly :degree very )  :op2 ( nonsense :polarity - )  )  )  :op2 ( bathroom :arg1 ( and :op1 clean :op2 funky )  )
and :op1 ( food :mod great )  :op2 ( and :op2 ( and :op1 spinach :op2 corn )  :op1 dumpling :op2 ( curry :mod massamman )  )  :op2 ( service :arg1 ( and :op1 ( friendly :degree very )  :op2 ( nonsense :polarity - )  )  )  :op2 ( bathroom :arg1 ( and :op1 clean :op2 funky )  )
and :op1 ( food :mod great )  :op2 ( and :op2 ( and :op1 spinach :op2 corn )  :op1 dumpling :op2 ( curry :mod massamman )  )  :op2 ( service :arg1 ( and :op1 ( friendly :degree very )  :op2 ( nonsense :polarity - )  )  )  :op2 ( bathroom :arg1 ( and :op1 clean :op2 funky )  )
and :op1 ( food :mod great )  :op2 ( and :op2 ( and :op1 spinach :op2 corn )  :op1 dumpling :op2 ( curry :mod massamman )  )  :op2 ( service :arg1 ( and :op1 ( friendly :degree very )  :op2 ( nonsense :polarity - )  )  )  :op2 ( bathroom :arg1 ( and :op1 clean :op2 funky )  )
and :op1 ( food :mod great )  :op2 ( and :op2 ( and :op1 spinach :op2 corn )  :op1 dumpling :op2 ( curry :mod massamman )  )  :op2 ( service :arg1 ( and :op1 ( friendly :degree very )  :op2 ( nonsense :polarity - )  )  )  :op2 ( bathroom :arg1 ( and :op1 clean :op2 funky )  )
have :arg0 we :arg1 ( dinner :arg0 girl :time night :location here :duration ( temporal-quantity :unit week :mod restaurant )  )
dinner :arg0 i :location there :mod work :null_edge ( notice :arg0 ( colleague :source ( city :name ( name :op1 london )  )  )  :arg1 ( waterbug :mod ( large :degree very )  :arg1 ceiling )  )
dinner :arg0 i :location there :mod work :null_edge ( notice :arg0 ( colleague :source ( city :name ( name :op1 london )  )  )  :arg1 ( waterbug :mod ( large :degree very )  :arg1 ceiling )  )
and :op1 ( bland :arg0 ( and :op1 ( fun :mod chow )  :op2 ( see :condition-of chow )  )  :degree really )  :op2 oily
seat :arg1 ( reserve :mod even :time date-entity :time ( night :arg1-of same )  :arg2 dinnerbroker )  :arg1 we :location table :purpose ( view :mod ( good :degree most )  )
seat :arg1 ( reserve :mod even :time date-entity :time ( night :arg1-of same )  :arg2 dinnerbroker )  :arg1 we :location table :purpose ( view :mod ( good :degree most )  )
seat :arg1 ( reserve :mod even :time date-entity :time ( night :arg1-of same )  :arg2 dinnerbroker )  :arg1 we :location table :purpose ( view :mod ( good :degree most )  )
look :arg0 we :arg1 notice :arg1 ( table :quant some )  :arg1 ( pita :arg1-of ( instead-of :arg2 naan )  )
look :arg0 we :arg1 notice :arg1 ( table :quant some )  :arg1 ( pita :arg1-of ( instead-of :arg2 naan )  )
contrast :arg1 ( take :arg0 i :arg0 didn )  :arg1 ( look :arg1 ( menu :mod rest )  )  :arg2 ( fantastic :arg1 oyster )
contrast :arg1 ( take :arg0 i :arg0 didn )  :arg1 ( look :arg1 ( menu :mod rest )  )  :arg2 ( fantastic :arg1 oyster )
good :domain ( cheese-off :arg1-of grilled :location home )  :time afterwards
xconcept
xconcept
multi-sentence :snt2 ( service :mod ( great :degree great :domain food )  )
multi-sentence :snt2 ( service :mod ( great :degree great :domain food )  )
get :frequency sometimes :arg0 i :arg1 ( and :op1 ( food :arg1-of bad )  :op2 ( service :arg1-of bad )  :op1 ( get :frequency sometimes :arg1 ( service :mod good :arg1 ( and :op1 good :op2 bad )  )  )  )
get :frequency sometimes :arg0 i :arg1 ( and :op1 ( food :arg1-of bad )  :op2 ( service :arg1-of bad )  :op1 ( get :frequency sometimes :arg1 ( service :mod good :arg1 ( and :op1 good :op2 bad )  )  )  )
get :frequency sometimes :arg0 i :arg1 ( and :op1 ( food :arg1-of bad )  :op2 ( service :arg1-of bad )  :op1 ( get :frequency sometimes :arg1 ( service :mod good :arg1 ( and :op1 good :op2 bad )  )  )  )
get :frequency sometimes :arg0 i :arg1 ( and :op1 ( food :arg1-of bad )  :op2 ( service :arg1-of bad )  :op1 ( get :frequency sometimes :arg1 ( service :mod good :arg1 ( and :op1 good :op2 bad )  )  )  )
come :arg1 ( seat :arg1 we :time final :arg1 waitress )  :manner ( and :op1 1 :null_edge 2 )  :purpose check
come :arg1 ( seat :arg1 we :time final :arg1 waitress )  :manner ( and :op1 1 :null_edge 2 )  :purpose check
multi-sentence :snt1 ( eat :manner outside :time ( date-entity :season summer )  )  :arg1 ( feature :mod another :mod great :arg1 suan )
xconcept
xconcept
get :arg1 ( and :op1 ( restaurant :arg1-of perfect :arg2 ( ny :arg1 ( style :mod life )  )  )  :op1 ( design :arg1-of cool :arg1 ( and :op1 ( food :mod ( good :arg0-of ( look :arg0 ( and :op1 eat :op2 hang :op1 ( bar :mod pink )  )  )  )  )  :op2 lot )  )  :op2 drink )
get :arg1 ( and :op1 ( restaurant :arg1-of perfect :arg2 ( ny :arg1 ( style :mod life )  )  )  :op1 ( design :arg1-of cool :arg1 ( and :op1 ( food :mod ( good :arg0-of ( look :arg0 ( and :op1 eat :op2 hang :op1 ( bar :mod pink )  )  )  )  )  :op2 lot )  )  :op2 drink )
get :arg1 ( and :op1 ( restaurant :arg1-of perfect :arg2 ( ny :arg1 ( style :mod life )  )  )  :op1 ( design :arg1-of cool :arg1 ( and :op1 ( food :mod ( good :arg0-of ( look :arg0 ( and :op1 eat :op2 hang :op1 ( bar :mod pink )  )  )  )  )  :op2 lot )  )  :op2 drink )
get :arg1 ( and :op1 ( restaurant :arg1-of perfect :arg2 ( ny :arg1 ( style :mod life )  )  )  :op1 ( design :arg1-of cool :arg1 ( and :op1 ( food :mod ( good :arg0-of ( look :arg0 ( and :op1 eat :op2 hang :op1 ( bar :mod pink )  )  )  )  )  :op2 lot )  )  :op2 drink )
have :arg0 we :null_edge ( wait :arg2 bar :duration approximately )
love :time ( love :arg0 you :arg1 seafood )  :arg0 you :arg1 ( place :mod this )
love :time ( love :arg0 you :arg1 seafood )  :arg0 you :arg1 ( place :mod this )
service :mod good :mod fast
charge :arg0 they :arg2 ( price :arg1-of differ )  :arg2 ( time :quant all )
contrast :arg2 ( love :arg0 i :arg1 pongsrus )  :arg2 ( and :op1 ( slow :arg1 suan :arg1 serve )  :op2 overprice )
experience :arg0 ( and :op2 i :op1 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  :arg1 ( and :op1 ( cheese-off :mod amazing )  :op2 ( menu :mod delicious :mod new :time ( night :mod artisanal :mod last )  :time ( date-entity :season summer )  )  )
experience :arg0 ( and :op2 i :op1 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  :arg1 ( and :op1 ( cheese-off :mod amazing )  :op2 ( menu :mod delicious :mod new :time ( night :mod artisanal :mod last )  :time ( date-entity :season summer )  )  )
and :op1 ( small :domain it :mod charmingly )  :op2 ( lead :arg1 ( and :op1 ( cozy :degree extreme :mod even )  :op2 romantic )  )
obvious :arg1 ( have :null_edge - :location restaurant :arg1 ( or :op1 ( idea :mod any )  :op3 ( experience :arg1 ( cuisine :mod ( country :name ( name :op1 japanese )  )  )  )  )  )
limit :arg1 ( food :arg1-of ( special :arg1 nothing )  )  :arg0 we :arg2 ( appetizer :quant several )
limit :arg1 ( food :arg1-of ( special :arg1 nothing )  )  :arg0 we :arg2 ( appetizer :quant several )
and :op1 ( love :arg1 ( band :mod jazz )  :time date-entity )  :op2 sit
and :purpose begin :op1 ( tell :arg2 we )  :op2 ( start :arg1 leave :condition ( offer :arg0 hostess :arg1 ( call :arg0 hostess :medium ( phone :mod cell )  :purpose ready )  )  )  :time ( before :arg2 ( wait :time ( temporal-quantity :unit minute :quant 30 )  )  )
and :purpose begin :op1 ( tell :arg2 we )  :op2 ( start :arg1 leave :condition ( offer :arg0 hostess :arg1 ( call :arg0 hostess :medium ( phone :mod cell )  :purpose ready )  )  )  :time ( before :arg2 ( wait :time ( temporal-quantity :unit minute :quant 30 )  )  )
and :purpose begin :op1 ( tell :arg2 we )  :op2 ( start :arg1 leave :condition ( offer :arg0 hostess :arg1 ( call :arg0 hostess :medium ( phone :mod cell )  :purpose ready )  )  )  :time ( before :arg2 ( wait :time ( temporal-quantity :unit minute :quant 30 )  )  )
give :arg0 server :arg2 you :arg1 ( slice :quant some :quant sample )  :time ( wait :arg1 you :arg2 ( add :null_edge short :arg0 i )  )
ok :arg0 service
need :arg1 ( and :op1 ( make :condition ( reply :time ( ask :arg1 ( prepare :arg1 ( dish :mod certain :arg1-of ( resemble :op similar )  )  :arg2 ( restaurant :mod other :mod thai )  )  )  :arg1 ( s :domain this :arg1 ( company :name ( name :op1 mcdonald )  )  )  )  :arg0 ( place :mod every )  :arg1 ( thing :mod differ )  :arg1 ( understand :arg1 ( differ :arg0 ( place :mod every )  :mod indeed )  )  )  :op1 uncourteous :op2 customer :op2 ( rude :manner downright )  )
and :op2 ( expect :arg0 ( t :null_edge don )  :arg1 ( sit :arg2 inside )  :arg0 ( table :quant ( few :mod only )  )  )  :op2 ( full :time always )
and :op1 ( accommodate :arg0 ( person :arg2-of staff )  :arg1 ( and :op1 ( excite :arg1 ambiance )  :op2 ( relax :time yet )  )  )  :op2 ( food :poss ( world :mod this )  )
and :op1 ( accommodate :arg0 ( person :arg2-of staff )  :arg1 ( and :op1 ( excite :arg1 ambiance )  :op2 ( relax :time yet )  )  )  :op2 ( food :poss ( world :mod this )  )
and :op1 ( accommodate :arg0 ( person :arg2-of staff )  :arg1 ( and :op1 ( excite :arg1 ambiance )  :op2 ( relax :time yet )  )  )  :op2 ( food :poss ( world :mod this )  )
and :op1 ( delicious :domain food :null_edge ( have :null_edge ( have :arg0 i :arg1 ( special :mod halibut )  )  :arg1 steak :arg1 ( person :arg0-of ( have-rel-role :arg2 husband )  )  )  )  :op2 ( notch :arg1 service :mod top )
and :op1 ( delicious :domain food :null_edge ( have :null_edge ( have :arg0 i :arg1 ( special :mod halibut )  )  :arg1 steak :arg1 ( person :arg0-of ( have-rel-role :arg2 husband )  )  )  )  :op2 ( notch :arg1 service :mod top )
and :op1 ( delicious :domain food :null_edge ( have :null_edge ( have :arg0 i :arg1 ( special :mod halibut )  )  :arg1 steak :arg1 ( person :arg0-of ( have-rel-role :arg2 husband )  )  )  )  :op2 ( notch :arg1 service :mod top )
and :op1 ( delicious :domain food :null_edge ( have :null_edge ( have :arg0 i :arg1 ( special :mod halibut )  )  :arg1 steak :arg1 ( person :arg0-of ( have-rel-role :arg2 husband )  )  )  )  :op2 ( notch :arg1 service :mod top )
claim :arg0 manage :arg1 ( possible :arg1 ( compensate :arg2 anything :arg2 ( bill :arg0-of ( show :mod just :arg1 ( lack :arg1 sophistication :arg1 ( group :mod entire )  )  )  )  )  )
claim :arg0 manage :arg1 ( possible :arg1 ( compensate :arg2 anything :arg2 ( bill :arg0-of ( show :mod just :arg1 ( lack :arg1 sophistication :arg1 ( group :mod entire )  )  )  )  )  )
place :domain it :mod only :location-of ( get :arg0 you :arg1-of possible :arg1 ( food :null_edge yummy :null_edge authentic :source ( country :name ( name :op1 japanese )  )  :mod comfort )  )
take :arg0 we :arg1 ( deal :mod advanatage :arg2 price :arg2 sushi :arg2 worth )  :time ( date-entity :time date-entity )
and :op1 ( come :arg0 we :location here :arg1 ( event :name ( name :op1 saturday )  )  :time ( night :arg1-of crowd )  )  :op2 ( seat :arg0 we :time ( away :mod right )  :time ( late :op1 ( temporal-quantity :unit minute :quant 15 )  :purpose reserve )  )
and :op1 ( come :arg0 we :location here :arg1 ( event :name ( name :op1 saturday )  )  :time ( night :arg1-of crowd )  )  :op2 ( seat :arg0 we :time ( away :mod right )  :time ( late :op1 ( temporal-quantity :unit minute :quant 15 )  :purpose reserve )  )
fast :domain we :domain ( order :arg1 ( platter :mod appetizer )  :condition ( hunger :arg0 we :degree very )  )
and :op1 ( attentive :arg0 ( person :arg2-of staff )  )  :op2 ( smile :arg0 person :arg1-of face )
code :polarity - :mod dress :arg2 ( attitude :polarity - )  :arg1 ( companionship :mod comfort :purpose ( relax :mod great :location ( midtown :mod ( busy :time always )  )  )  )
code :polarity - :mod dress :arg2 ( attitude :polarity - )  :arg1 ( companionship :mod comfort :purpose ( relax :mod great :location ( midtown :mod ( busy :time always )  )  )  )
code :polarity - :mod dress :arg2 ( attitude :polarity - )  :arg1 ( companionship :mod comfort :purpose ( relax :mod great :location ( midtown :mod ( busy :time always )  )  )  )
piece :domain ( and :op1 ( large :degree most )  :op2 freshest )  :arg2 ( and :op1 sushi :op2 delicious )
rarity :mod ( delicious :domain ( pasta :mod even )  :location here )  :location ( restaurant :mod new :mod york :mod pizza )
contrast :arg1 ( dumpling :condition ( look :arg0 we :arg1 menu :arg0 ( weren :quant lot )  )  :arg2-of ( include :arg3 most )  :location ( section :mod appetizer )  )
contrast :arg1 ( dumpling :condition ( look :arg0 we :arg1 menu :arg0 ( weren :quant lot )  )  :arg2-of ( include :arg3 most )  :location ( section :mod appetizer )  )
contrast :arg1 ( dumpling :condition ( look :arg0 we :arg1 menu :arg0 ( weren :quant lot )  )  :arg2-of ( include :arg3 most )  :location ( section :mod appetizer )  )
and :op1 ( remember :time after :arg0 manage )  :op2 ( treat :arg0 manage :arg2 ( customer :mod usual )  )
now :compared-to ( possible :arg1 ( get :arg0 they :mod only :arg1 toaster )  )
s :arg1 ( or :op1 ( make :arg1 ( pizza :null_edge authentic :mod neapolitan )  :arg1 ( oven :arg1-of open :mod brick )  )  :op2 ( fry :manner light :arg1 ( blossom :mod zucchini )  )  )  :arg1 ( and :op1 visit :op2 ( legion :arg1 regular :arg1-of grow )  :op2 ( check :arg1 newcomer )  )
s :arg1 ( or :op1 ( make :arg1 ( pizza :null_edge authentic :mod neapolitan )  :arg1 ( oven :arg1-of open :mod brick )  )  :op2 ( fry :manner light :arg1 ( blossom :mod zucchini )  )  )  :arg1 ( and :op1 visit :op2 ( legion :arg1 regular :arg1-of grow )  :op2 ( check :arg1 newcomer )  )
contrast :arg2 ( wait :arg1 ( person :arg2-of staff )  :manner blantently )  :arg1 ( unappreciative :arg1 business )  :arg2 ( pie :mod ( good :degree most )  :arg1 uw )
contrast :arg2 ( wait :arg1 ( person :arg2-of staff )  :manner blantently )  :arg1 ( unappreciative :arg1 business )  :arg2 ( pie :mod ( good :degree most )  :arg1 uw )
and :op1 ( taste :arg0 ingredient :arg2 fresher :arg1 ( and :op1 ( thinner :arg1 crust )  :op2 crispier )  )  :op1 ( oily :arg0 slice :degree less )  :op2 ( burn :frequency occasional )
and :op1 ( taste :arg0 ingredient :arg2 fresher :arg1 ( and :op1 ( thinner :arg1 crust )  :op2 crispier )  )  :op1 ( oily :arg0 slice :degree less )  :op2 ( burn :frequency occasional )
and :op1 ( taste :arg0 ingredient :arg2 fresher :arg1 ( and :op1 ( thinner :arg1 crust )  :op2 crispier )  )  :op1 ( oily :arg0 slice :degree less )  :op2 ( burn :frequency occasional )
fresh :domain fish :degree so :degree very
monetary-quantity :arg2-of price :arg1 cheap :arg2 ( quality :poss ( and :op1 serve :op2 food )  )
monetary-quantity :arg2-of price :arg1 cheap :arg2 ( quality :poss ( and :op1 serve :op2 food )  )
monetary-quantity :arg2-of price :arg1 cheap :arg2 ( quality :poss ( and :op1 serve :op2 food )  )
spot :mod top :location town :prep-for ( classic :mod ( country :name ( name :op1 vietnamese )  )  :mod ( good :compared-to ( place :arg1-of ( cost :arg2 ( lot :degree more )  )  )  )  )
wait :degree less :arg1 time
and :op1 ( blah-blah-blah :domain decor :mod really )  :location ( or :op1 ( hip :quant all )  )
contrast :arg1 ( enter :arg1-of ( discover :arg1 ( s :arg1 ping )  :medium internet )  :arg0 we )  :arg2 qualm :arg2 ( put :manner instant :arg1 ( ease :arg0 ( tank :mod fish :arg0-of ( greet :arg1 you :time walk )  )  )  )
and :op1 ( appear :arg1 ( venture :arg0 own )  )  :op2 show
and :op1 ( come :arg1 i :arg2 ( family :consist-of ( person :arg0-of own :arg1 pizzeria )  )  )  :op2 ( ashamed :arg0 i :mod almost :arg0 ( say :arg1 ( blow-up :domain ( pizza :location fornino )  :arg1 family :direction away )  )  )
contrast :arg1 ( order :arg0 we :arg1 ( and :op1 ( beef :quant some )  :op2 ( dish :mod ( soup :mod noodle )  )  )  :arg2 ( section :mod thai :part-of menu )  )  :arg2 ( thai :arg1 ( nothing :arg1-of ( get :arg0 we )  )  )
contrast :arg1 ( order :arg0 we :arg1 ( and :op1 ( beef :quant some )  :op2 ( dish :mod ( soup :mod noodle )  )  )  :arg2 ( section :mod thai :part-of menu )  )  :arg2 ( thai :arg1 ( nothing :arg1-of ( get :arg0 we )  )  )
contrast :arg1 ( order :arg0 we :arg1 ( and :op1 ( beef :quant some )  :op2 ( dish :mod ( soup :mod noodle )  )  )  :arg2 ( section :mod thai :part-of menu )  )  :arg2 ( thai :arg1 ( nothing :arg1-of ( get :arg0 we )  )  )
and :null_edge they :op2 ( select :mod huge :arg1 ( cheese-off :arg1-of differ :mod cream )  )  :op2 ( great :domain ( salad :quant all )  )
and :null_edge they :op2 ( select :mod huge :arg1 ( cheese-off :arg1-of differ :mod cream )  )  :op2 ( great :domain ( salad :quant all )  )
and :op1 ( good :domain ( sandwich :mod lobster )  :null_edge ( great :domain ( spaghetti :arg2 ( and :op1 scallop :op2 shrimp )  )  )  )
and :op1 ( good :domain ( sandwich :mod lobster )  :null_edge ( great :domain ( spaghetti :arg2 ( and :op1 scallop :op2 shrimp )  )  )  )
authentic :domain food
sum :mod dim :mod ( delectable :arg1 ( price :arg1-of ( easy :mod quite :arg1 wallet )  )  )
sum :mod dim :mod ( delectable :arg1 ( price :arg1-of ( easy :mod quite :arg1 wallet )  )  )
contrast :arg1 ( try :arg0 i :mod only :arg1 ( dish :arg1-of simple :arg1 ( ravioli :mod spinach :example ( and :op1 ( oil :arg1-of light )  :op2 ( sauce :mod garlic )  )  )  )  )  :arg2 ( fair :arg0 i :mod actual :arg2 ( good :domain ( try :arg0 ( joint :quant most :mod nyc :mod ( country :name ( name :op1 italian )  )  )  :arg0 i :arg1 ( dish :arg1-of ( resemble :op similar )  )  )  )  )
contrast :arg1 ( try :arg0 i :mod only :arg1 ( dish :arg1-of simple :arg1 ( ravioli :mod spinach :example ( and :op1 ( oil :arg1-of light )  :op2 ( sauce :mod garlic )  )  )  )  )  :arg2 ( fair :arg0 i :mod actual :arg2 ( good :domain ( try :arg0 ( joint :quant most :mod nyc :mod ( country :name ( name :op1 italian )  )  )  :arg0 i :arg1 ( dish :arg1-of ( resemble :op similar )  )  )  )  )
contrast :arg1 ( try :arg0 i :mod only :arg1 ( dish :arg1-of simple :arg1 ( ravioli :mod spinach :example ( and :op1 ( oil :arg1-of light )  :op2 ( sauce :mod garlic )  )  )  )  )  :arg2 ( fair :arg0 i :mod actual :arg2 ( good :domain ( try :arg0 ( joint :quant most :mod nyc :mod ( country :name ( name :op1 italian )  )  )  :arg0 i :arg1 ( dish :arg1-of ( resemble :op similar )  )  )  )  )
encounter :arg0 ( excuse :arg1-of bad :arg1 ( food :mod ( country :name ( name :op1 japanese )  )  )  )  :time ever
and :op1 ( order :arg0 i :arg1 ( dish :mod ( teriyakus :mod chicken )  )  )  :op2 ( find :arg1 ( dry :domain chicken :degree extreme )  )
and :op1 ( order :arg0 i :arg1 ( dish :mod ( teriyakus :mod chicken )  )  )  :op2 ( find :arg1 ( dry :domain chicken :degree extreme )  )
reserve :arg0 we :time date-entity :arg1-of contrast :arg1-of ( seat :arg0 we :null_edge 10 )  :time date-entity
and :op2 ( fish :arg0 we :poss pam :arg1-of special :mod fried )  :op2 amaze
excuse :polarity - :arg1 ( serve :arg1-of ( lousy :mod such )  )
contrast :arg1 ( have :arg1 ( chowder :mod new :mod ( country :name ( name :op1 england )  )  :arg1-of good )  :arg1 ( person :arg0-of ( have-rel-role :arg2 boyfriend )  )  )  :arg2 ( think :arg0 i :arg1 ( recommend :arg1 ( go :arg0 award :arg4 ( bisque :mod lobster )  )  )  )
contrast :arg1 ( have :arg1 ( chowder :mod new :mod ( country :name ( name :op1 england )  )  :arg1-of good )  :arg1 ( person :arg0-of ( have-rel-role :arg2 boyfriend )  )  )  :arg2 ( think :arg0 i :arg1 ( recommend :arg1 ( go :arg0 award :arg4 ( bisque :mod lobster )  )  )  )
contrast :arg2 ( inconsistency :quant little :location there )  :arg2 ( way :mod either )  :arg1 ( good :degree so :domain ( pizza :mod both )  :degree really )
contrast :arg1 ( expensive :mod overall :domain restaurant :degree more :compared-to ( favor :mod other :mod sushi )  )  :arg2 ( delicious :arg1 everything )
wine :quant enough :arg0 glass :mod either
and :op2 ( breast :arg0 i :mod duck :arg1-of special :arg1 ( visit :mod last )  )  :op2 incredible
cause :arg1 ( say :arg0 i :arg1 ( pricey :degree little :arg1 food )  )  :arg0 ( spectacular :arg2 view )
do :arg0 ( innovator :arg1-of ( include :arg2 ( country :mod ( country :name ( name :op1 indian )  )  :name ( name :op1 france )  )  )  )  :arg1 ( job :mod great :arg1-of ( access :null_edge ( interesting :compared-to possible )  :mod still )  )
do :arg0 ( innovator :arg1-of ( include :arg2 ( country :mod ( country :name ( name :op1 indian )  )  :name ( name :op1 france )  )  )  )  :arg1 ( job :mod great :arg1-of ( access :null_edge ( interesting :compared-to possible )  :mod still )  )
see :arg1 ( take :arg0 ( don :mod just )  :arg1 ( seat :arg1 ( and :op1 bar :op2 ( back :op1 restaurant )  )  )  )  :arg0 i :arg1 ( nudged :arg1 woman :arg1 ( 40time :arg1-of ( sit :arg2 there )  )  )
see :arg1 ( take :arg0 ( don :mod just )  :arg1 ( seat :arg1 ( and :op1 bar :op2 ( back :op1 restaurant )  )  )  )  :arg0 i :arg1 ( nudged :arg1 woman :arg1 ( 40time :arg1-of ( sit :arg2 there )  )  )
gimmick :polarity - :location here :arg0-of ( speak :arg0 food :arg1 ( and :op1 freshness :op2 prepare )  )
contrast :arg1 ( worry :arg1 we :arg0 ( have :arg0 we :arg1 ( trouble :arg0 get )  )  )  :arg2 ( manage :manner somehow :arg1 ( wait :duration short )  )
and :op1 ( shrimp :mod fried :mod huge )  :op2 love :op2 ( person :arg0-of ( have-rel-role :arg2 wife )  )
recommend :arg1 ( go :arg0 one :arg4 ( strike :mod luck )  :arg3 food )
awful :domain service :arg1 ( tell :time last :arg1 ( and :op1 ( mean :mod last )  )  :arg2 we :arg1 ( obligate :arg1 need :arg1 we :arg2 leave )  )
awful :domain service :arg1 ( tell :time last :arg1 ( and :op1 ( mean :mod last )  )  :arg2 we :arg1 ( obligate :arg1 need :arg1 we :arg2 leave )  )
possible :mod only :arg1 ( get :arg0 we :arg1 ( and :op1 appetizer :op2 ( fondue :mod cheese-off )  )  )
possible :mod only :arg1 ( get :arg0 we :arg1 ( and :op1 appetizer :op2 ( fondue :mod cheese-off )  )  )
wait :arg1 ( time :mod both )  :arg1 we :manner well :arg1 ( table :duration ( temporal-quantity :unit hour )  )  :null_edge ( have :mod even :arg0 we :arg1 reserve )
wait :arg1 ( time :mod both )  :arg1 we :manner well :arg1 ( table :duration ( temporal-quantity :unit hour )  )  :null_edge ( have :mod even :arg0 we :arg1 reserve )
contrast :arg1 ( have :arg1 ( reserve :time night )  :arg0 we :null_edge ( and :op1 ( nice :domain manage :degree so )  :op2 ( wait :arg1 manage :arg1 ( experience :degree great )  )  )  )  :arg2 ( wait :arg2 bar :duration ( while :quant little )  )
contrast :arg1 ( have :arg1 ( reserve :time night )  :arg0 we :null_edge ( and :op1 ( nice :domain manage :degree so )  :op2 ( wait :arg1 manage :arg1 ( experience :degree great )  )  )  )  :arg2 ( wait :arg2 bar :duration ( while :quant little )  )
contrast :arg1 ( have :arg1 ( reserve :time night )  :arg0 we :null_edge ( and :op1 ( nice :domain manage :degree so )  :op2 ( wait :arg1 manage :arg1 ( experience :degree great )  )  )  )  :arg2 ( wait :arg2 bar :duration ( while :quant little )  )
contrast :arg1 ( have :arg1 ( reserve :time night )  :arg0 we :null_edge ( and :op1 ( nice :domain manage :degree so )  :op2 ( wait :arg1 manage :arg1 ( experience :degree great )  )  )  )  :arg2 ( wait :arg2 bar :duration ( while :quant little )  )
try :arg1 ( curry :arg0 ( person :name ( name :op1 green )  )  )
xconcept
xconcept
and :op2 ( scallop :arg0 we )  :prep-as appetizer :op2 delicious :op2 and :op2 ( sauce :arg1-of wonderful )
and :op2 ( scallop :arg0 we )  :prep-as appetizer :op2 delicious :op2 and :op2 ( sauce :arg1-of wonderful )
and :op2 ( scallop :arg0 we )  :prep-as appetizer :op2 delicious :op2 and :op2 ( sauce :arg1-of wonderful )
and :op1 ( seat :arg1 we :mod also :manner prompt :arg1 ( and :op1 ( quick :arg1 service :degree very )  :op2 professional )  )  :op2 reserve
and :op1 ( seat :arg1 we :mod also :manner prompt :arg1 ( and :op1 ( quick :arg1 service :degree very )  :op2 professional )  )  :op2 reserve
and :null_edge you :arg1-of rare :op1 ( wait :arg1 seat )  :op2 ( and :op1 ( full :domain ( curry :mod ( red :null_edge ( masaman :arg1-of ( person :name ( name :op1 green )  )  )  )  )  :arg2 flavor )  :op2 ( come :arg1 curry :arg2 ( spicy :mod super-power )  :time ( ask :arg0 you )  )  )
and :null_edge you :arg1-of rare :op1 ( wait :arg1 seat )  :op2 ( and :op1 ( full :domain ( curry :mod ( red :null_edge ( masaman :arg1-of ( person :name ( name :op1 green )  )  )  )  )  :arg2 flavor )  :op2 ( come :arg1 curry :arg2 ( spicy :mod super-power )  :time ( ask :arg0 you )  )  )
and :null_edge you :arg1-of rare :op1 ( wait :arg1 seat )  :op2 ( and :op1 ( full :domain ( curry :mod ( red :null_edge ( masaman :arg1-of ( person :name ( name :op1 green )  )  )  )  )  :arg2 flavor )  :op2 ( come :arg1 curry :arg2 ( spicy :mod super-power )  :time ( ask :arg0 you )  )  )
and :null_edge you :arg1-of rare :op1 ( wait :arg1 seat )  :op2 ( and :op1 ( full :domain ( curry :mod ( red :null_edge ( masaman :arg1-of ( person :name ( name :op1 green )  )  )  )  )  :arg2 flavor )  :op2 ( come :arg1 curry :arg2 ( spicy :mod super-power )  :time ( ask :arg0 you )  )  )
and :null_edge you :arg1-of rare :op1 ( wait :arg1 seat )  :op2 ( and :op1 ( full :domain ( curry :mod ( red :null_edge ( masaman :arg1-of ( person :name ( name :op1 green )  )  )  )  )  :arg2 flavor )  :op2 ( come :arg1 curry :arg2 ( spicy :mod super-power )  :time ( ask :arg0 you )  )  )
sastify :arg1 food
recommend :arg0 i :degree high :arg1 ( and :op1 ( visit :arg1 ( restaurant :mod this )  )  :op2 ( have :arg1 ( dinner :null_edge ( and :op2 drink )  )  )  )
recommend :arg0 i :degree high :arg1 ( and :op1 ( visit :arg1 ( restaurant :mod this )  )  :op2 ( have :arg1 ( dinner :null_edge ( and :op2 drink )  )  )  )
stock :arg1 bar :manner ( well :degree very )  :arg2 ( and :op1 ( beer :mod interesting )  :op3 ( wine :arg1-of price )  )
stock :arg1 bar :manner ( well :degree very )  :arg2 ( and :op1 ( beer :mod interesting )  :op3 ( wine :arg1-of price )  )
stock :arg1 bar :manner ( well :degree very )  :arg2 ( and :op1 ( beer :mod interesting )  :op3 ( wine :arg1-of price )  )
contrast :arg1 ( try :time ( day :mod last :mod memorial )  :arg0 i :arg1 ( make :arg0 i :arg1 reserve )  )  :arg2 ( tell :arg1 ( close :time weekend :arg1 ( contrast :arg2 interesting )  )  )
good :domain food
and :op2 ( gigonda :mod ( wine :arg1-of ( select :mod great )  )  )  :op2 ( thing :arg2-of price )  :op2 ( value :arg1 ( champagne :mod house )  :degree great )
and :op2 ( gigonda :mod ( wine :arg1-of ( select :mod great )  )  )  :op2 ( thing :arg2-of price )  :op2 ( value :arg1 ( champagne :mod house )  :degree great )
and :op2 ( gigonda :mod ( wine :arg1-of ( select :mod great )  )  )  :op2 ( thing :arg2-of price )  :op2 ( value :arg1 ( champagne :mod house )  :degree great )
and :op2 ( gigonda :mod ( wine :arg1-of ( select :mod great )  )  )  :op2 ( thing :arg2-of price )  :op2 ( value :arg1 ( champagne :mod house )  :degree great )
contrast :arg1 ( hard :time night :arg1 ( hear :arg1 converse :arg2 ( compete :arg0 ( everyone :mod else )  :arg2 ( luxury :mod that :arg1-of same )  )  )  :degree ( voluminous :arg1 ( music :mod ( play :location background )  )  :mod also )  )
enjoy :arg0 i :arg1 ( everything :null_edge ( and :op1 ( get :arg0 i :time ever )  :op2 ( and :op1 ( fresh :domain fish :null_edge great )  :op2 ( prepare :arg1 fish :time always )  )  )  )
love :arg0 i :mod particular :arg1 ( and :op1 ( tuna :mod yellowfun )  :op2 ( select :manner mussel )  )
love :arg0 i :mod particular :arg1 ( and :op1 ( tuna :mod yellowfun )  :op2 ( select :manner mussel )  )
love :arg0 i :arg1 ( visit :arg0 i :arg1 murray :purpose ( fix :mod bagel )  )
and :op2 ( reserve :arg0 we :mod early :mod dinner :arg1-of ( remind :arg1 ( impress :manner thorough :arg1 ( scenery :mod old :mod school :mod ( country :name ( name :op1 italian )  )  :prep-without ( stuff :quant lot :mod fun :null_edge admire )  )  )  :arg0 ( person :arg0-of ( have-rel-role :arg2 grandfather )  )  )  )
and :op2 ( reserve :arg0 we :mod early :mod dinner :arg1-of ( remind :arg1 ( impress :manner thorough :arg1 ( scenery :mod old :mod school :mod ( country :name ( name :op1 italian )  )  :prep-without ( stuff :quant lot :mod fun :null_edge admire )  )  )  :arg0 ( person :arg0-of ( have-rel-role :arg2 grandfather )  )  )  )
and :op1 ( nice :domain place )  :op2 calm
and :op1 ( delight :arg1 ( plate :mod cheese-off )  :arg1-of vary )  :op2 ( bargain :mod great :null_edge 10 )
and :op1 ( possible :arg1 ( drink :arg0 i :arg1 ( water :quant ( glass :quant 4 )  )  :null_edge ( parch :mod still :arg2 ( watch :arg0 i )  )  )  )
get :time ( person :arg1-of sit :arg1 we )  :arg0 we :arg1 ( service :arg2 ( and :op1 great :op2 fast )  )
and :op1 ( attentive :arg1 ( server :quant most )  :degree very )  :op2 friendly :op2 ( attract :degree quite )
average :arg0 service
contrast :arg1 ( do :arg0 they :arg1 ( job :arg1-of ( nice :mod really )  :mod ( offer :arg1-of ( typical :quant all :arg1 pizzeria :null_edge ( null_tag :quant some :arg1-of terrific :null_edge godmother )  )  :arg1 pizza )  :mod ( pizza :mod sort-of :mod tradition :mod flat :prep-with ( oil :mod olive :source ( and :op1 ( crust :arg1-of brush-off )  :op2 ( sauce :quant less :mod tomato )  :op2 ( more :compared-to usual )  )  )  )  )  )
contrast :arg1 ( do :arg0 they :arg1 ( job :arg1-of ( nice :mod really )  :mod ( offer :arg1 ( pizzeria :mod all :arg1-of typical :null_edge ( null_tag :quant some :arg1-of terrific )  )  :arg3 ( pizza :mod godmother :mod ( pizza :mod sort-of :mod tradition :mod flat :degree ( more :compared-to ( usual :arg2 ( and :op1 ( crust :mod olive :arg1-of brush-off )  :op2 ( sauce :quant less :mod tomato )  )  )  )  )  )  )  )  )
and :op2 ( forget :arg0 they :arg1 sandwich )  :op1 ( fork :mod plastic )  :op2 ( include :arg1 ( pita :manner ( platter :consist-of hummus )  )  )
and :op2 ( forget :arg0 they :arg1 sandwich )  :op1 ( fork :mod plastic )  :op2 ( include :arg1 ( pita :manner ( platter :consist-of hummus )  )  )
and :op2 ( forget :arg0 they :arg1 sandwich )  :op1 ( fork :mod plastic )  :op2 ( include :arg1 ( pita :manner ( platter :consist-of hummus )  )  )
and :op2 ( forget :arg0 they :arg1 sandwich )  :op1 ( fork :mod plastic )  :op2 ( include :arg1 ( pita :manner ( platter :consist-of hummus )  )  )
and :op1 ( good :domain steak :null_edge ( great :domain sushi :manner surprise )  )  :op2 ( good :domain fish )
and :op1 ( good :domain steak :null_edge ( great :domain sushi :manner surprise )  )  :op2 ( good :domain fish )
and :op1 ( good :domain steak :null_edge ( great :domain sushi :manner surprise )  )  :op2 ( good :domain fish )
reluctant :topic ( write :arg0 i )  :arg1-of ( cause :arg0 ( want :arg1 ( become :arg1 ( jem :arg1 ( place :mod pizza )  )  :arg2 ( overcrowded :domain jem )  )  )  )
and :op1 ( poor :domain service :arg1 ( light :arg0 restaurant :manner poor )  )  :op2 ( attentive :arg1 ( person :arg2-of staff )  :degree very )  :op2 ( eat :arg1 light :arg0 i :location ( s :poss ( company :name ( name :op1 mcdonald )  )  :arg1 ( joint :mod this )  )  )
and :op1 ( poor :domain service :arg1 ( light :arg0 restaurant :manner poor )  )  :op2 ( attentive :arg1 ( person :arg2-of staff )  :degree very )  :op2 ( eat :arg1 light :arg0 i :location ( s :poss ( company :name ( name :op1 mcdonald )  )  :arg1 ( joint :mod this )  )  )
choose :arg0 ( and :op1 gf :op2 i )  :mod still :arg1 ( eat :arg0 and :arg1 lot :arg1-of ( cause :arg0 ( and :op1 ( cocktail :mod diverse )  :op2 ( decor :mod chill )  :op2 ( sushi :mod decency )  )  )  )
choose :arg0 ( and :op1 gf :op2 i )  :mod still :arg1 ( eat :arg0 and :arg1 lot :arg1-of ( cause :arg0 ( and :op1 ( cocktail :mod diverse )  :op2 ( decor :mod chill )  :op2 ( sushi :mod decency )  )  )  )
choose :arg0 ( and :op1 gf :op2 i )  :mod still :arg1 ( eat :arg0 and :arg1 lot :arg1-of ( cause :arg0 ( and :op1 ( cocktail :mod diverse )  :op2 ( decor :mod chill )  :op2 ( sushi :mod decency )  )  )  )
and :op2 ( dinner :arg0 we )  :op1 ( light :arg0-of surprise )  :op2 flaky :op2 ( tatin :mod ( tarte :mod apple )  )
and :op2 ( dinner :arg0 we )  :op1 ( light :arg0-of surprise )  :op2 flaky :op2 ( tatin :mod ( tarte :mod apple )  )
have :arg0 buffet :arg1 ( select :arg1-of nice )
have :arg0 buffet :arg1 ( select :arg1-of nice )
friendly :domain waitstaff :degree very
have :manner ( slow :arg1 service )  :null_edge ( wait :arg1 ( and :op1 ( order :arg1 food )  :op2 get )  :arg2 ( crowd :arg1 and )  )
have :manner ( slow :arg1 service )  :null_edge ( wait :arg1 ( and :op1 ( order :arg1 food )  :op2 get )  :arg2 ( crowd :arg1 and )  )
return :purpose ( try :arg1 chocolate )
food :domain ( ambience :arg2 ( below :op1 average )  :polarity - )  :arg1-of ( cause :arg1 ( pathetic :arg1 service )  )
food :domain ( ambience :arg2 ( below :op1 average )  :polarity - )  :arg1-of ( cause :arg1 ( pathetic :arg1 service )  )
food :domain ( ambience :arg2 ( below :op1 average )  :polarity - )  :arg1-of ( cause :arg1 ( pathetic :arg1 service )  )
enjoy :arg0 i :mod really :arg1 show
enjoy :arg0 i :mod really :arg1 show
and :op1 ( time :domain ( try :arg0 we :arg1 ( bagel :mod new :mod york )  )  )  :op2 ( york :null_edge new )
courteous :domain service :arg1-of efficient
and :op1 ( lack :arg0 soup :arg1 flavor )  :op2 ( prepare :null_edge fish :time past )
and :op1 ( lack :arg0 soup :arg1 flavor )  :op2 ( prepare :null_edge fish :time past )
and :op1 ( lack :arg0 soup :arg1 flavor )  :op2 ( prepare :null_edge fish :time past )
bagel :domain they :mod ( good :degree most )  :arg0-of ( have :arg0 i )
read :arg0 i :manner ve :arg1 ( preview :quant some )  :arg1 review :arg1 ( or :op1 ( yorker :mod either :mod new )  :op2 ( have :arg1 ( appreciation :quant more :purpose ( ambience :domain food )  )  )  )
read :arg0 i :manner ve :arg1 ( preview :quant some )  :arg1 review :arg1 ( or :op1 ( yorker :mod either :mod new )  :op2 ( have :arg1 ( appreciation :quant more :purpose ( ambience :domain food )  )  )  )
redone :arg0 toon :time recent :condition ( space :time now :arg0-of ( attract :degree very )  )
side :quant 160 :quant 2 :null_edge ( and :op2 appetizer :op2 drink )
side :quant 160 :quant 2 :null_edge ( and :op2 appetizer :op2 drink )
side :quant 160 :quant 2 :null_edge ( and :op2 appetizer :op2 drink )
side :quant 160 :quant 2 :null_edge ( and :op2 appetizer :op2 drink )
huge :domain portion :arg1-of ( cause :arg2 ( nothing :domain price :arg1-of special )  )
huge :domain portion :arg1-of ( cause :arg2 ( nothing :domain price :arg1-of special )  )
relax :arg1 ( and :op1 ( location :arg1-of nice :arg1-of quiet )  :op1 eat :op1 ( meal :mod good )  :op2 ( possible :arg1 talk )  :op2 ( have :arg1 ( time :mod ( good :degree very )  )  )  )
relax :arg1 ( and :op1 ( location :arg1-of nice :arg1-of quiet )  :op1 eat :op1 ( meal :mod good )  :op2 ( possible :arg1 talk )  :op2 ( have :arg1 ( time :mod ( good :degree very )  )  )  )
arrive :arg1 we :purpose dinner :arg1 ( expect :arg1 ( impress :time ( past :arg0-of impress :null_edge ( s :mod just )  :mod past )  )  )
think :arg0 i :arg1 ( hang :arg1 ( spot :domain ( place :mod this )  :mod good )  )
contrast :arg2 menu :arg2 prix :arg2 ( prepare :arg2 ( spend :null_edge 60 )  :arg1 ( rate-entity :arg2 person )  )  :arg2 ( food :mod ( itsuperb :mod ( worth :manner well )  )  )
contrast :arg2 menu :arg2 prix :arg2 ( prepare :arg2 ( spend :null_edge 60 )  :arg1 ( rate-entity :arg2 person )  )  :arg2 ( food :mod ( itsuperb :mod ( worth :manner well )  )  )
contrast :arg2 menu :arg2 prix :arg2 ( prepare :arg2 ( spend :null_edge 60 )  :arg1 ( rate-entity :arg2 person )  )  :arg2 ( food :mod ( itsuperb :mod ( worth :manner well )  )  )
and :op1 ( extensive :domain ( list :arg2 wine )  )  :op2 ( impress :domain list )
have :arg0 we :arg1 ( waitress :arg1-of ( wonderful :degree most )  )
experience :condition ( friendly :domain ( person :arg2-of staff :location ( bistro :mod this :mod little )  )  :degree very )  :arg0 i :arg1 ( incompetency :degree more )
and :op2 ( and :op1 ( fantastic :domain quail )  :op2 ( unique :domain quail )  :op2 ( full :domain quail :arg1 pasta :arg2 flavor )  )
and :op2 ( and :op1 ( fantastic :domain quail )  :op2 ( unique :domain quail )  :op2 ( full :domain quail :arg1 pasta :arg2 flavor )  )
and :op2 ( and :op1 ( fantastic :domain quail )  :op2 ( unique :domain quail )  :op2 ( full :domain quail :arg1 pasta :arg2 flavor )  )
and :op2 zucchini :op2 mash :op2 potatoe :op2 ( and :op1 blend :op1 garlic :op2 butter :op1 ( melt :mod simple :location mouth )  )
and :op2 zucchini :op2 mash :op2 potatoe :op2 ( and :op1 blend :op1 garlic :op2 butter :op1 ( melt :mod simple :location mouth )  )
and :op2 zucchini :op2 mash :op2 potatoe :op2 ( and :op1 blend :op1 garlic :op2 butter :op1 ( melt :mod simple :location mouth )  )
and :op2 zucchini :op2 mash :op2 potatoe :op2 ( and :op1 blend :op1 garlic :op2 butter :op1 ( melt :mod simple :location mouth )  )
and :op1 ( courteous :arg0 ( person :arg2-of staff )  )  :op2 ( friendly :arg1 person )
nice :arg1 decor :arg1 ( possible :arg1 service :arg1 spotty )
nice :arg1 decor :arg1 ( possible :arg1 service :arg1 spotty )
impress :arg0 ( serve :arg1-of rush )  :arg1 we :degree very :arg2 ( and :op1 food :op2 drink )
impress :arg0 ( serve :arg1-of rush )  :arg1 we :degree very :arg2 ( and :op1 food :op2 drink )
impress :arg0 ( serve :arg1-of rush )  :arg1 we :degree very :arg2 ( and :op1 food :op2 drink )
sure :arg1 ( have :arg0 you :arg1 ( roll :mod spicy :mod scallop )  )
recommend :arg0 i :degree high :arg1 ( place :mod this )  :arg1 ( anyone :arg0-of ( person :arg0-of look :arg1 ( experience :arg1-of fine :mod ( dine :mod ( country :name ( name :op1 indian )  )  )  :arg2-of ( value :mod definite :arg2 dollar )  )  )  )
xconcept :x ( draw :mod this :mod big :mod all )  :x ( sushi :arg0 you :arg1-of possible :location here :null_edge 9 :null_edge 19 )
xconcept :x 95
and :op1 ( ignore :arg0 ( person :arg0-of work :quant some )  :null_edge ( skip :arg0 other )  )  :op2 ( talk :arg2 ( customer :mod female )  )
and :op1 ( ignore :arg0 ( person :arg0-of work :quant some )  :null_edge ( skip :arg0 other )  )  :op2 ( talk :arg2 ( customer :mod female )  )
good :domain special :mod usual :degree quite :degree too
ve :arg0 they :arg1 ( and :op1 ( dessert :mod ( good :degree most )  )  :op2 ( drink :arg1-of mix )  :op2 ( food :mod snack )  )
ve :arg0 they :arg1 ( and :op1 ( dessert :mod ( good :degree most )  )  :op2 ( drink :arg1-of mix )  :op2 ( food :mod snack )  )
ve :arg0 they :arg1 ( and :op1 ( dessert :mod ( good :degree most )  )  :op2 ( drink :arg1-of mix )  :op2 ( food :mod snack )  )
try :arg1 ( cake :mod ( mud :arg1 chocolate )  :arg1-of warm )  :arg1 ( scoop :null_edge ( leche :quant 2 :null_edge null_tag )  )
try :arg1 ( cake :mod ( mud :arg1 chocolate )  :arg1-of warm )  :arg1 ( scoop :null_edge ( leche :quant 2 :null_edge null_tag )  )
stauff :arg1-of ( cool :degree really )  :location inside
overhaul :time ( feature :arg0 ( restaurant :mod new )  :mod still :arg1 ( furniture :quant much :arg1-of same :mod classical :arg1-of ( make :arg1 attract )  )  )  :arg1 menu
overhaul :time ( feature :arg0 ( restaurant :mod new )  :mod still :arg1 ( furniture :quant much :arg1-of same :mod classical :arg1-of ( make :arg1 attract )  )  )  :arg1 menu
have :arg0 ( burger :mod ( good :degree most )  )  :arg0 i :location village
and :op1 ( visit :arg0 we :arg1 orsay :time ( ny :time ( week :mod restaurant )  )  )  :op2 ( try :arg1 menu )
get :arg0 i :arg1 ( and :op1 ( slaw :mod some :mod cole )  :op2 knish )  :condition ( have :arg0 stomach :arg1 ( space :degree more )  )
get :arg0 i :arg1 ( and :op1 ( slaw :mod some :mod cole )  :op2 knish )  :condition ( have :arg0 stomach :arg1 ( space :degree more )  )
arrive :purpose ( dinner :quant 3 )  :null_edge ( about :null_edge 5 )  :null_edge 30 :arg4 ( reserve :arg1 3 :time ( night :mod week )  )
arrive :purpose ( dinner :quant 3 )  :null_edge ( about :null_edge 5 )  :null_edge 30 :arg4 ( reserve :arg1 3 :time ( night :mod week )  )
and :op1 ( soothing :domain ( decor :mod blond :consist-of wood )  :degree very )  :op2 ( excellent :arg1 decor :arg1 premium )  :op2 ( great :domain service )
and :op1 ( soothing :domain ( decor :mod blond :consist-of wood )  :degree very )  :op2 ( excellent :arg1 decor :arg1 premium )  :op2 ( great :domain service )
and :op1 ( soothing :domain ( decor :mod blond :consist-of wood )  :degree very )  :op2 ( excellent :arg1 decor :arg1 premium )  :op2 ( great :domain service )
possible :arg1 ( spend :arg1 money :manner good :location elsewhere :location anywhere )
drawback :mod only :arg1 ( and :op1 win :op2 ( toast :arg1 bagel )  :op2 ( don :arg1 ( egg :arg0-of make )  :arg3 bagel )  )
drawback :mod only :arg1 ( and :op1 win :op2 ( toast :arg1 bagel )  :op2 ( don :arg1 ( egg :arg0-of make )  :arg3 bagel )  )
drawback :mod only :arg1 ( and :op1 win :op2 ( toast :arg1 bagel )  :op2 ( don :arg1 ( egg :arg0-of make )  :arg3 bagel )  )
have :arg0 ( we :time always )  :arg1 ( wine :quant ( glass :mod great :time ( wait :arg1 we )  )  )
pleasant :domain ( wait :arg1 ( person :arg2-of staff )  )  :arg1 ( and :op1 ( fun :domain ( way :mod ( way :mod most :arg1-of ( wonderful :mod aesthetic :arg2 beautification )  )  :null_edge null_tag )  )  )
contrast :arg1 ( lack :arg1 include :arg0 ( atmosphere :mod this )  )  :arg2 ( expect :arg0 you :time ( anyways :op1 ( temporal-quantity :unit hour :quant 24 :mod bagel )  )  )
contrast :arg1 ( lack :arg1 include :arg0 ( atmosphere :mod this )  )  :arg2 ( expect :arg0 you :time ( anyways :op1 ( temporal-quantity :unit hour :quant 24 :mod bagel )  )  )
and :op1 ( good :domain service :degree very )  :op2 warm
dinner :arg0 i :arg1 ( and :op1 ( masalum :mod ( chicken :mod tikka )  )  :op2 ( naan :mod some :mod garlic )  )
dinner :arg0 i :arg1 ( and :op1 ( masalum :mod ( chicken :mod tikka )  )  :op2 ( naan :mod some :mod garlic )  )
dinner :arg0 i :arg1 ( and :op1 ( masalum :mod ( chicken :mod tikka )  )  :op2 ( naan :mod some :mod garlic )  )
and :op1 ( look :arg0 ( street :mod cornelium )  :arg1 ( set :arg2 broadway )  :arg1 ( story :mod ( world-region :name ( name :op1 west )  )  :mod side )  )  :op2 ( possible :arg1 ( inside :op1 po )  :arg1 ( cool :degree so )  :arg1 ( top :mod really :arg1 ( setting :arg1 ( dinner :mod romantic :null_edge nyc )  )  )  )
and :op1 ( look :arg0 ( street :mod cornelium )  :arg1 ( set :arg2 broadway )  :arg1 ( story :mod ( world-region :name ( name :op1 west )  )  :mod side )  )  :op2 ( possible :arg1 ( inside :op1 po )  :arg1 ( cool :degree so )  :arg1 ( top :mod really :arg1 ( setting :arg1 ( dinner :mod romantic :null_edge nyc )  )  )  )
and :op1 ( good :domain food )  :op2 ( terrific :domain ( view :arg1 ( skiline :mod new :mod ( city :mod york )  )  )  :time ( day :mod even :arg1-of foggy :mod rainy :time-of ( go :arg0 i )  )  )
and :op1 ( good :domain food )  :op2 ( terrific :domain ( view :arg1 ( skiline :mod new :mod ( city :mod york )  )  )  :time ( day :mod even :arg1-of foggy :mod rainy :time-of ( go :arg0 i )  )  )
nothing :mod ( thing :arg2-of describe :mod ( menu :domain food )  )
nothing :mod ( thing :arg2-of describe :mod ( menu :domain food )  )
try :arg1 ( or :op1 ew :op2 chicken :op1 ( cashew :arg1 ( nut :arg1-of ( experience :arg1 ( and :op1 memorable :op2 repeatable )  )  )  )  )
try :arg1 ( or :op1 ew :op2 chicken :op1 ( cashew :arg1 ( nut :arg1-of ( experience :arg1 ( and :op1 memorable :op2 repeatable )  )  )  )  )
o :mod just
k
pizza
and :op1 ( decency :domain food :null_edge ( good :degree most )  )  :op2 ( matter :domain ambience :arg1-of opine )  :op2 ( possible :arg1 ( consider :arg0 some :arg1 ( thing :arg1-of sweet )  )  )  :op2 ( think :arg1 ( annoy :mod just )  )
contrast :arg1 ( slow :domain service :mod bit )  :arg2 ( friendly :degree very )
contrast :arg1 ( gem :mod ( village :mod east )  :domain ( fare :mod basic :mod bistro :null_edge ( null_tag :mod good )  :mod ( atmosphere :arg1-of warm :mod lively )  :mod ( country :name ( name :op1 france )  )  )  )  :arg1 ( casual :domain prepare )  :arg2 hip
contrast :arg1 ( gem :mod ( village :mod east )  :domain ( fare :mod basic :mod bistro :null_edge ( null_tag :mod good )  :mod ( atmosphere :arg1-of warm :mod lively )  :mod ( country :name ( name :op1 france )  )  )  )  :arg1 ( casual :domain prepare )  :arg2 hip
contrast :arg1 ( gem :mod ( village :mod east )  :domain ( fare :mod basic :mod bistro :null_edge ( null_tag :mod good )  :mod ( atmosphere :arg1-of warm :mod lively )  :mod ( country :name ( name :op1 france )  )  )  )  :arg1 ( casual :domain prepare )  :arg2 hip
and :op2 food :op2 sligtly :op2 ( good :compared-to ( brewery :quant some :mod other :mod heartland :location city )  )  :op2 ( thing :arg0 ( above :op1 ( average :arg3 midtown )  )  )
thius :beneficiary ( anyone :arg0-of ( love :arg1 shabu :arg0 shabu )  )
horrible :domain food :degree absolute
use :arg1 ( resemble :op similar :arg2 ( restaurant :mod other :mod ( country :name ( name :op1 indian )  )  )  )  :arg0 they :arg1 ( special :mod dinner )  :arg2 ( attract :arg1 customer :arg2 door )
understand :arg1 ( cart :poss ( t :null_edge food )  )  :arg1 you :arg1 ( cause :arg0 ( speak :arg0 ( t :null_edge don )  :arg3 ( country :name ( name :op1 english )  )  )  :arg0 job :arg1 ( give :arg2 you :arg1 ( food :mod delicious :arg0-of ( point :arg0 you )  )  )  )
understand :arg1 ( cart :poss ( t :null_edge food )  )  :arg1 you :arg1 ( cause :arg0 ( speak :arg0 ( t :null_edge don )  :arg3 ( country :name ( name :op1 english )  )  )  :arg0 job :arg1 ( give :arg2 you :arg1 ( food :mod delicious :arg0-of ( point :arg0 you )  )  )  )
and :op1 ( crispy :arg1 ( salad :mod crackling :mod calamarus :arg1 ( disaster :mod usual :arg1-of cheap :location ( restaurant :quant many )  )  )  )  :op2 ( dress :manner light )
multi-sentence :snt1 ( place :mod ( great :degree most )  :mod sushi )  :snt2 ( contrast :arg2 ( excellent :null_edge 9 :null_edge 19 )  )
possible :arg1 ( eat :arg0 ( you :mod all )  )
hold :mod shockingly :purpose ( throw-out :arg1-of easy :arg1 ( dinner :mod group )  :location here :arg0 ( deposit :null_edge simple :arg1 contract )  )  :arg0 deposit :mod only :arg1 date :arg1 ( mezz :mod entire :mod fl )  :null_edge 20
and :op1 ( smooth :domain ( tea :mod ( ice :mod thai )  )  :mod amaze )  :op2 ( yummy :domain tea )
contrast :arg1 ( have :arg0 we :arg1 ( problem :mod any :topic ( person :arg2-of staff )  )  )  :arg2 ( lucky :domain we )
price :arg0 drink :manner way
price :arg0 drink :manner way
guy :domain ( downside :mod main :arg2 place )  :mod nazi :arg0-of run :arg0-of ( complain :manner constant :arg1 ( level :mod noise )  )
guy :domain ( downside :mod main :arg2 place )  :mod nazi :arg0-of run :arg0-of ( complain :manner constant :arg1 ( level :mod noise )  )
t :null_edge i :null_edge ( come :arg1 i :arg1 food :mod right :time ( after :op1 order )  )
moderate :arg1 price
think :arg0 i :arg1 ( have :arg0 i :arg1 ( meal :quant some :mod ( good :degree most )  :poss ( life :location minnow )  )  )
excellent :arg1 ( food :mod ( important :degree most )  )
contrast :arg1 ( roofdeck :mod great )  :arg2 ( group :arg1-of nice :consist-of ( something :quant 30 )  )  :arg1 ( music :polarity - :mod ( quiet :mod kind )  )
contrast :arg1 ( roofdeck :mod great )  :arg2 ( group :arg1-of nice :consist-of ( something :quant 30 )  )  :arg1 ( music :polarity - :mod ( quiet :mod kind )  )
know :source ( experience :mod ( good :degree most )  )  :arg1 ( care :arg0 ( manage :mod ( friendly :compared-to ( woman :mod bubbly :mod young :prep-with ( smile :mod great )  )  )  )  :arg1 ( do :arg0 manage :arg0 we )  )
plain :domain service :arg1 ( salmon :mod sesame :mod crusted :arg0 i )
plain :domain service :arg1 ( salmon :mod sesame :mod crusted :arg0 i )
great :domain ( go :purpose ( lunch :arg1-of quick :arg1 ( or :op2 alone )  :arg0-of friend )  )
contrast :arg1 ( mediocre :domain food :arg1 ( good :degree most )  )  :arg2 ( service :mod horrible :arg0-of ( make :arg1 ( vow :arg1 ( go :direction back )  )  )  )
contrast :arg1 ( mediocre :domain food :arg1 ( good :degree most )  )  :arg2 ( service :mod horrible :arg0-of ( make :arg1 ( vow :arg1 ( go :direction back )  )  )  )
accurate :domain ( review :mod some :arg1-of include :location here )  :topic ( and :op1 crowd :op2 noise )
accurate :domain ( review :mod some :arg1-of include :location here )  :topic ( and :op1 crowd :op2 noise )
pay :condition-of ( get :arg0 you )  :arg0 you :time and :arg3 ( grab :arg1 ( logic :mod that :location mind )  :arg0 spice :null_edge great :arg0 ( and :op1 ( cheap :quant some )  :op1 eat :op2 ( drink :location ( setting :arg1-of beautiful )  )  )  )
pay :condition-of ( get :arg0 you )  :arg0 you :time and :arg3 ( grab :arg1 ( logic :mod that :location mind )  :arg0 spice :null_edge great :arg0 ( and :op1 ( cheap :quant some )  :op1 eat :op2 ( drink :location ( setting :arg1-of beautiful )  )  )  )
pay :condition-of ( get :arg0 you )  :arg0 you :time and :arg3 ( grab :arg1 ( logic :mod that :location mind )  :arg0 spice :null_edge great :arg0 ( and :op1 ( cheap :quant some )  :op1 eat :op2 ( drink :location ( setting :arg1-of beautiful )  )  )  )
have :arg1 ( service :mod terrible )  :arg0 we :null_edge ( and :op1 ( wait :arg2 everything )  :op2 ( ask :arg1 ( several :arg1-of differ )  :arg1 ( thing :arg1-of same )  )  )  :time ( before :op1 ( allow :arg1 we :arg1 serve )  )
have :arg1 ( service :mod terrible )  :arg0 we :null_edge ( and :op1 ( wait :arg2 everything )  :op2 ( ask :arg1 ( several :arg1-of differ )  :arg1 ( thing :arg1-of same )  )  )  :time ( before :op1 ( allow :arg1 we :arg1 serve )  )
and :op1 ( fill :arg1 ( and :op1 ( crowd :degree little )  :op2 ( overpriced :degree bit )  )  :arg1 atmosphere :arg2 energy :arg1 ( and :op2 beautiful )  )  :op2 ( good :domain food :mod surprise )
and :op1 ( fill :arg1 ( and :op1 ( crowd :degree little )  :op2 ( overpriced :degree bit )  )  :arg1 atmosphere :arg2 energy :arg1 ( and :op2 beautiful )  )  :op2 ( good :domain food :mod surprise )
and :op1 ( fill :arg1 ( and :op1 ( crowd :degree little )  :op2 ( overpriced :degree bit )  )  :arg1 atmosphere :arg2 energy :arg1 ( and :op2 beautiful )  )  :op2 ( good :domain food :mod surprise )
contrast :arg1 ( order :arg0 we :mod only :arg1 ( and :op1 dessert :op2 drink )  )  :arg2 ( offer :arg1 ( refill :polarity - )  )
contrast :arg1 ( order :arg0 we :mod only :arg1 ( and :op1 dessert :op2 drink )  )  :arg2 ( offer :arg1 ( refill :polarity - )  )
few :domain i :location here :beneficiary ( and :op1 dinner :op1 brunch :purpose lunch )
few :domain i :location here :beneficiary ( and :op1 dinner :op1 brunch :purpose lunch )
few :domain i :location here :beneficiary ( and :op1 dinner :op1 brunch :purpose lunch )
or :op1 ( cube :arg1 ( beef :arg0-of ( kicker :mod real :arg1 menu )  )  )  :op3 ( chicken :prep-with ( and :op1 chili :op2 ( grass :mod lemon )  )  )
or :op1 ( cube :arg1 ( beef :arg0-of ( kicker :mod real :arg1 menu )  )  )  :op3 ( chicken :prep-with ( and :op1 chili :op2 ( grass :mod lemon )  )  )
or :op1 ( cube :arg1 ( beef :arg0-of ( kicker :mod real :arg1 menu )  )  )  :op3 ( chicken :prep-with ( and :op1 chili :op2 ( grass :mod lemon )  )  )
good :degree most :domain music :time ( visit :mod all :arg1 ( country :name ( name :op1 indian )  )  :arg0 i )
good :domain ( chop-down :arg0-of ( have :arg0 ( and :op1 bread :op2 lamb )  :arg0 i :time ( before :op1 meal )  )  )  :degree quite
good :domain ( chop-down :arg0-of ( have :arg0 ( and :op1 bread :op2 lamb )  :arg0 i :time ( before :op1 meal )  )  )  :degree quite
good :domain ( chop-down :arg0-of ( have :arg0 ( and :op1 bread :op2 lamb )  :arg0 i :time ( before :op1 meal )  )  )  :degree quite
have :arg1 ( and :op1 ( service :mod ( good :degree most )  :location nyc )  :op2 atmosphere )
have :arg1 ( and :op1 ( service :mod ( good :degree most )  :location nyc )  :op2 atmosphere )
order :arg1-of instead-of :arg1 ( beer :consist-of ice :mod cold :arg1-of ( work :arg2 ( country :name ( name :op1 indian )  )  )  )
and :op1 ( bring :arg0 they :arg1 ( noodle :mod complimentary )  )  :op2 ( ignore :arg1 ( request :arg1-of repeat :arg2 sugar )  )  :op2 ( throw-out :arg0 they :arg1 table )
and :op1 ( bring :arg0 they :arg1 ( noodle :mod complimentary )  )  :op2 ( ignore :arg1 ( request :arg1-of repeat :arg2 sugar )  )  :op2 ( throw-out :arg0 they :arg1 table )
and :op1 ( bring :arg0 they :arg1 ( noodle :mod complimentary )  )  :op2 ( ignore :arg1 ( request :arg1-of repeat :arg2 sugar )  )  :op2 ( throw-out :arg0 they :arg1 table )
masalum :mod ( tikka :mod ( chicken :mod ( good :degree most )  )  )
serve :arg0 ( dumpling :arg1-of excellent )  :arg1 ( decor :arg1-of clean :mod chic )
serve :arg0 ( dumpling :arg1-of excellent )  :arg1 ( decor :arg1-of clean :mod chic )
slow :arg1 kitchen :time ( always :mod almost )
excellent :arg0 ( and :op1 ( beef :mod corn )  :op2 pastrami )  :arg1 ( fatty :mod ( much :degree less )  :compared-to ( place :mod ( person :arg0-of tour :mod big )  :location ( around :op1 square )  )  )
excellent :arg0 ( and :op1 ( beef :mod corn )  :op2 pastrami )  :arg1 ( fatty :mod ( much :degree less )  :compared-to ( place :mod ( person :arg0-of tour :mod big )  :location ( around :op1 square )  )  )
contrast :arg2 ( go :arg1 ( place :arg1-of cute )  :manner ( wait :arg1 ( person :arg2-of staff :arg1-of nice )  )  :arg4 there :mod again )
contrast :arg2 ( go :arg1 ( place :arg1-of cute )  :manner ( wait :arg1 ( person :arg2-of staff :arg1-of nice )  )  :arg4 there :mod again )
and :op1 ( call :mod also :arg0 hostess :time today :arg2 ( thank :arg0 hostess :arg2 come )  )  :op2 ( mention :arg1 ( hope :arg0 she :arg1 ( enjoy :arg1 birthday :arg0 ( and :op1 ( above :degree beyond )  :op2 thing )  :arg0 ( person :arg0-of ( have-rel-role :arg2 girlfriend )  )  )  )  )
rude :mod ( again :degree bit )  :arg1 ( york :null_edge new )
and :op1 ( great :arg1-of ( be-located-at :arg0 ( slice :mod plain )  )  )  :op2 ( top :time ( get :arg0 you :arg1 topping )  :arg0 ( slice :mod whole )  :arg2 ( sprinkle :manner sparsely :null_edge some )  )
and :op1 ( great :arg1-of ( be-located-at :arg0 ( slice :mod plain )  )  )  :op2 ( top :time ( get :arg0 you :arg1 topping )  :arg0 ( slice :mod whole )  :arg2 ( sprinkle :manner sparsely :null_edge some )  )
and :op1 ( horrible :domain service :mod also )  :op2 ( great :domain ambience :degree that )
and :op1 ( horrible :domain service :mod also )  :op2 ( great :domain ambience :degree that )
good :null_edge ( great :domain service )  :domain takeout :degree too
good :null_edge ( great :domain service )  :domain takeout :degree too
and :op1 ( overprice :arg0 pizza )  :op2 ( soggy :domain pizza )
and :op1 ( excellent :arg1 everything :arg1 ( extensive :arg0 menu :degree quite )  )  :op2 ( eat :arg1 ( view :arg1 ( side :mod both :poss city )  )  )
and :op1 ( excellent :arg1 everything :arg1 ( extensive :arg0 menu :degree quite )  )  :op2 ( eat :arg1 ( view :arg1 ( side :mod both :poss city )  )  )
expensive :prep-for ( quality :poss food :mod little )  :degree too
s :location here :arg2 ( tank :arg1-of fake :mod fish )  :mod too
and :op2 ( service :domain i :arg1-of bad )  :op2 ( and :op1 ( fresh :domain fish )  :op2 delicious )
and :op2 ( service :domain i :arg1-of bad )  :op2 ( and :op1 ( fresh :domain fish )  :op2 delicious )
order :time time :arg0 ( and :op1 go :op2 ( and :arg1-of complete :op1 ( band :mod live :mod jazz )  :op2 atmosphere )  )  :arg0 i :arg1 ( salad :mod ( cobb :mod lobster )  )
order :time time :arg0 ( and :op1 go :op2 ( and :arg1-of complete :op1 ( band :mod live :mod jazz )  :op2 atmosphere )  )  :arg0 i :arg1 ( salad :mod ( cobb :mod lobster )  )
order :time time :arg0 ( and :op1 go :op2 ( and :arg1-of complete :op1 ( band :mod live :mod jazz )  :op2 atmosphere )  )  :arg0 i :arg1 ( salad :mod ( cobb :mod lobster )  )
decide :arg0 we :arg1 ( eat :arg0 we :location ( and :op1 ( room :mod tea )  :op1 small :op2 cute )  )
and :op1 ( meal :mod amazing )  :op2 experience
apppetizer :mod unique
and :op2 ( and :op1 ( attentive :domain ( person :arg2-of staff )  :time always )  :op2 kind )  :op2 ( amaze :arg1 person :time always :time ( thing :manner-of handle :arg1 ( size :quant all :mod various :arg1-of differ :mod group :arg1-of come )  )  )
deal :mod ( good :degree most )  :location town :arg2 ( dinner :time ( event :name ( name :op1 monday )  )  :time night :purpose ( restaurant :arg1-of fine )  )
didn :mod also :domain ( sandwich :arg1-of ( near :null_edge 7 )  )  :null_edge ( come :arg1 sandwich :null_edge ( or :op1 ( anything :arg1-of ( resemble :arg1 chip )  )  :op2 side )  )
didn :mod also :domain ( sandwich :arg1-of ( near :null_edge 7 )  )  :null_edge ( come :arg1 sandwich :null_edge ( or :op1 ( anything :arg1-of ( resemble :arg1 chip )  )  :op2 side )  )
didn :mod also :domain ( sandwich :arg1-of ( near :null_edge 7 )  )  :null_edge ( come :arg1 sandwich :null_edge ( or :op1 ( anything :arg1-of ( resemble :arg1 chip )  )  :op2 side )  )
contrast :arg2 ( wait :location here :arg1-of ( long :arg1 ( sum :mod dim )  )  :mod ( alternative :time ( or :domain you :op2 ( table :arg0-of share )  :op2 ( gig :domain ( atmosphere :arg1-of typical :mod raucous :mod dim )  )  )  :mod sleek :beneficiary chinatown )  )
contrast :arg2 ( wait :location here :arg1-of ( long :arg1 ( sum :mod dim )  )  :mod ( alternative :time ( or :domain you :op2 ( table :arg0-of share )  :op2 ( gig :domain ( atmosphere :arg1-of typical :mod raucous :mod dim )  )  )  :mod sleek :beneficiary chinatown )  )
contrast :arg2 ( wait :location here :arg1-of ( long :arg1 ( sum :mod dim )  )  :mod ( alternative :time ( or :domain you :op2 ( table :arg0-of share )  :op2 ( gig :domain ( atmosphere :arg1-of typical :mod raucous :mod dim )  )  )  :mod sleek :beneficiary chinatown )  )
contrast :arg2 ( wait :location here :arg1-of ( long :arg1 ( sum :mod dim )  )  :mod ( alternative :time ( or :domain you :op2 ( table :arg0-of share )  :op2 ( gig :domain ( atmosphere :arg1-of typical :mod raucous :mod dim )  )  )  :mod sleek :beneficiary chinatown )  )
contrast :arg2 ( need :arg1 ( place :mod this )  :arg1 ( potential :mod good )  :arg1 ( work :quant ( amount :arg1-of significant )  :time ( before :op1 ( possible :arg1 ( justify :arg0 we :arg1 ( spend :arg0 we :arg1 ( money :quant much )  :arg4 ( food :mod ( country :name ( name :op1 indian )  )  :arg1-of ( get :arg0 you :arg1-of possible :location ( everywhere :mod else )  )  )  )  )  )  )  )  )
contrast :arg2 ( need :arg1 ( place :mod this )  :arg1 ( potential :mod good )  :arg1 ( work :quant ( amount :arg1-of significant )  :time ( before :op1 ( possible :arg1 ( justify :arg0 we :arg1 ( spend :arg0 we :arg1 ( money :quant much )  :arg4 ( food :mod ( country :name ( name :op1 indian )  )  :arg1-of ( get :arg0 you :arg1-of possible :location ( everywhere :mod else )  )  )  )  )  )  )  )  )
cook :arg1 everything :time always :arg2 perfection :arg1 ( and :op2 ( excellent :arg1 service )  :op1 ( cool :arg1 decor )  :op2 understate )
cook :arg1 everything :time always :arg2 perfection :arg1 ( and :op2 ( excellent :arg1 service )  :op1 ( cool :arg1 decor )  :op2 understate )
good :domain ( food :mod thai )
and :op1 ( select :mod great :arg1 wine )  :op2 seafood
and :op1 ( select :mod great :arg1 wine )  :op2 seafood
price :arg1-of accept
seat :arg1 we :location ( bar :mod sushi )  :location yasuda
restaurant :null_edge ( make :arg1 title )  :arg1-of afford :arg1-of ( taste :mod great )
definite :arg1 ( thing :arg2-of price )
and :op1 orsay :degree very :op2 ( throw :arg0 orsay )  :op1 back :op1 ( food :mod tradition :mod ( country :name ( name :op1 france )  )  )  :op2 ( service :mod ( country :name ( name :op1 france )  )  )
and :op1 orsay :degree very :op2 ( throw :arg0 orsay )  :op1 back :op1 ( food :mod tradition :mod ( country :name ( name :op1 france )  )  )  :op2 ( service :mod ( country :name ( name :op1 france )  )  )
and :op1 ( easy :arg1 ( get :arg1 table :arg2 ( group :mod large )  )  )  :op2 ( hustle :arg1 ( t :null_edge don )  )
food :mod great :arg1-of ( thing :arg2-of price :arg1-of reasonable )
food :mod great :arg1-of ( thing :arg2-of price :arg1-of reasonable )
delicious :arg1 salad :domain ( begin :arg1 meal )
delicious :arg1 salad :domain ( begin :arg1 meal )
and :op2 ( and :op1 ( order :arg0 i :arg1 ( duck :arg1-of tamarind )  :time ( evoke :arg1 ( flavor :mod thai )  :manner ( way :mod ( expect :polarity - )  )  )  )  :op2 ( order :arg1 ( noodle :arg1 ( beef :mod ground )  )  :arg0 ( person :arg0-of ( have-rel-role :arg2 wife )  )  )  :op2 ( delight :arg1 we )  )
and :op2 ( and :op1 ( order :arg0 i :arg1 ( duck :arg1-of tamarind )  :time ( evoke :arg1 ( flavor :mod thai )  :manner ( way :mod ( expect :polarity - )  )  )  )  :op2 ( order :arg1 ( noodle :arg1 ( beef :mod ground )  )  :arg0 ( person :arg0-of ( have-rel-role :arg2 wife )  )  )  :op2 ( delight :arg1 we )  )
and :op2 ( and :op1 ( order :arg0 i :arg1 ( duck :arg1-of tamarind )  :time ( evoke :arg1 ( flavor :mod thai )  :manner ( way :mod ( expect :polarity - )  )  )  )  :op2 ( order :arg1 ( noodle :arg1 ( beef :mod ground )  )  :arg0 ( person :arg0-of ( have-rel-role :arg2 wife )  )  )  :op2 ( delight :arg1 we )  )
and :op2 ( and :op1 ( order :arg0 i :arg1 ( duck :arg1-of tamarind )  :time ( evoke :arg1 ( flavor :mod thai )  :manner ( way :mod ( expect :polarity - )  )  )  )  :op2 ( order :arg1 ( noodle :arg1 ( beef :mod ground )  )  :arg0 ( person :arg0-of ( have-rel-role :arg2 wife )  )  )  :op2 ( delight :arg1 we )  )
have :arg0 ( you :location ( along :op1 ( river :mod ever )  )  )  :location weehawken :arg0 you :arg1 ( idea :topic view :topic ( offer :arg0 ( government-organization :name ( name :op1 house )  :mod chart )  )  )
price :quant 9 :arg1-of entree :arg1 dinner :example and :quant ( less :mod even :null_edge lunch )
price :quant 9 :arg1-of entree :arg1 dinner :example and :quant ( less :mod even :null_edge lunch )
price :quant 9 :arg1-of entree :arg1 dinner :example and :quant ( less :mod even :null_edge lunch )
price :quant 9 :arg1-of entree :arg1 dinner :example and :quant ( less :mod even :null_edge lunch )
and :op2 ( possible :arg1 ( beat :arg0 you :arg1 price )  )
recommend :arg2 you :arg1 ( impress :arg0 cuisine :arg0 ( try :mod definite )  )
have :arg0 i :arg1 ( product :name ( name :op1 cod )  :arg1-of black )  :accompanier ( sauce :mod yuzu :arg1-of wonderful )
price :arg1-of ( high :degree too :arg1 ( and :op1 ( cramped :mod this )  :op2 unappealing :op1 resturant )  )
hipster :arg2-of total :arg1 ( wannabe :arg1 ( attitude :mod ( spot :arg1-of ( sweet :mod otherwise )  )  )  )
wait :null_edge yes :null_edge ( have :arg0 you :arg1 ( reserve :polarity - )  )
wait :null_edge yes :null_edge ( have :arg0 you :arg1 ( reserve :polarity - )  )
everything :source ( and :op1 ( bread :arg1-of soft :arg1-of ( wait :duration ( temporal-quantity :unit minute :quant 50 )  )  :arg1-of ( serve :mod ( rude :degree incredible )  :arg0-of ( deliver :arg4 ( below :op1 ( food :arg1-of average )  )  )  )  )  :op2 ( salad :mod soggy )  )
everything :source ( and :op1 ( bread :arg1-of soft :arg1-of ( wait :duration ( temporal-quantity :unit minute :quant 50 )  )  :arg1-of ( serve :mod ( rude :degree incredible )  :arg0-of ( deliver :arg4 ( below :op1 ( food :arg1-of average )  )  )  )  )  :op2 ( salad :mod soggy )  )
everything :source ( and :op1 ( bread :arg1-of soft :arg1-of ( wait :duration ( temporal-quantity :unit minute :quant 50 )  )  :arg1-of ( serve :mod ( rude :degree incredible )  :arg0-of ( deliver :arg4 ( below :op1 ( food :arg1-of average )  )  )  )  )  :op2 ( salad :mod soggy )  )
everything :source ( and :op1 ( bread :arg1-of soft :arg1-of ( wait :duration ( temporal-quantity :unit minute :quant 50 )  )  :arg1-of ( serve :mod ( rude :degree incredible )  :arg0-of ( deliver :arg4 ( below :op1 ( food :arg1-of average )  )  )  )  )  :op2 ( salad :mod soggy )  )
everything :source ( and :op1 ( bread :arg1-of soft :arg1-of ( wait :duration ( temporal-quantity :unit minute :quant 50 )  )  :arg1-of ( serve :mod ( rude :degree incredible )  :arg0-of ( deliver :arg4 ( below :op1 ( food :arg1-of average )  )  )  )  )  :op2 ( salad :mod soggy )  )
contrast :arg1 ( favor :domain sicilian )  :arg1 ( dry :mod moist :arg2 ( place :quant most )  )  :arg2 ( great :domain ( pizza :quant all )  )
contrast :arg1 ( favor :domain sicilian )  :arg1 ( dry :mod moist :arg2 ( place :quant most )  )  :arg2 ( great :domain ( pizza :quant all )  )
attract :arg1 ( lounge :mod downstairs )  :time always :mod good
expensive :domain ( price :arg1 menu )  :degree bit :arg2 ( get :arg0 you :arg2 ( size :arg2 ( and :op1 quality :op2 portion )  )  )
expensive :domain ( price :arg1 menu )  :degree bit :arg2 ( get :arg0 you :arg2 ( size :arg2 ( and :op1 quality :op2 portion )  )  )
expensive :domain ( price :arg1 menu )  :degree bit :arg2 ( get :arg0 you :arg2 ( size :arg2 ( and :op1 quality :op2 portion )  )  )
and :op1 ( amaze :arg0 food :arg1 ( or :op2 ( prompt :arg0 service )  :op2 helpful :op1 bear :op2 rush )  )
and :op1 ( amaze :arg0 food :arg1 ( or :op2 ( prompt :arg0 service )  :op2 helpful :op1 bear :op2 rush )  )
deliver :arg1 food :arg0 ( waiter :null_edge busboy )  :arg1 ( remain :arg1 ( and :op1 ( get :arg0 we :arg1 ( cheese-off :polarity - :arg1-of ( offer :arg3 pasta )  )  )  :op1 water :op3 ( glasses :mod wine )  )  :arg3 empty :arg1 ( meal :mod entire )  :arg3 ( spend :arg0 we :mod ( another :quant 20 )  :arg1 wine )  )
deliver :arg1 food :arg0 ( waiter :null_edge busboy )  :arg1 ( remain :arg1 ( and :op1 ( get :arg0 we :arg1 ( cheese-off :polarity - :arg1-of ( offer :arg3 pasta )  )  )  :op1 water :op3 ( glasses :mod wine )  )  :arg3 empty :arg1 ( meal :mod entire )  :arg3 ( spend :arg0 we :mod ( another :quant 20 )  :arg1 wine )  )
deliver :arg1 food :arg0 ( waiter :null_edge busboy )  :arg1 ( remain :arg1 ( and :op1 ( get :arg0 we :arg1 ( cheese-off :polarity - :arg1-of ( offer :arg3 pasta )  )  )  :op1 water :op3 ( glasses :mod wine )  )  :arg3 empty :arg1 ( meal :mod entire )  :arg3 ( spend :arg0 we :mod ( another :quant 20 )  :arg1 wine )  )
deliver :arg1 food :arg0 ( waiter :null_edge busboy )  :arg1 ( remain :arg1 ( and :op1 ( get :arg0 we :arg1 ( cheese-off :polarity - :arg1-of ( offer :arg3 pasta )  )  )  :op1 water :op3 ( glasses :mod wine )  )  :arg3 empty :arg1 ( meal :mod entire )  :arg3 ( spend :arg0 we :mod ( another :quant 20 )  :arg1 wine )  )
deliver :arg1 food :arg0 ( waiter :null_edge busboy )  :arg1 ( remain :arg1 ( and :op1 ( get :arg0 we :arg1 ( cheese-off :polarity - :arg1-of ( offer :arg3 pasta )  )  )  :op1 water :op3 ( glasses :mod wine )  )  :arg3 empty :arg1 ( meal :mod entire )  :arg3 ( spend :arg0 we :mod ( another :quant 20 )  :arg1 wine )  )
deliver :arg1 food :arg0 ( waiter :null_edge busboy )  :arg1 ( remain :arg1 ( and :op1 ( get :arg0 we :arg1 ( cheese-off :polarity - :arg1-of ( offer :arg3 pasta )  )  )  :op1 water :op3 ( glasses :mod wine )  )  :arg3 empty :arg1 ( meal :mod entire )  :arg3 ( spend :arg0 we :mod ( another :quant 20 )  :arg1 wine )  )
deliver :arg1 food :arg0 ( waiter :null_edge busboy )  :arg1 ( remain :arg1 ( and :op1 ( get :arg0 we :arg1 ( cheese-off :polarity - :arg1-of ( offer :arg3 pasta )  )  )  :op1 water :op3 ( glasses :mod wine )  )  :arg3 empty :arg1 ( meal :mod entire )  :arg3 ( spend :arg0 we :mod ( another :quant 20 )  :arg1 wine )  )
great :domain takeout :degree too :condition ( give :arg1 ( quality :arg1-of high )  :arg1 tupperware )
and :op1 ( fresh :domain food )  :op1 ( bland :domain sauce )  :op2 ( oily :arg1 sauce :degree very )
and :op1 ( fresh :domain food )  :op1 ( bland :domain sauce )  :op2 ( oily :arg1 sauce :degree very )
possible :arg1 ( pricey :prep-without ( meal :mod prix :mod fixe )  )
and :op1 ( spot :domain this :mod definite :arg1-of excellent :arg1 date :arg1-of ( cause :arg0 ambiance )  :arg0 ( scene :time weekend :time night :degree ( more :compared-to ( live :op alive )  )  )  )
and :op1 ( spot :domain this :mod definite :arg1-of excellent :arg1 date :arg1-of ( cause :arg0 ambiance )  :arg0 ( scene :time weekend :time night :degree ( more :compared-to ( live :op alive )  )  )  )
and :op1 ( spot :domain this :mod definite :arg1-of excellent :arg1 date :arg1-of ( cause :arg0 ambiance )  :arg0 ( scene :time weekend :time night :degree ( more :compared-to ( live :op alive )  )  )  )
like :arg0 one :mod actual :arg1 expresso
awesome :mod again :arg0 waitress
love :arg0 i :arg1 ( everythig :arg1 it :op1 ( show :mod especially )  )  :arg1 and
love :arg0 i :arg1 ( everythig :arg1 it :op1 ( show :mod especially )  )  :arg1 and
xconcept :x ( and :op2 ( and :op1 ( fast :domain service )  :op2 ( friendly :arg1 service )  :op2 ( have :arg1 ( sauce :mod ( good :degree most )  :arg1-of hot :arg1-of ( add :arg2 meal )  )  )  )  )  :x ( and :op2 ( tasty :domain food :degree very )  )
xconcept :x ( and :op2 ( and :op1 ( fast :domain service )  :op2 ( friendly :arg1 service )  :op2 ( have :arg1 ( sauce :mod ( good :degree most )  :arg1-of hot :arg1-of ( add :arg2 meal )  )  )  )  )  :x ( and :op2 ( tasty :domain food :degree very )  )
xconcept :x ( and :op2 ( and :op1 ( fast :domain service )  :op2 ( friendly :arg1 service )  :op2 ( have :arg1 ( sauce :mod ( good :degree most )  :arg1-of hot :arg1-of ( add :arg2 meal )  )  )  )  )  :x ( and :op2 ( tasty :domain food :degree very )  )
xconcept :x ( and :op2 ( and :op1 ( fast :domain service )  :op2 ( friendly :arg1 service )  :op2 ( have :arg1 ( sauce :mod ( good :degree most )  :arg1-of hot :arg1-of ( add :arg2 meal )  )  )  )  )  :x ( and :op2 ( tasty :domain food :degree very )  )
ok :arg1 food :mod just :arg1 i :direction back
ambiance :arg2 boot
remind :arg0 ( fedelus :mod scalina )  :arg0 service :time ( integral :degree so :arg2 ( dine :arg1-of fine )  )
remind :arg0 ( fedelus :mod scalina )  :arg0 service :time ( integral :degree so :arg2 ( dine :arg1-of fine )  )
recommend :arg0 i :arg1 ( popcorn :mod thai )
look :arg1 everything :arg1 great :arg1 ( drink :quant decor :mod even )
look :arg1 everything :arg1 great :arg1 ( drink :quant decor :mod even )
look :arg1 everything :arg1 great :arg1 ( drink :quant decor :mod even )
appear :arg1 ( lift :arg1 pen :arg3 check :arg0 ( person :arg0-of ( have-rel-role :arg2 father )  )  )  :arg1 chef :arg1 usher-in
appear :arg1 ( lift :arg1 pen :arg3 check :arg0 ( person :arg0-of ( have-rel-role :arg2 father )  )  )  :arg1 chef :arg1 usher-in
and :op1 paratha :op2 kebab :op1 ( order :arg2 ( ensure :arg1 ( level :mod freshness :mod ( surpass :polarity - )  )  )  )
and :op1 paratha :op2 kebab :op1 ( order :arg2 ( ensure :arg1 ( level :mod freshness :mod ( surpass :polarity - )  )  )  )
excellent :arg1 ( and :op1 tuna :op2 potatoe )
excellent :arg1 ( and :op1 tuna :op2 potatoe )
girl :domain ( disappoint :mod only )  :mod coat :purpose check :arg1-of ( seem :arg1 ( know :arg0 didn :arg0 ( customer :prep-on ( non :mod realtively :arg2 ( girl :time ( night :mod busy )  :mod ( check :arg1 coat )  )  )  )  )  )
girl :domain ( disappoint :mod only )  :mod coat :purpose check :arg1-of ( seem :arg1 ( know :arg0 didn :arg0 ( customer :prep-on ( non :mod realtively :arg2 ( girl :time ( night :mod busy )  :mod ( check :arg1 coat )  )  )  )  )  )
and :op2 fiance :op2 ( scopa :purpose ( birthday :time ( week :mod last )  )  )  :op2 ( couldn :arg0 i )  :op2 ( believe :arg1 food )
cold :domain ummm :domain beer
and :domain we :op1 ( dessert :mod great :null_edge ( cannolus :mod ( good :degree most )  :arg0-of ( have :arg0 i :time ever )  )  )  :op2 ( offer :arg0 they :arg1 ( drink :mod ( dinner :time after :location house )  )  )
and :domain we :op1 ( dessert :mod great :null_edge ( cannolus :mod ( good :degree most )  :arg0-of ( have :arg0 i :time ever )  )  )  :op2 ( offer :arg0 they :arg1 ( drink :mod ( dinner :time after :location house )  )  )
and :domain we :op1 ( dessert :mod great :null_edge ( cannolus :mod ( good :degree most )  :arg0-of ( have :arg0 i :time ever )  )  )  :op2 ( offer :arg0 they :arg1 ( drink :mod ( dinner :time after :location house )  )  )
crowd :mod good :prep-with ( vibe :mod ( hip :part-of ( seating :mod good :mod outdoor )  )  :mod ( country :name ( name :op1 japanese )  )  )
crowd :mod good :prep-with ( vibe :mod ( hip :part-of ( seating :mod good :mod outdoor )  )  :mod ( country :name ( name :op1 japanese )  )  )
and :op1 ( ask :arg0 we :arg1 ( move :arg1 take )  :arg1 ( wish :mod even :arg1 ( rest :part-of room )  :mod practical )  )  :op2 ( seat :location ( area :mod ( traffic :arg1-of high )  )  :location back )
and :op1 ( ask :arg0 we :arg1 ( move :arg1 take )  :arg1 ( wish :mod even :arg1 ( rest :part-of room )  :mod practical )  )  :op2 ( seat :location ( area :mod ( traffic :arg1-of high )  )  :location back )
good :domain ( find :arg1 ( restaurant :arg0-of ( obligate :arg0 ( person :arg0-of own )  :arg1 ( imagination :quant some )  :arg1 ( and :op2 ( pull :mod actual )  )  )  )  )  :arg2 ( case :mod this )
and :op2 ( have :arg0 popularity :arg1 yet )  :op2 slow-down :op2 ( find :arg0 popularity :mod still :arg1 ( draw :arg2 ( and :op1 ambiance :op2 reputation )  )  )
clear :condition ( display :arg0 ( tank :location ( restaurant :mod other :mod chinatown )  )  :arg0-of ( sad :arg1-of lurk )  :arg1 ( look :arg0 tank :arg1 ( life :mod ( military :name ( name :op1 marine )  )  )  :arg1 ( water :mod murky )  )  :arg0 tank )  :arg1 tank :arg1 ( glass :arg2 ( creature :arg0-of ( look :arg1 healthy )  :arg0-of ( know :time yet :arg1 ( brunch :mod ( sum :mod some :mod dim )  :mod lover )  )  )  )
clear :condition ( display :arg0 ( tank :location ( restaurant :mod other :mod chinatown )  )  :arg0-of ( sad :arg1-of lurk )  :arg1 ( look :arg0 tank :arg1 ( life :mod ( military :name ( name :op1 marine )  )  )  :arg1 ( water :mod murky )  )  :arg0 tank )  :arg1 tank :arg1 ( glass :arg2 ( creature :arg0-of ( look :arg1 healthy )  :arg0-of ( know :time yet :arg1 ( brunch :mod ( sum :mod some :mod dim )  :mod lover )  )  )  )
clear :condition ( display :arg0 ( tank :location ( restaurant :mod other :mod chinatown )  )  :arg0-of ( sad :arg1-of lurk )  :arg1 ( look :arg0 tank :arg1 ( life :mod ( military :name ( name :op1 marine )  )  )  :arg1 ( water :mod murky )  )  :arg0 tank )  :arg1 tank :arg1 ( glass :arg2 ( creature :arg0-of ( look :arg1 healthy )  :arg0-of ( know :time yet :arg1 ( brunch :mod ( sum :mod some :mod dim )  :mod lover )  )  )  )
clear :condition ( display :arg0 ( tank :location ( restaurant :mod other :mod chinatown )  )  :arg0-of ( sad :arg1-of lurk )  :arg1 ( look :arg0 tank :arg1 ( life :mod ( military :name ( name :op1 marine )  )  )  :arg1 ( water :mod murky )  )  :arg0 tank )  :arg1 tank :arg1 ( glass :arg2 ( creature :arg0-of ( look :arg1 healthy )  :arg0-of ( know :time yet :arg1 ( brunch :mod ( sum :mod some :mod dim )  :mod lover )  )  )  )
and :op2 halibut :degree too :op2 ( dessert :mod ( waste :purpose ( calorie :arg0-of don )  )  )  :op2 ( poor :domain service )
and :op2 halibut :degree too :op2 ( dessert :mod ( waste :purpose ( calorie :arg0-of don )  )  )  :op2 ( poor :domain service )
and :op2 halibut :degree too :op2 ( dessert :mod ( waste :purpose ( calorie :arg0-of don )  )  )  :op2 ( poor :domain service )
and :op1 ( spectacular :domain view )  :op2 ( great :domain food )
and :op1 ( spectacular :domain view )  :op2 ( great :domain food )
contrast :arg1 ( t :domain wasn )  :arg2 ( find :arg0 wasn :arg1-of ( hard :degree too )  )  :arg1 ( as-soon-as :op2 kind-of :op1 ( get :arg0 ( and :op2 i :op1 ( person :arg0-of ( have-rel-role :arg2 boyfriend )  )  )  :arg1 ( food :arg0-of ( reach :arg1 door )  )  )  )
and :op1 ( bagel :mod good )  :op2 ( cheese-off :mod good :mod cream )
and :op1 ( bagel :mod good )  :op2 ( cheese-off :mod good :mod cream )
and :op2 ( and :op1 ( wonderful :domain food :null_edge ( and :op2 service :op2 ( friendly :arg1 service )  :op1 ( reason :mod professional )  )  )  :op2 ( tasty :arg1 food )  )  :op2 fill-in
and :op2 ( and :op1 ( wonderful :domain food :null_edge ( and :op2 service :op2 ( friendly :arg1 service )  :op1 ( reason :mod professional )  )  )  :op2 ( tasty :arg1 food )  )  :op2 fill-in
price :mod also :manner ( well :degree extreme )
service :mod ( great :time always )
do :arg0 i :arg0 i :null_edge ( awsome :domain food )
contrast :arg1 ( order :arg0 we :arg1 ( casserole :mod chicken )  )  :arg2 ( piece :arg1-of ( get :arg0 we )  :quant few :mod small :arg1 ( and :op1 ( chicken :mod bone )  :op2 ( meat :quant all :arg1-of dark )  )  )
contrast :arg1 ( order :arg0 we :arg1 ( casserole :mod chicken )  )  :arg2 ( piece :arg1-of ( get :arg0 we )  :quant few :mod small :arg1 ( and :op1 ( chicken :mod bone )  :op2 ( meat :quant all :arg1-of dark )  )  )
contrast :arg1 ( order :arg0 we :arg1 ( casserole :mod chicken )  )  :arg2 ( piece :arg1-of ( get :arg0 we )  :quant few :mod small :arg1 ( and :op1 ( chicken :mod bone )  :op2 ( meat :quant all :arg1-of dark )  )  )
breezy :degree bit :location there :arg2 ( come :arg1 mezzanine :arg1 wind :arg3 track )
go :arg0 i :arg4 df :purpose ( dinner :null_edge ( festival :name ( name :op1 valentines )  )  :mod day )
recommend :arg0 i :arg1 ( and :op1 ( fish :mod jelly )  :op2 ( chicken :mod drunken )  :op2 dumpling :op2 ( stir :mod certain :arg1 ( crab :manner blue )  )  )
recommend :arg0 i :arg1 ( and :op1 ( fish :mod jelly )  :op2 ( chicken :mod drunken )  :op2 dumpling :op2 ( stir :mod certain :arg1 ( crab :manner blue )  )  )
recommend :arg0 i :arg1 ( and :op1 ( fish :mod jelly )  :op2 ( chicken :mod drunken )  :op2 dumpling :op2 ( stir :mod certain :arg1 ( crab :manner blue )  )  )
recommend :arg0 i :arg1 ( and :op1 ( fish :mod jelly )  :op2 ( chicken :mod drunken )  :op2 dumpling :op2 ( stir :mod certain :arg1 ( crab :manner blue )  )  )
love :arg0 i :arg1 show
possible :arg1 ( make :arg0 we :arg1 ( meal :arg1 ( dumpling :mod yummy :source ( menu :mod dumple )  )  )  )
possible :arg1 ( make :arg0 we :arg1 ( meal :arg1 ( dumpling :mod yummy :source ( menu :mod dumple )  )  )  )
possible :arg1 ( make :arg0 we :arg1 ( meal :arg1 ( dumpling :mod yummy :source ( menu :mod dumple )  )  )  )
aesthetics :arg1 ( place :mod this )  :arg1 ( lounge :mod airport )
aesthetics :arg1 ( place :mod this )  :arg1 ( lounge :mod airport )
rip :arg1 ( wine :arg1-of free :mod box )
and :op1 ( eat :arg0 ( and :op2 i :op1 ( person :arg0-of ( have-rel-role :arg2 wife )  )  )  :location here :time ( early :op1 ( week :mod this )  )  )  :op2 ( stop :arg1 ( and :op1 rant :op2 rave :op2 food )  )
slice :arg1 ( pre :null_edge you :poss don :mod mind )  :arg1 ( and :op1 ( fish :arg1-of low :mod quality )  :op2 ( person :arg2-of staff :mod unfriendly )  :op2 ( chef :mod sushi :arg0-of ( look :arg1 ( miserable :domain ( place :domain this )  )  )  )  )
slice :arg1 ( pre :null_edge you :poss don :mod mind )  :arg1 ( and :op1 ( fish :arg1-of low :mod quality )  :op2 ( person :arg2-of staff :mod unfriendly )  :op2 ( chef :mod sushi :arg0-of ( look :arg1 ( miserable :domain ( place :domain this )  )  )  )  )
slice :arg1 ( pre :null_edge you :poss don :mod mind )  :arg1 ( and :op1 ( fish :arg1-of low :mod quality )  :op2 ( person :arg2-of staff :mod unfriendly )  :op2 ( chef :mod sushi :arg0-of ( look :arg1 ( miserable :domain ( place :domain this )  )  )  )  )
food :mod just :arg1-of contrast
food :mod just :arg1-of contrast
and :op1 ( yummy :domain pizza )  :op2 ( like :arg1 pizza :arg1 atmoshpere )
and :op1 ( yummy :domain pizza )  :op2 ( like :arg1 pizza :arg1 atmoshpere )
except :arg1 ( choose :arg1 ( many :degree so )  :time ( wander :arg0 we :arg0 ( and :op1 up :op1 down )  :arg0 ( and :op2 ( look :arg1 street :arg1 window )  :op2 ( seat :arg1-of ( noticicing :mod such )  :quant many :arg1-of empty )  )  )  )  :arg1 ( mahal :mod taj )
plan :mod also :arg0 ( t :null_edge don )  :arg1 ( ask :arg0 t :arg1 ( roll :mod favor )  )  :arg1 ( possible :arg1 ( have :null_edge ( s :arg1 menu )  :arg0 you )  )
plan :mod also :arg0 ( t :null_edge don )  :arg1 ( ask :arg0 t :arg1 ( roll :mod favor )  )  :arg1 ( possible :arg1 ( have :null_edge ( s :arg1 menu )  :arg0 you )  )
food :mod good
contrast :arg2 ( and :op1 ( big :domain roll )  :op1 good :op2 ( fresh :arg1 ( t :null_edge sashimus )  )  )
pizza :domain ( pizza :mod pesto )  :arg1-of excellent :arg1-of thin :mod ( crust :part-of ( cheese-off :quant ( amount :arg1-of nice )  :mod spicy :mod ( country :name ( name :op1 italian )  )  :arg1-of ( hear :arg0 i :time before )  )  )
pizza :domain ( pizza :mod pesto )  :arg1-of excellent :arg1-of thin :mod ( crust :part-of ( cheese-off :quant ( amount :arg1-of nice )  :mod spicy :mod ( country :name ( name :op1 italian )  )  :arg1-of ( hear :arg0 i :time before )  )  )
pizza :domain ( pizza :mod pesto )  :arg1-of excellent :arg1-of thin :mod ( crust :part-of ( cheese-off :quant ( amount :arg1-of nice )  :mod spicy :mod ( country :name ( name :op1 italian )  )  :arg1-of ( hear :arg0 i :time before )  )  )
and :op1 ( try :arg1 ( value :arg1 ( shrimp :mod spicy )  :mod again :mod ( great :degree most :compared-to ( world :mod ( thing :arg2-of price )  )  )  )  )  :op2 ( great :domain ( vindaloo :mod lamb )  )
and :op1 ( try :arg1 ( value :arg1 ( shrimp :mod spicy )  :mod again :mod ( great :degree most :compared-to ( world :mod ( thing :arg2-of price )  )  )  )  )  :op2 ( great :domain ( vindaloo :mod lamb )  )
and :op1 ( go :arg1 ambience )  :op2 ( consider :arg1 food :arg1 ( trip :mod just :location ( across :op1 world )  )  )
and :op1 ( go :arg1 ambience )  :op2 ( consider :arg1 food :arg1 ( trip :mod just :location ( across :op1 world )  )  )
great :domain food :manner good :condition ( or :op1 wait :op2 ( visit :mod another )  )
and :domain i :op2 ( dinner :quant ( many :degree so )  )  :location here :op2 ( perfect :arg0 i :time always :time ( date-entity :arg2 ( person :arg0-of ( have-rel-role :arg2 husband )  )  )  :compared-to ( and :op2 ( group :mod large )  :op2 ( person :arg0-of ( have-rel-role :arg2 girlfriend )  )  )  :arg2 ( person :arg0-of ( have-rel-role :arg2 mom )  )  )
head :condition ( want :arg0 you :arg1 ( piece :mod beef )  )  :prep-to over
onion :arg1 ( and :op1 ( spice :mod delicate :null_edge ( rotus :mod ass )  )  :op2 egg :op2 kick-in-the-door )
onion :arg1 ( and :op1 ( spice :mod delicate :null_edge ( rotus :mod ass )  )  :op2 egg :op2 kick-in-the-door )
onion :arg1 ( and :op1 ( spice :mod delicate :null_edge ( rotus :mod ass )  )  :op2 egg :op2 kick-in-the-door )
onion :arg1 ( and :op1 ( spice :mod delicate :null_edge ( rotus :mod ass )  )  :op2 egg :op2 kick-in-the-door )
bring :arg0 ( food :mod incredible :arg1-of ( thing :arg2-of price :manner ( agreable :degree very )  )  )  :direction back :arg3 ( temporal-quantity :unit day :mod just :mod other )  :arg2 ( restaurant :mod this :mod ( thai :mod authentic )  )
bring :arg0 ( food :mod incredible :arg1-of ( thing :arg2-of price :manner ( agreable :degree very )  )  )  :direction back :arg3 ( temporal-quantity :unit day :mod just :mod other )  :arg2 ( restaurant :mod this :mod ( thai :mod authentic )  )
have :mod also :null_edge ( want :arg0 you :arg0 ( t :null_edge don )  :arg1 ( sit :arg0 you :arg0 t :arg2 ( table :mod certain )  )  )  :null_edge you :arg0 ( t :null_edge don )
multi-sentence :arg1 menu :domain ( option :quant lot )  :snt2 ( hope :arg0 i :arg1 ( go :direction back :purpose ( try :arg1 ( pancake :consist-of potato )  )  )  )
multi-sentence :arg1 menu :domain ( option :quant lot )  :snt2 ( hope :arg0 i :arg1 ( go :direction back :purpose ( try :arg1 ( pancake :consist-of potato )  )  )  )
thing :time ( soon :compared-to ( wake-up :arg0 i :location ( or :op1 date-entity :op2 ( person :name ( name :op1 sunday )  )  )  )  )  :location mind :domain ( and :op1 ( get :arg2 ( dumpling :arg1-of fry )  )  )
contrast :arg1 ( and :op1 ( t :domain ( isn :topic ( staff :arg0-of serve )  )  )  :op2 ( or :op1 friendliest :op2 ( competent :degree most )  )  :op2 ( make :arg0 isn :null_edge ( everything :mod else :topic ( place :mod this )  )  )  )
contrast :arg1 ( and :op1 ( t :domain ( isn :topic ( staff :arg0-of serve )  )  )  :op2 ( or :op1 friendliest :op2 ( competent :degree most )  )  :op2 ( make :arg0 isn :null_edge ( everything :mod else :topic ( place :mod this )  )  )  )
and :op1 ( order :arg0 ( and :op2 i :op1 ( person :arg0-of ( have-rel-role :arg2 wife )  )  )  :mod usual :mod only :arg1 ( and :op1 ( primus :quant 1 )  :op2 ( secondus :quant 1 )  )  )  :op2 split :condition ( tend :arg1 ( offer :arg1 ( portion :mod large )  )  )
and :op1 ( order :arg0 ( and :op2 i :op1 ( person :arg0-of ( have-rel-role :arg2 wife )  )  )  :mod usual :mod only :arg1 ( and :op1 ( primus :quant 1 )  :op2 ( secondus :quant 1 )  )  )  :op2 split :condition ( tend :arg1 ( offer :arg1 ( portion :mod large )  )  )
and :op1 ( order :arg0 ( and :op2 i :op1 ( person :arg0-of ( have-rel-role :arg2 wife )  )  )  :mod usual :mod only :arg1 ( and :op1 ( primus :quant 1 )  :op2 ( secondus :quant 1 )  )  )  :op2 split :condition ( tend :arg1 ( offer :arg1 ( portion :mod large )  )  )
and :op1 ( overheard :arg0 i :manner ve :arg1 ( comment :arg3 ( person :arg1-of employ )  :arg1 ( deliver :arg1-of recommend :arg2 ( area :mod dine )  )  )  )  :op3 ( sit :arg1 i :arg2 there :time ( lecture :arg1 ( customer :mod another )  )  )
and :op1 ( overheard :arg0 i :manner ve :arg1 ( comment :arg3 ( person :arg1-of employ )  :arg1 ( deliver :arg1-of recommend :arg2 ( area :mod dine )  )  )  )  :op3 ( sit :arg1 i :arg2 there :time ( lecture :arg1 ( customer :mod another )  )  )
cake :mod delicious :mod crab :mod too
experience :domain this :arg1-of bad :mod dine :arg0-of ( have :arg0 i :time ever )
and :op1 ( come :arg1 i :location here :duration ( multiple :op1 ( temporal-quantity :unit year )  )  )  :op2 ( have :arg0 i :arg1 ( thing :mod nothing :mod ( good :arg2 ( say :arg1 ( and :op1 serve :op2 ( person :arg2-of staff :mod great :location ( lanterna :null_edge la )  )  )  )  )  )  )
and :op1 ( come :arg1 i :location here :duration ( multiple :op1 ( temporal-quantity :unit year )  )  )  :op2 ( have :arg0 i :arg1 ( thing :mod nothing :mod ( good :arg2 ( say :arg1 ( and :op1 serve :op2 ( person :arg2-of staff :mod great :location ( lanterna :null_edge la )  )  )  )  )  )  )
bring :mod just :arg1 ( someone :arg0-of speak )  :arg1-of ( cause :arg1 ( possible :arg1 ( understand :arg0 waiter :arg0 you )  )  )
and :op1 ( bruschetta :null_edge ( yummy :degree so )  )  :op2 paninus
and :op1 ( bruschetta :null_edge ( yummy :degree so )  )  :op2 paninus
okay :arg1 food :arg1 ( great :domain nothing )
bump :arg0 ( and :op1 ( waitress :mod every :arg1-of pass )  :op2 customer )  :arg2 chair
wait :degree ( full :time always :mod popular :time always )  :time always
run :arg1 ( chef :arg1-of same :mod sichuan :arg0-of ( start :arg1 chain :medium chinatown )  )
seem :arg1 ( serve :arg2 ( and :op1 ( technique :mod showcase )  :op2 variety )  :arg3 ( almost :op1 ( percentage-entity :value 40 )  )  :arg0 ( and :op2 item :op1 ed :op2 ( roll :mod spicy :arg1 tuna :arg1-of wrap )  )  :manner so )  :arg1 ( perform :arg0 ( norus :arg1-of fresh )  :arg1-of limp )
seem :arg1 ( serve :arg2 ( and :op1 ( technique :mod showcase )  :op2 variety )  :arg3 ( almost :op1 ( percentage-entity :value 40 )  )  :arg0 ( and :op2 item :op1 ed :op2 ( roll :mod spicy :arg1 tuna :arg1-of wrap )  )  :manner so )  :arg1 ( perform :arg0 ( norus :arg1-of fresh )  :arg1-of limp )
seem :arg1 ( serve :arg2 ( and :op1 ( technique :mod showcase )  :op2 variety )  :arg3 ( almost :op1 ( percentage-entity :value 40 )  )  :arg0 ( and :op2 item :op1 ed :op2 ( roll :mod spicy :arg1 tuna :arg1-of wrap )  )  :manner so )  :arg1 ( perform :arg0 ( norus :arg1-of fresh )  :arg1-of limp )
possible :arg1 ( wait :arg1 i :time ( date-entity :season ( summer :time-of ( serve :location outside :arg1 ( patio :mod gigantic )  )  )  )  )
and :null_edge ( pastrami :mod ( good :degree most )  )  :domain i :time ever :op2 ( portion :arg0 i :mod great :arg1-of ridiculous )
and :null_edge ( pastrami :mod ( good :degree most )  )  :domain i :time ever :op2 ( portion :arg0 i :mod great :arg1-of ridiculous )
possible :arg1 ( option :condition ( someone :domain you :arg0-of ( appreciate :arg1 ( thing :arg1-of same )  )  :arg1-of ( hope :arg0 you :arg1 ( or :op2 food :op1 spare :op2 share )  )  )  :domain kai :mod ( good :degree most )  )
go :location here :arg2 ( thing :arg1-of drink )
contrast :arg2 ( good :domain ( course :quant 2 )  :degree very )  :arg2 ( and :null_edge ( sampler :mod chocolate :mod too )  :op2 ( wine :mod dessert :mod ( sweet :degree ( too :degree far )  )  )  )
contrast :arg2 ( good :domain ( course :quant 2 )  :degree very )  :arg2 ( and :null_edge ( sampler :mod chocolate :mod too )  :op2 ( wine :mod dessert :mod ( sweet :degree ( too :degree far )  )  )  )
contrast :arg2 ( good :domain ( course :quant 2 )  :degree very )  :arg2 ( and :null_edge ( sampler :mod chocolate :mod too )  :op2 ( wine :mod dessert :mod ( sweet :degree ( too :degree far )  )  )  )
melt :arg1 butter :arg1 ( wine :mod white :arg1-of warm )  :arg1 ( ooze :arg1 cheese-off :location everywhere )
melt :arg1 butter :arg1 ( wine :mod white :arg1-of warm )  :arg1 ( ooze :arg1 cheese-off :location everywhere )
melt :arg1 butter :arg1 ( wine :mod white :arg1-of warm )  :arg1 ( ooze :arg1 cheese-off :location everywhere )
and :op2 ( party :arg0 we :location ( room :arg1-of private )  )  :op2 ( and :op1 ( make :arg1 memorable )  :op1 ( helpful :degree very :arg1 plan )  )
possible :arg1 ( ambience :arg1-of ( cause :arg0 ( and :op1 ( cramped :degree very :arg1 ( sit :arg1 ( guest :quant some )  :arg2 aisle )  )  )  )  )
possible :arg1 ( ambience :arg1-of ( cause :arg0 ( and :op1 ( cramped :degree very :arg1 ( sit :arg1 ( guest :quant some )  :arg2 aisle )  )  )  )  )
possible :arg1 ( ambience :arg1-of ( cause :arg0 ( and :op1 ( cramped :degree very :arg1 ( sit :arg1 ( guest :quant some )  :arg2 aisle )  )  )  )  )
and :op1 ( disappoint :arg1 we :arg1 ( menu :mod pre :mod fixe :condition ( offer :mod only :quant 2 :arg0 ( restaurant :mod other )  :arg1 ( choices :quant 3 )  )  )  )  :op2 ( order :arg1 ( carte :mod la )  )
and :op1 ( disappoint :arg1 we :arg1 ( menu :mod pre :mod fixe :condition ( offer :mod only :quant 2 :arg0 ( restaurant :mod other )  :arg1 ( choices :quant 3 )  )  )  )  :op2 ( order :arg1 ( carte :mod la )  )
and :op1 ( disappoint :arg1 we :arg1 ( menu :mod pre :mod fixe :condition ( offer :mod only :quant 2 :arg0 ( restaurant :mod other )  :arg1 ( choices :quant 3 )  )  )  )  :op2 ( order :arg1 ( carte :mod la )  )
food :null_edge authentic :mod ( country :name ( name :op1 pakistani )  )
and :op1 ( friendly :domain ( person :arg2-of staff )  :time always :manner ( seem :arg1 grating )  )  :op2 ( greet :arg0 chef :frequency ( occasion :quant couple )  )
and :op1 ( friendly :domain ( person :arg2-of staff )  :time always :manner ( seem :arg1 grating )  )  :op2 ( greet :arg0 chef :frequency ( occasion :quant couple )  )
and :op1 ( great :domain ( parmesan :mod eggplant )  :mod also )  :op2 ( claim :arg1 ( grow-up :location manhattan )  :arg1 ( serve :null_edge - :arg1 ( meatsauce :mod good :mod baked )  )  :arg0 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )
and :op1 ( great :domain ( parmesan :mod eggplant )  :mod also )  :op2 ( claim :arg1 ( grow-up :location manhattan )  :arg1 ( serve :null_edge - :arg1 ( meatsauce :mod good :mod baked )  )  :arg0 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )
and :op1 ( great :domain ( parmesan :mod eggplant )  :mod also )  :op2 ( claim :arg1 ( grow-up :location manhattan )  :arg1 ( serve :null_edge - :arg1 ( meatsauce :mod good :mod baked )  )  :arg0 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )
and :op1 ( prepare :arg0 ( ingredient :mod quality )  :location ( around :mod all )  :mod ( fair :degree very :arg1 ( price :arg2 nyc )  )  )
and :op1 ( prepare :arg0 ( ingredient :mod quality )  :location ( around :mod all )  :mod ( fair :degree very :arg1 ( price :arg2 nyc )  )  )
good :domain service :degree very :compared-to ( and :op2 attentive :op1 ( intrusive :manner prompt )  )
xconcept :x ( full :domain ( entree :arg1 ( pot :arg1-of hot :prep-with seafood )  )  :arg2 ( crabmeat :mod imitation :arg1 ( piece :mod couple :arg1 ( and :op1 shrimp :op2 squid :op2 ( heat :arg2 burn )  )  )  )  )  :x and
xconcept :x ( full :domain ( entree :arg1 ( pot :arg1-of hot :prep-with seafood )  )  :arg2 ( crabmeat :mod imitation :arg1 ( piece :mod couple :arg1 ( and :op1 shrimp :op2 squid :op2 ( heat :arg2 burn )  )  )  )  )  :x and
xconcept :x ( full :domain ( entree :arg1 ( pot :arg1-of hot :prep-with seafood )  )  :arg2 ( crabmeat :mod imitation :arg1 ( piece :mod couple :arg1 ( and :op1 shrimp :op2 squid :op2 ( heat :arg2 burn )  )  )  )  )  :x and
xconcept :x ( full :domain ( entree :arg1 ( pot :arg1-of hot :prep-with seafood )  )  :arg2 ( crabmeat :mod imitation :arg1 ( piece :mod couple :arg1 ( and :op1 shrimp :op2 squid :op2 ( heat :arg2 burn )  )  )  )  )  :x and
xconcept :x ( full :domain ( entree :arg1 ( pot :arg1-of hot :prep-with seafood )  )  :arg2 ( crabmeat :mod imitation :arg1 ( piece :mod couple :arg1 ( and :op1 shrimp :op2 squid :op2 ( heat :arg2 burn )  )  )  )  )  :x and
and :op1 ( begin :arg0 we :prep-with ( fondue :mod cheese-off )  )  :op2 ( add :arg0 we :arg1 ( and :op1 apple :op2 kielbasa )  :arg2 dip )
and :op1 ( begin :arg0 we :prep-with ( fondue :mod cheese-off )  )  :op2 ( add :arg0 we :arg1 ( and :op1 apple :op2 kielbasa )  :arg2 dip )
and :op1 ( begin :arg0 we :prep-with ( fondue :mod cheese-off )  )  :op2 ( add :arg0 we :arg1 ( and :op1 apple :op2 kielbasa )  :arg2 dip )
great :domain ( find :arg1 town :arg1 ( value :mod good :purpose lunch )  )  :domain ( place :mod this )
great :domain ( find :arg1 town :arg1 ( value :mod good :purpose lunch )  )  :domain ( place :mod this )
curry :arg1 ( and :op1 ( crap :mod slurry )  :op3 ( run :arg1-of regular :arg1 ( food :mod mill )  )  )
curry :arg1 ( and :op1 ( crap :mod slurry )  :op3 ( run :arg1-of regular :arg1 ( food :mod mill )  )  )
and :op3 fact :op1 ( leave :arg1 ( place :location-of ( look :arg0 ( see :arg0 we )  :quant 2 :arg1 menu )  )  )  :op2 ( couldn :arg0 i :arg1 ( help :arg0-of ( tell :arg1 ( horrible :domain food )  )  )  )
and :op3 fact :op1 ( leave :arg1 ( place :location-of ( look :arg0 ( see :arg0 we )  :quant 2 :arg1 menu )  )  )  :op2 ( couldn :arg0 i :arg1 ( help :arg0-of ( tell :arg1 ( horrible :domain food )  )  )  )
and :op1 ( seat :arg1 ( we :arg2-of ( pack :mod even :arg2 restaurant )  )  :manner prompt )  :op2 ( ask :mod even :arg1 table :arg1 upstairs :arg1 ( problem :polarity - )  )
and :op1 ( seat :arg1 ( we :arg2-of ( pack :mod even :arg2 restaurant )  )  :manner prompt )  :op2 ( ask :mod even :arg1 table :arg1 upstairs :arg1 ( problem :polarity - )  )
place :condition ( want :arg0 you :arg1 ( americanized :arg1 ( food :mod ( country :name ( name :op1 chinese )  )  )  :prep-with ( sauce :mod usual :mod watery :mod generic :mod white )  )  )  :domain this
place :condition ( want :arg0 you :arg1 ( americanized :arg1 ( food :mod ( country :name ( name :op1 chinese )  )  )  :prep-with ( sauce :mod usual :mod watery :mod generic :mod white )  )  )  :domain this
and :op1 ( bread :domain bread :arg1-of soft :mod paratha )  :op1 ( bread :mod plain :arg1-of ( use :arg2 calcutta )  )  :op2 ( and :op1 ( style :arg1 stuffing )  :op2 ( flavorful :degree very )  )
and :op1 ( bread :domain bread :arg1-of soft :mod paratha )  :op1 ( bread :mod plain :arg1-of ( use :arg2 calcutta )  )  :op2 ( and :op1 ( style :arg1 stuffing )  :op2 ( flavorful :degree very )  )
and :op1 ( bread :domain bread :arg1-of soft :mod paratha )  :op1 ( bread :mod plain :arg1-of ( use :arg2 calcutta )  )  :op2 ( and :op1 ( style :arg1 stuffing )  :op2 ( flavorful :degree very )  )
and :op1 ( bread :domain bread :arg1-of soft :mod paratha )  :op1 ( bread :mod plain :arg1-of ( use :arg2 calcutta )  )  :op2 ( and :op1 ( style :arg1 stuffing )  :op2 ( flavorful :degree very )  )
and :op1 ( bread :domain bread :arg1-of soft :mod paratha )  :op1 ( bread :mod plain :arg1-of ( use :arg2 calcutta )  )  :op2 ( and :op1 ( style :arg1 stuffing )  :op2 ( flavorful :degree very )  )
have-concession :arg1 ( friendly :arg0 service )  :mod ( good :domain ( price :concession-of ( slow :arg0 service :arg1 deliver :mod little )  )  )
have-concession :arg1 ( friendly :arg0 service )  :mod ( good :domain ( price :concession-of ( slow :arg0 service :arg1 deliver :mod little )  )  )
have-concession :arg1 ( friendly :arg0 service )  :mod ( good :domain ( price :concession-of ( slow :arg0 service :arg1 deliver :mod little )  )  )
have-concession :arg1 ( friendly :arg0 service )  :mod ( good :domain ( price :concession-of ( slow :arg0 service :arg1 deliver :mod little )  )  )
contrast :arg1 ( possible :arg1 ( pricey :domain food :arg1 get )  :arg1 ( cater :arg1 food :arg2 ( or :op1 ( allergy :mod any :mod food )  :op2 ( food :arg1-of ( resemble :arg2 you :arg1 don )  )  )  )  )  :arg1 ( and :op2 ( food :domain ( menu :mod prixe :mod ( tasting :mod fixe )  )  :mod ( great :degree most )  :arg1-of ( thing :arg2-of price :manner good )  )  )
contrast :arg1 ( possible :arg1 ( pricey :domain food :arg1 get )  :arg1 ( cater :arg1 food :arg2 ( or :op1 ( allergy :mod any :mod food )  :op2 ( food :arg1-of ( resemble :arg2 you :arg1 don )  )  )  )  )  :arg1 ( and :op2 ( food :domain ( menu :mod prixe :mod ( tasting :mod fixe )  )  :mod ( great :degree most )  :arg1-of ( thing :arg2-of price :manner good )  )  )
contrast :arg1 ( possible :arg1 ( pricey :domain food :arg1 get )  :arg1 ( cater :arg1 food :arg2 ( or :op1 ( allergy :mod any :mod food )  :op2 ( food :arg1-of ( resemble :arg2 you :arg1 don )  )  )  )  )  :arg1 ( and :op2 ( food :domain ( menu :mod prixe :mod ( tasting :mod fixe )  )  :mod ( great :degree most )  :arg1-of ( thing :arg2-of price :manner good )  )  )
contrast :arg1 ( possible :arg1 ( pricey :domain food :arg1 get )  :arg1 ( cater :arg1 food :arg2 ( or :op1 ( allergy :mod any :mod food )  :op2 ( food :arg1-of ( resemble :arg2 you :arg1 don )  )  )  )  )  :arg1 ( and :op2 ( food :domain ( menu :mod prixe :mod ( tasting :mod fixe )  )  :mod ( great :degree most )  :arg1-of ( thing :arg2-of price :manner good )  )  )
contrast :arg1 ( possible :arg1 ( pricey :domain food :arg1 get )  :arg1 ( cater :arg1 food :arg2 ( or :op1 ( allergy :mod any :mod food )  :op2 ( food :arg1-of ( resemble :arg2 you :arg1 don )  )  )  )  )  :arg1 ( and :op2 ( food :domain ( menu :mod prixe :mod ( tasting :mod fixe )  )  :mod ( great :degree most )  :arg1-of ( thing :arg2-of price :manner good )  )  )
and :op1 ( excellent :arg1 service :null_edge ( great :domain decor )  :null_edge ( and :op1 ( delicious :domain food )  :op2 ( come :arg1 ( portion :mod large )  )  )  )
and :op1 ( excellent :arg1 service :null_edge ( great :domain decor )  :null_edge ( and :op1 ( delicious :domain food )  :op2 ( come :arg1 ( portion :mod large )  )  )  )
and :op1 ( excellent :arg1 service :null_edge ( great :domain decor )  :null_edge ( and :op1 ( delicious :domain food )  :op2 ( come :arg1 ( portion :mod large )  )  )  )
and :op1 ( excellent :arg1 service :null_edge ( great :domain decor )  :null_edge ( and :op1 ( delicious :domain food )  :op2 ( come :arg1 ( portion :mod large )  )  )  )
service :arg1-of excellent
expect :arg1 food :arg0 one
and :op1 ( love :arg0 i :arg1 ( noodle :mod thai :arg1 ( and :op1 shrimp :op2 chicken )  )  :arg1 ( juice :mod coconut )  )
good :domain pizza :degree really
drawback :mod only :arg1-of possible :arg2 ( point :mod this :mod last )  :arg1-of ( write :arg3 ( product :name ( name :op1 as )  :time ( date-entity :mod ( post :mod this )  )  )  :arg1 ( item :mod additional :mod menu )  :mod only :location ( country :name ( name :op1 chinese )  )  )
and :op2 food :op2 ( say :arg0 food :arg1 ( taste :mod ( chain :mod even :mod restaurant )  )  :arg1 good )
contrast :arg1 ( and :op1 ( small :domain place )  :op2 cramped :op2 ( fantastic :arg1 food )  )
contrast :arg1 ( and :op1 ( small :domain place )  :op2 cramped :op2 ( fantastic :arg1 food )  )
and :op1 ( tasty :domain food )  :op2 ( appropriate :domain food :arg1 ( size :mod portion )  )
and :op1 ( tasty :domain food )  :op2 ( appropriate :domain food :arg1 ( size :mod portion )  )
and :op1 ( compliment :arg0 ( dill :mod kosher )  :arg1-of perfect :arg1 ( sandwich :mod unforgetable )  :quant ( plenty :arg1 you )  )
and :op1 ( compliment :arg0 ( dill :mod kosher )  :arg1-of perfect :arg1 ( sandwich :mod unforgetable )  :quant ( plenty :arg1 you )  )
great :domain entertain :domain ( have :arg1 ( show :arg0-of ( go :arg1 dinner )  )  )
great :domain entertain :domain ( have :arg1 ( show :arg0-of ( go :arg1 dinner )  )  )
great :domain entertain :domain ( have :arg1 ( show :arg0-of ( go :arg1 dinner )  )  )
and :op1 ( cheap :domain food :degree so )  :op2 ( nice :arg1 waiter )
and :op1 ( cheap :domain food :degree so )  :op2 ( nice :arg1 waiter )
food :mod good :mod ( incredible :domain ( order :mod even :direction out :arg1 wait )  )
food :mod good :mod ( incredible :domain ( order :mod even :direction out :arg1 wait )  )
rude :domain ( bartender :topic-of ( visit :time ( recent :degree most )  )  )  :degree so :degree incredible :arg1 ( go :arg0 i :direction back )
and :op1 ( fresh :arg1 ( and :op1 ( kamikaze :mod sushi )  :op2 ( roll :mod other )  )  )  :op2 present
and :op1 ( fresh :arg1 ( and :op1 ( kamikaze :mod sushi )  :op2 ( roll :mod other )  )  )  :op2 present
and :op1 ( fresh :arg1 ( and :op1 ( kamikaze :mod sushi )  :op2 ( roll :mod other )  )  )  :op2 present
look :arg1 ( food :null_edge authentic :mod thai )  :polarity - :arg1 toon
mayonaisse :domain ( highlight :time night )  :beneficiary ( side :poss ( fries :arg1-of receive )  :poss ( runner :quant one :mod food :mod ( good :arg2 ( consider :arg1 ( bill :quant nearly :null_edge 100 )  )  )  )  )
mayonaisse :domain ( highlight :time night )  :beneficiary ( side :poss ( fries :arg1-of receive )  :poss ( runner :quant one :mod food :mod ( good :arg2 ( consider :arg1 ( bill :quant nearly :null_edge 100 )  )  )  )  )
mayonaisse :domain ( highlight :time night )  :beneficiary ( side :poss ( fries :arg1-of receive )  :poss ( runner :quant one :mod food :mod ( good :arg2 ( consider :arg1 ( bill :quant nearly :null_edge 100 )  )  )  )  )
mayonaisse :domain ( highlight :time night )  :beneficiary ( side :poss ( fries :arg1-of receive )  :poss ( runner :quant one :mod food :mod ( good :arg2 ( consider :arg1 ( bill :quant nearly :null_edge 100 )  )  )  )  )
choose :arg0 i :arg1 ( go :arg0 i :arg4 ( shank :arg1-of special :arg1-of braise :mod ( lamb :accompanier ( wine :mod red :arg1-of excellent )  )  )  )
choose :arg0 i :arg1 ( go :arg0 i :arg4 ( shank :arg1-of special :arg1-of braise :mod ( lamb :accompanier ( wine :mod red :arg1-of excellent )  )  )  )
check-out :arg1 ( doubt :arg0 anyone :arg1 ( know :quant ( enough :topic wine )  )  )  :arg1 ( list :mod wine )
check-out :arg1 ( doubt :arg0 anyone :arg1 ( know :quant ( enough :topic wine )  )  )  :arg1 ( list :mod wine )
all :domain ( concern :mod only :arg1-of have :manner slighly :arg0 ( and :op2 business :op1 order :op2 ( throw :arg1 food :arg1 ( rush :arg1 you )  )  )  )
all :domain ( concern :mod only :arg1-of have :manner slighly :arg0 ( and :op2 business :op1 order :op2 ( throw :arg1 food :arg1 ( rush :arg1 you )  )  )  )
have :arg1 ( tea :arg1-of iced )
good :domain ( chicken :quant ( serving :mod small :poss ( person :mod main :arg0-of ( have-rel-role :arg2 girlfriend :null_edge entree :arg1-of ( impress :arg1 entree :arg1 ( salmon :arg0 i )  )  )  )  )  )
good :domain ( chicken :quant ( serving :mod small :poss ( person :mod main :arg0-of ( have-rel-role :arg2 girlfriend :null_edge entree :arg1-of ( impress :arg1 entree :arg1 ( salmon :arg0 i )  )  )  )  )  )
good :domain ( chicken :quant ( serving :mod small :poss ( person :mod main :arg0-of ( have-rel-role :arg2 girlfriend :null_edge entree :arg1-of ( impress :arg1 entree :arg1 ( salmon :arg0 i )  )  )  )  )  )
good :domain ( chicken :quant ( serving :mod small :poss ( person :mod main :arg0-of ( have-rel-role :arg2 girlfriend :null_edge entree :arg1-of ( impress :arg1 entree :arg1 ( salmon :arg0 i )  )  )  )  )  )
possible :arg1 ( get :arg0 you :mod actual :arg1 ( salad :quant 2 )  :arg1 ( and :op1 ( take :arg2 home )  :op2 ( add :arg2 ( lettuce :mod some )  )  )  )
possible :arg1 ( get :arg0 you :mod actual :arg1 ( salad :quant 2 )  :arg1 ( and :op1 ( take :arg2 home )  :op2 ( add :arg2 ( lettuce :mod some )  )  )  )
and :op1 ( romantic :domain ambience :degree very :mod definite )  :op2 ( bring :arg0 ambience :arg1 good :arg1 date )
and :op1 ( romantic :domain ambience :degree very :mod definite )  :op2 ( bring :arg0 ambience :arg1 good :arg1 date )
contrast :arg1 ( popular :degree more :arg2 bar :arg2 restaurant :arg1 ( and :op1 ( table :quant ( few :mod only )  :poss ( bartender :arg0-of waiter )  )  )  )  :arg2 ( enjoy :arg0 we :degree great :arg1 ( atmosphere :mod obtrusive )  )
contrast :arg1 ( popular :degree more :arg2 bar :arg2 restaurant :arg1 ( and :op1 ( table :quant ( few :mod only )  :poss ( bartender :arg0-of waiter )  )  )  )  :arg2 ( enjoy :arg0 we :degree great :arg1 ( atmosphere :mod obtrusive )  )
contrast :arg1 ( popular :degree more :arg2 bar :arg2 restaurant :arg1 ( and :op1 ( table :quant ( few :mod only )  :poss ( bartender :arg0-of waiter )  )  )  )  :arg2 ( enjoy :arg0 we :degree great :arg1 ( atmosphere :mod obtrusive )  )
contrast :arg1 ( popular :degree more :arg2 bar :arg2 restaurant :arg1 ( and :op1 ( table :quant ( few :mod only )  :poss ( bartender :arg0-of waiter )  )  )  )  :arg2 ( enjoy :arg0 we :degree great :arg1 ( atmosphere :mod obtrusive )  )
contrast :arg1 ( popular :degree more :arg2 bar :arg2 restaurant :arg1 ( and :op1 ( table :quant ( few :mod only )  :poss ( bartender :arg0-of waiter )  )  )  )  :arg2 ( enjoy :arg0 we :degree great :arg1 ( atmosphere :mod obtrusive )  )
good :domain food :degree very :domain ( price :manner ( good :null_edge ( have :null_edge ( dumpling :quant most :mod fried )  :null_edge i )  )  )
good :domain food :degree very :domain ( price :manner ( good :null_edge ( have :null_edge ( dumpling :quant most :mod fried )  :null_edge i )  )  )
good :domain food :degree very :domain ( price :manner ( good :null_edge ( have :null_edge ( dumpling :quant most :mod fried )  :null_edge i )  )  )
place :mod ( good :degree ( more :degree much )  )  :arg2 ( ny :arg1 ( thing :arg2-of price :mod good )  )
top :arg1 line :concession-of ( diverse :arg1 ( chance :arg0 ( rest :part-of menu )  :arg1 ( taste :arg1 ( variety :mod ( manydifferent :degree so )  )  )  )  )
top :arg1 line :concession-of ( diverse :arg1 ( chance :arg0 ( rest :part-of menu )  :arg1 ( taste :arg1 ( variety :mod ( manydifferent :degree so )  )  )  )  )
and :op1 ( eat :arg0 i :time ( before :quant ( temporal-quantity :unit week )  )  )  :op2 ( find :arg0 i :arg1 ( dish :quant most :example ( and :op1 ( average :manner ( good :degree most :arg1 dish )  )  :op2 ( expensive :arg1 dish :degree too )  )  )  )
try :mod still :arg0 you :arg1-of ( possible :time ( end :arg2 ( love :arg1 food )  )  :arg1 ( thing :arg1-of experience :mod ( good :degree most )  :mod dine )  )
try :mod still :arg0 you :arg1-of ( possible :time ( end :arg2 ( love :arg1 food )  )  :arg1 ( thing :arg1-of experience :mod ( good :degree most )  :mod dine )  )
wait :arg1 i :arg2 ( over :op1 ( temporal-quantity :unit hour :quant 1 :time-of food )  )
enjoy :arg0 ( guest :mod other )  :arg1 ( and :op1 pizza :op2 ( salad :mod fe :arg1-of chop-down )  :op2 ( and :op1 fish :op2 chip )  )
enjoy :arg0 ( guest :mod other )  :arg1 ( and :op1 pizza :op2 ( salad :mod fe :arg1-of chop-down )  :op2 ( and :op1 fish :op2 chip )  )
enjoy :arg0 ( guest :mod other )  :arg1 ( and :op1 pizza :op2 ( salad :mod fe :arg1-of chop-down )  :op2 ( and :op1 fish :op2 chip )  )
and :op1 ( calm :arg1 ambience :degree very )  :op2 quiet
dissappointed :arg1 ( time :mod both )  :arg1 i :degree extreme :arg0 ( serve :arg0-of rude )
make :null_edge only :arg1 ( pizza :mod ( good :degree most :arg2 ( ny :location anywhere )  )  )
and :op1 ( huge :domain ( roll :mod spicy :arg1 tuna )  )  :op2 ( good :degree most :mod ( probable :arg1-of ( range :domain i :mod ve :mod this )  )  )
and :op1 ( huge :domain ( roll :mod spicy :arg1 tuna )  )  :op2 ( good :degree most :mod ( probable :arg1-of ( range :domain i :mod ve :mod this )  )  )
keep :arg0 ( and :op1 ( price :arg1 fish )  :op2 quality )  :mod alone :arg1 ( visit :arg0 return )
keep :arg0 ( and :op1 ( price :arg1 fish )  :op2 quality )  :mod alone :arg1 ( visit :arg0 return )
keep :arg0 ( and :op1 ( price :arg1 fish )  :op2 quality )  :mod alone :arg1 ( visit :arg0 return )
and :op1 ( attentive :arg0 ( and :op1 ( waiter :arg0-of help )  :op2 all )  )  :op2 genuine
bistro :domain place :arg1-of ( mean :arg2 ( and :op1 ( dish :arg1-of simple :arg1-of ( serve :manner efficient :location ( atmosphere :mod bustle )  )  )  :op2 wine )  )
bistro :domain place :arg1-of ( mean :arg2 ( and :op1 ( dish :arg1-of simple :arg1-of ( serve :manner efficient :location ( atmosphere :mod bustle )  )  )  :op2 wine )  )
bistro :domain place :arg1-of ( mean :arg2 ( and :op1 ( dish :arg1-of simple :arg1-of ( serve :manner efficient :location ( atmosphere :mod bustle )  )  )  :op2 wine )  )
bistro :domain place :arg1-of ( mean :arg2 ( and :op1 ( dish :arg1-of simple :arg1-of ( serve :manner efficient :location ( atmosphere :mod bustle )  )  )  :op2 wine )  )
include :arg1 this :arg2 ( place :mod ( good :degree most )  :mod comfort :mod food :location city )
and :op2 ( and :mod overall :op1 ingredient :op2 technique )  :op1 there :op2 ( encourage :arg2 ( enough :purpose ( return :instrument ( or :op1 lunch :op2 dinner )  :purpose ( see :arg1 ( improve :arg0 ( boldness :arg1 ( palette :mod flavour )  )  )  )  )  )  )
and :op2 ( and :mod overall :op1 ingredient :op2 technique )  :op1 there :op2 ( encourage :arg2 ( enough :purpose ( return :instrument ( or :op1 lunch :op2 dinner )  :purpose ( see :arg1 ( improve :arg0 ( boldness :arg1 ( palette :mod flavour )  )  )  )  )  )  )
and :op2 ( and :mod overall :op1 ingredient :op2 technique )  :op1 there :op2 ( encourage :arg2 ( enough :purpose ( return :instrument ( or :op1 lunch :op2 dinner )  :purpose ( see :arg1 ( improve :arg0 ( boldness :arg1 ( palette :mod flavour )  )  )  )  )  )  )
and :op2 ( and :mod overall :op1 ingredient :op2 technique )  :op1 there :op2 ( encourage :arg2 ( enough :purpose ( return :instrument ( or :op1 lunch :op2 dinner )  :purpose ( see :arg1 ( improve :arg0 ( boldness :arg1 ( palette :mod flavour )  )  )  )  )  )  )
roll :arg0 i :arg1 ( sandwich :mod huge :mod pastrami )
seat :arg1 you :arg1-of ( doubt :polarity - )  :arg2 ( table :null_edge ( seem :arg1 ( room :quant ( enough :degree bare )  )  :arg1 ( size :polarity - :poss party )  )  )  :arg1 ( atomosphere :arg1-of warm )  :arg1 ( quarter :mod ( event :name ( name :op1 cramped )  )  )  :arg1 ( and :op1 ( have :arg0 you :arg1 ll :arg1 fun )  :op2 ( forget :arg1 ( spot :arg0-of tight )  :arg1 ( re :arg0 you )  )  )
seat :arg1 you :arg1-of ( doubt :polarity - )  :arg2 ( table :null_edge ( seem :arg1 ( room :quant ( enough :degree bare )  )  :arg1 ( size :polarity - :poss party )  )  )  :arg1 ( atomosphere :arg1-of warm )  :arg1 ( quarter :mod ( event :name ( name :op1 cramped )  )  )  :arg1 ( and :op1 ( have :arg0 you :arg1 ll :arg1 fun )  :op2 ( forget :arg1 ( spot :arg0-of tight )  :arg1 ( re :arg0 you )  )  )
seat :arg1 you :arg1-of ( doubt :polarity - )  :arg2 ( table :null_edge ( seem :arg1 ( room :quant ( enough :degree bare )  )  :arg1 ( size :polarity - :poss party )  )  )  :arg1 ( atomosphere :arg1-of warm )  :arg1 ( quarter :mod ( event :name ( name :op1 cramped )  )  )  :arg1 ( and :op1 ( have :arg0 you :arg1 ll :arg1 fun )  :op2 ( forget :arg1 ( spot :arg0-of tight )  :arg1 ( re :arg0 you )  )  )
seat :arg1 you :arg1-of ( doubt :polarity - )  :arg2 ( table :null_edge ( seem :arg1 ( room :quant ( enough :degree bare )  )  :arg1 ( size :polarity - :poss party )  )  )  :arg1 ( atomosphere :arg1-of warm )  :arg1 ( quarter :mod ( event :name ( name :op1 cramped )  )  )  :arg1 ( and :op1 ( have :arg0 you :arg1 ll :arg1 fun )  :op2 ( forget :arg1 ( spot :arg0-of tight )  :arg1 ( re :arg0 you )  )  )
and :op1 ( fresh :domain fish )  :op2 ( taste :arg0 ( and :op1 old :op2 stale )  )
and :op1 ( fresh :domain fish )  :op2 ( taste :arg0 ( and :op1 old :op2 stale )  )
consider :arg1 ( price :null_edge 6 )
small :null_edge ( lunch :null_edge 25 :arg1-of special )  :domain dish :mod ridiculous
consider :arg1 ( price :null_edge 6 )
small :null_edge ( lunch :null_edge 25 :arg1-of special )  :domain dish :mod ridiculous
consider :arg1 ( price :null_edge 6 )
small :null_edge ( lunch :null_edge 25 :arg1-of special )  :domain dish :mod ridiculous
pinnacle :domain this :poss ( food :source ( country :name ( name :op1 indian )  )  :mod fast :consist-of ( food :quant all :manner fast :arg1-of opine )  )
obligate :arg1 ( money :condition ( have :arg0 you :arg1 ( service :arg1-of bad )  )  :quant less )  :arg1 you :arg2 ( tip :arg0 you )
obligate :arg1 ( money :condition ( have :arg0 you :arg1 ( service :arg1-of bad )  )  :quant less )  :arg1 you :arg2 ( tip :arg0 you )
obligate :arg1 ( money :condition ( have :arg0 you :arg1 ( service :arg1-of bad )  )  :quant less )  :arg1 you :arg2 ( tip :arg0 you )
nice :domain ( list :arg2 wine )  :mod also :degree really
xconcept :x ( oyster :arg1-of ( come :arg1 ( service :domain ( possible :arg1 ( beat :arg1 price )  )  )  :arg1 sensual )  )  :x and
xconcept
xconcept
xconcept :x ( oyster :arg1-of ( come :arg1 ( service :domain ( possible :arg1 ( beat :arg1 price )  )  )  :arg1 sensual )  )  :x and
xconcept
xconcept
xconcept :x ( oyster :arg1-of ( come :arg1 ( service :domain ( possible :arg1 ( beat :arg1 price )  )  )  :arg1 sensual )  )  :x and
xconcept
xconcept
thing :arg1-of offer :arg1-of compare :arg0 tal :arg1 ( bagel :mod ( doughy :degree less )  )
food :mod ( delicious :manner consistent )  :null_edge authentic :mod ( country :name ( name :op1 italian )  )
attentive :arg0 service :concession-of discreet
and :op2 ( and :op1 ( thing :arg2-of price )  :op2 ( atmosphere :arg1-of dress )  )  :op2 ( expect :arg0 you )  :op2 more :op2 ( recommend :arg1 ( get :arg1 more )  )
and :op2 ( and :op1 ( thing :arg2-of price )  :op2 ( atmosphere :arg1-of dress )  )  :op2 ( expect :arg0 you )  :op2 more :op2 ( recommend :arg1 ( get :arg1 more )  )
offer :arg1 ( menu :arg1-of ( same :arg1 ( have :arg1 ( drink :mod creative :arg1-of ( load :arg2 ( and :op1 alcohol :op2 ( name :null_edge cheeky )  :op2 ( cost :arg2 you )  )  )  )  )  )  )
offer :arg1 ( menu :arg1-of ( same :arg1 ( have :arg1 ( drink :mod creative :arg1-of ( load :arg2 ( and :op1 alcohol :op2 ( name :null_edge cheeky )  :op2 ( cost :arg2 you )  )  )  )  )  )  )
and :op1 ( go :arg0 we )  :op1 ( eat :arg0 we :arg1 ( and :op1 jekyll :op2 hyde :op1 ( restaurant :mod ( event :name ( name :op1 friday )  )  :time night )  )  )  :op2 ( enjoy :arg0 we :mod really :arg1 ( and :op1 ( atmosphere :mod fun )  :op2 ( food :mod good )  )  )
and :op1 ( go :arg0 we )  :op1 ( eat :arg0 we :arg1 ( and :op1 jekyll :op2 hyde :op1 ( restaurant :mod ( event :name ( name :op1 friday )  )  :time night )  )  )  :op2 ( enjoy :arg0 we :mod really :arg1 ( and :op1 ( atmosphere :mod fun )  :op2 ( food :mod good )  )  )
contrast :arg1 ( tradional :domain food :degree pretty )  :arg2 ( and :op1 hot :op2 good :op1 ( portion :mod large )  )
contrast :arg1 ( tradional :domain food :degree pretty )  :arg2 ( and :op1 hot :op2 good :op1 ( portion :mod large )  )
idea :topic ( and :op1 ( eat :arg0 you :location ( side :mod pizzeria :part-of ( place :mod this )  )  :arg1 rush )  )  :domain ( place :mod this )  :arg1-of bad
idea :topic ( and :op1 ( eat :arg0 you :location ( side :mod pizzeria :part-of ( place :mod this )  )  :arg1 rush )  )  :domain ( place :mod this )  :arg1-of bad
have :arg1 ( increase :arg0 you :arg1 service :arg1 lot )
contrast :arg1 ( romantic :arg0 ambiance :degree bare )  :arg2 ( try :arg0 manage )
contrast :arg1 ( romantic :arg0 ambiance :degree bare )  :arg2 ( try :arg0 manage )
warn :arg0 i :arg1 ( person :arg0-of read )  :arg1 ( plan :condition ( small :domain ( size :mod portion )  :degree very :domain ( appetizer :mod especially )  )  :arg0 you :arg1 ( eat :arg0 you :time ( until :op1 ( and :op1 ( full :domain you )  :op2 ( intend :arg0 you :arg1 ( and :op1 ( order :arg1 chef :arg1 ( menu :arg1-of special :mod tasting )  )  :op2 ( prepare :arg2 order )  :op2 ( pay :arg3 ( and :op1 ( appetizer :arg1 ( dish :quant 1 :beneficiary ( person :mod each :arg1 portion :arg0-of share )  )  )  :op2 ( entree :mod main )  :op2 ( udon :mod cold :time ( end :arg1 meal )  )  )  )  )  )  )  )  )  )
warn :arg0 i :arg1 ( person :arg0-of read )  :arg1 ( plan :condition ( small :domain ( size :mod portion )  :degree very :domain ( appetizer :mod especially )  )  :arg0 you :arg1 ( eat :arg0 you :time ( until :op1 ( and :op1 ( full :domain you )  :op2 ( intend :arg0 you :arg1 ( and :op1 ( order :arg1 chef :arg1 ( menu :arg1-of special :mod tasting )  )  :op2 ( prepare :arg2 order )  :op2 ( pay :arg3 ( and :op1 ( appetizer :arg1 ( dish :quant 1 :beneficiary ( person :mod each :arg1 portion :arg0-of share )  )  )  :op2 ( entree :mod main )  :op2 ( udon :mod cold :time ( end :arg1 meal )  )  )  )  )  )  )  )  )  )
warn :arg0 i :arg1 ( person :arg0-of read )  :arg1 ( plan :condition ( small :domain ( size :mod portion )  :degree very :domain ( appetizer :mod especially )  )  :arg0 you :arg1 ( eat :arg0 you :time ( until :op1 ( and :op1 ( full :domain you )  :op2 ( intend :arg0 you :arg1 ( and :op1 ( order :arg1 chef :arg1 ( menu :arg1-of special :mod tasting )  )  :op2 ( prepare :arg2 order )  :op2 ( pay :arg3 ( and :op1 ( appetizer :arg1 ( dish :quant 1 :beneficiary ( person :mod each :arg1 portion :arg0-of share )  )  )  :op2 ( entree :mod main )  :op2 ( udon :mod cold :time ( end :arg1 meal )  )  )  )  )  )  )  )  )  )
warn :arg0 i :arg1 ( person :arg0-of read )  :arg1 ( plan :condition ( small :domain ( size :mod portion )  :degree very :domain ( appetizer :mod especially )  )  :arg0 you :arg1 ( eat :arg0 you :time ( until :op1 ( and :op1 ( full :domain you )  :op2 ( intend :arg0 you :arg1 ( and :op1 ( order :arg1 chef :arg1 ( menu :arg1-of special :mod tasting )  )  :op2 ( prepare :arg2 order )  :op2 ( pay :arg3 ( and :op1 ( appetizer :arg1 ( dish :quant 1 :beneficiary ( person :mod each :arg1 portion :arg0-of share )  )  )  :op2 ( entree :mod main )  :op2 ( udon :mod cold :time ( end :arg1 meal )  )  )  )  )  )  )  )  )  )
warn :arg0 i :arg1 ( person :arg0-of read )  :arg1 ( plan :condition ( small :domain ( size :mod portion )  :degree very :domain ( appetizer :mod especially )  )  :arg0 you :arg1 ( eat :arg0 you :time ( until :op1 ( and :op1 ( full :domain you )  :op2 ( intend :arg0 you :arg1 ( and :op1 ( order :arg1 chef :arg1 ( menu :arg1-of special :mod tasting )  )  :op2 ( prepare :arg2 order )  :op2 ( pay :arg3 ( and :op1 ( appetizer :arg1 ( dish :quant 1 :beneficiary ( person :mod each :arg1 portion :arg0-of share )  )  )  :op2 ( entree :mod main )  :op2 ( udon :mod cold :time ( end :arg1 meal )  )  )  )  )  )  )  )  )  )
warn :arg0 i :arg1 ( person :arg0-of read )  :arg1 ( plan :condition ( small :domain ( size :mod portion )  :degree very :domain ( appetizer :mod especially )  )  :arg0 you :arg1 ( eat :arg0 you :time ( until :op1 ( and :op1 ( full :domain you )  :op2 ( intend :arg0 you :arg1 ( and :op1 ( order :arg1 chef :arg1 ( menu :arg1-of special :mod tasting )  )  :op2 ( prepare :arg2 order )  :op2 ( pay :arg3 ( and :op1 ( appetizer :arg1 ( dish :quant 1 :beneficiary ( person :mod each :arg1 portion :arg0-of share )  )  )  :op2 ( entree :mod main )  :op2 ( udon :mod cold :time ( end :arg1 meal )  )  )  )  )  )  )  )  )  )
warn :arg0 i :arg1 ( person :arg0-of read )  :arg1 ( plan :condition ( small :domain ( size :mod portion )  :degree very :domain ( appetizer :mod especially )  )  :arg0 you :arg1 ( eat :arg0 you :time ( until :op1 ( and :op1 ( full :domain you )  :op2 ( intend :arg0 you :arg1 ( and :op1 ( order :arg1 chef :arg1 ( menu :arg1-of special :mod tasting )  )  :op2 ( prepare :arg2 order )  :op2 ( pay :arg3 ( and :op1 ( appetizer :arg1 ( dish :quant 1 :beneficiary ( person :mod each :arg1 portion :arg0-of share )  )  )  :op2 ( entree :mod main )  :op2 ( udon :mod cold :time ( end :arg1 meal )  )  )  )  )  )  )  )  )  )
warn :arg0 i :arg1 ( person :arg0-of read )  :arg1 ( plan :condition ( small :domain ( size :mod portion )  :degree very :domain ( appetizer :mod especially )  )  :arg0 you :arg1 ( eat :arg0 you :time ( until :op1 ( and :op1 ( full :domain you )  :op2 ( intend :arg0 you :arg1 ( and :op1 ( order :arg1 chef :arg1 ( menu :arg1-of special :mod tasting )  )  :op2 ( prepare :arg2 order )  :op2 ( pay :arg3 ( and :op1 ( appetizer :arg1 ( dish :quant 1 :beneficiary ( person :mod each :arg1 portion :arg0-of share )  )  )  :op2 ( entree :mod main )  :op2 ( udon :mod cold :time ( end :arg1 meal )  )  )  )  )  )  )  )  )  )
warn :arg0 i :arg1 ( person :arg0-of read )  :arg1 ( plan :condition ( small :domain ( size :mod portion )  :degree very :domain ( appetizer :mod especially )  )  :arg0 you :arg1 ( eat :arg0 you :time ( until :op1 ( and :op1 ( full :domain you )  :op2 ( intend :arg0 you :arg1 ( and :op1 ( order :arg1 chef :arg1 ( menu :arg1-of special :mod tasting )  )  :op2 ( prepare :arg2 order )  :op2 ( pay :arg3 ( and :op1 ( appetizer :arg1 ( dish :quant 1 :beneficiary ( person :mod each :arg1 portion :arg0-of share )  )  )  :op2 ( entree :mod main )  :op2 ( udon :mod cold :time ( end :arg1 meal )  )  )  )  )  )  )  )  )  )
and :op1 ( abrupt :domain they :degree very )  :arg1-of call :op2 ( claim :mod actual :arg1 ( late :arg1-of ( cause :arg1 food :arg0 rice )  )  )
and :op1 ( abrupt :domain they :degree very )  :arg1-of call :op2 ( claim :mod actual :arg1 ( late :arg1-of ( cause :arg1 food :arg0 rice )  )  )
possible :arg1 ( believe :time ( after :op1 ( get :arg0 we :arg1 ( order :mod sashimus )  )  )  :arg0 i :arg1 ( small :domain portion )  )
possible :arg1 ( believe :time ( after :op1 ( get :arg0 we :arg1 ( order :mod sashimus )  )  )  :arg0 i :arg1 ( small :domain portion )  )
see :time ( after :op1 ( course :mod main )  )  :arg0 we :location didn :arg1 ( waiter :duration ( temporal-quantity :unit minute :quant 40 )  )
see :time ( after :op1 ( course :mod main )  )  :arg0 we :location didn :arg1 ( waiter :duration ( temporal-quantity :unit minute :quant 40 )  )
nothing :mod ( good :compared-to ( buy :arg1 snapple :arg3 9 :null_edge 3 )  )
too :null_edge 25
and :time ( come :arg1 family )  :op1 ( give :arg0 he :arg1 app :purpose ( test :arg0 he :arg1 palet )  )  :op2 ( order :time then )
and :op1 ( extraordinary :domain service )  :op2 overbear :op2 ( bring :arg0 service :arg0 decor :arg1 ( taste :arg1 ( soho :mod trendy )  )  :arg2 queen )
and :op1 ( extraordinary :domain service )  :op2 overbear :op2 ( bring :arg0 service :arg0 decor :arg1 ( taste :arg1 ( soho :mod trendy )  )  :arg2 queen )
and :op2 ( and :op1 ( skimpy :domain dosa :prep-with grease )  :op2 ( unattractive :domain dosa )  :op2 ( drip :arg0 dosa )  :op2 ( eat :arg0 dosa :arg1-of personal :arg2 ( top :arg1 ( popcorn :topic drink )  :time ( before :op1 i )  )  :arg1 ( one :mod another )  )  )
and :op2 ( and :op1 ( skimpy :domain dosa :prep-with grease )  :op2 ( unattractive :domain dosa )  :op2 ( drip :arg0 dosa )  :op2 ( eat :arg0 dosa :arg1-of personal :arg2 ( top :arg1 ( popcorn :topic drink )  :time ( before :op1 i )  )  :arg1 ( one :mod another )  )  )
and :op1 ( excellent :arg1 service )  :op2 ( delicious :domain service :domain food )
and :op1 ( excellent :arg1 service )  :op2 ( delicious :domain service :domain food )
go :condition ( want :arg1 ( deal :arg2 ( and :op1 ( scene :mod crappy )  :op2 ( customer :mod annoying )  )  )  )  :arg0 i :null_edge manhattan
go :condition ( want :arg1 ( deal :arg2 ( and :op1 ( scene :mod crappy )  :op2 ( customer :mod annoying )  )  )  )  :arg0 i :null_edge manhattan
and :op1 ( check-out :time ( after :op1 ( craving :arg1 seafood )  )  :arg0 i :arg1 citysearch )  :op2 ( choose :arg0 i :arg1 ( go :arg4 fish :arg1-of ( base :arg2 ( and :op1 ( review :time previous )  :op2 info )  )  )  )
deegan :mod right :arg1-of major :arg0-of ( get :arg0 you :arg1 lady :arg2 ( city :quant all )  )
possible :arg1 ( frustrate :time ( until :op1 ( realize :arg0 you :arg1 ( and :op1 ( mean :domain ( temporal-quantity :unit minute :quant 5 )  )  :op2 ( possible :arg1 ( wait :mod ( anywhere :op1 ( temporal-quantity :unit minute :quant ( temporal-quantity :unit month :null_edge 2 )  )  )  )  )  )  )  )  :arg0 it )
contrast :arg1 ( restaurant :domain thalium :arg1-of beautiful :arg1-of ( beautiful :arg0-of ( serve :arg1 you )  )  )  :arg2 ( match :arg0 thalium :arg2 ( doesn :mod food )  :degree quite )
contrast :arg1 ( restaurant :domain thalium :arg1-of beautiful :arg1-of ( beautiful :arg0-of ( serve :arg1 you )  )  )  :arg2 ( match :arg0 thalium :arg2 ( doesn :mod food )  :degree quite )
contrast :arg1 ( possible :arg1 ( conventional :polarity - :domain fill-in :null_edge ( and :op1 ( authentic :arg1 ( batter :arg1 dosa )  :mod definite )  :op2 ( tasty :arg1 ( thing :arg3-of combine )  :degree very )  )  )  )
contrast :arg1 ( possible :arg1 ( conventional :polarity - :domain fill-in :null_edge ( and :op1 ( authentic :arg1 ( batter :arg1 dosa )  :mod definite )  :op2 ( tasty :arg1 ( thing :arg3-of combine )  :degree very )  )  )  )
have :arg1 ( spot :null_edge this :arg1-of perfect :arg2 ( meet :arg0 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  )  :arg1 ( or :op3 lunch :op3 dinner :op1 theatre :op2 after :op2 ( drink :mod theatre )  )
have :arg1 ( spot :null_edge this :arg1-of perfect :arg2 ( meet :arg0 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  )  :arg1 ( or :op3 lunch :op3 dinner :op1 theatre :op2 after :op2 ( drink :mod theatre )  )
have :arg1 ( spot :null_edge this :arg1-of perfect :arg2 ( meet :arg0 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  )  :arg1 ( or :op3 lunch :op3 dinner :op1 theatre :op2 after :op2 ( drink :mod theatre )  )
have :arg1 ( spot :null_edge this :arg1-of perfect :arg2 ( meet :arg0 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  )  :arg1 ( or :op3 lunch :op3 dinner :op1 theatre :op2 after :op2 ( drink :mod theatre )  )
curry :arg0 mussaman :arg1 ( and :op1 ( order :arg0 i :arg2 ( thin :arg2 water )  )  :op2 ( provide :arg0 ( tofu :arg1-of ( fry :manner poor )  :arg1-of ( order :arg0 i )  )  :manner graciously :arg1 ( piece :quant 1 :part-of ( potato :arg1-of ( cook :manner poor )  )  )  )  )
curry :arg0 mussaman :arg1 ( and :op1 ( order :arg0 i :arg2 ( thin :arg2 water )  )  :op2 ( provide :arg0 ( tofu :arg1-of ( fry :manner poor )  :arg1-of ( order :arg0 i )  )  :manner graciously :arg1 ( piece :quant 1 :part-of ( potato :arg1-of ( cook :manner poor )  )  )  )  )
curry :arg0 mussaman :arg1 ( and :op1 ( order :arg0 i :arg2 ( thin :arg2 water )  )  :op2 ( provide :arg0 ( tofu :arg1-of ( fry :manner poor )  :arg1-of ( order :arg0 i )  )  :manner graciously :arg1 ( piece :quant 1 :part-of ( potato :arg1-of ( cook :manner poor )  )  )  )  )
have :arg1 ( dinner :time late :time night )  :time ( date-entity :weekday ( event :name ( name :op1 saturday )  )  :dayperiod night )
restaurant :domain ( try :arg1 ( serve :arg1 anything :arg1 ( food :mod great )  :arg1 ( serve :mod great )  :arg1 ( atmosphere :arg1-of pleasant )  )  )
restaurant :domain ( try :arg1 ( serve :arg1 anything :arg1 ( food :mod great )  :arg1 ( serve :mod great )  :arg1 ( atmosphere :arg1-of pleasant )  )  )
restaurant :domain ( try :arg1 ( serve :arg1 anything :arg1 ( food :mod great )  :arg1 ( serve :mod great )  :arg1 ( atmosphere :arg1-of pleasant )  )  )
wonderful :domain ( martini :mod sake )
ghetto :domain ( place :mod this )  :degree so :null_edge ( funny :mod even )
and :op1 ( run :arg0 they :arg2 ( out :arg2 gnochus )  :arg1 scratch )
like :arg0 we :arg1 ( thank :arg0 we :arg1 ( and :op1 marcelo :op2 grace )  :arg2 ( experience :arg1-of wonderful :mod dine )  )
xconcept
xconcept
contrast :arg2 ( above :op1 ( average :arg1-of ( find :arg1 service )  :arg1 ( possible :arg1-of ( cause :null_edge ( we :null_edge 13 )  )  )  )  )
contrast :arg1 bagel :arg2 ( sure :arg0 bagel :arg1 ( make :arg1 ( request :mod any :arg1-of special )  )  )
quality :arg1-of fine :mod ( restaurant :mod dine )
experience :arg1-of disappoint :arg3 ( category :mod that :mod price )
buffet :arg0 i :arg1-of lunch :location chennaus :arg1 couple :condition ( be :location neighborhood )
exceptional :domain food
restaurant :mod thai :arg2 ( rice :mod dinner )
restaurant :mod thai :arg2 ( rice :mod dinner )
contrast :arg1 ( small :domain portion )  :arg2 ( make :arg1 ( good :domain food )  :beneficiary that )
contrast :arg1 ( small :domain portion )  :arg2 ( make :arg1 ( good :domain food )  :beneficiary that )
impress :arg1 ( and :op1 ( eat :arg0 i :arg1 share )  :op1 ( have :arg1 ( amount :mod ( large :degree such )  :null_edge serve )  )  )
sure :arg1 ( nice :domain setting )
and :op1 ( friendly :arg0 service :time ( prompt :arg0 service :arg0 most :location world )  :degree ( great :domain food )  )  :op2 ( win :arg0 service :arg0 ( price :arg1-of cheap )  :arg1 ( t :null_edge ( put :arg1 wallet :arg2 ( out :arg2 commission )  )  )  )
and :op1 ( friendly :arg0 service :time ( prompt :arg0 service :arg0 most :location world )  :degree ( great :domain food )  )  :op2 ( win :arg0 service :arg0 ( price :arg1-of cheap )  :arg1 ( t :null_edge ( put :arg1 wallet :arg2 ( out :arg2 commission )  )  )  )
and :op2 ( and :op1 ( appetizer :quant 1 )  :op2 ( entree :quant 2 )  :op2 ( coke :quant 2 )  )  :op2 bill
tip :quant 00
and :op2 ( and :op1 ( appetizer :quant 1 )  :op2 ( entree :quant 2 )  :op2 ( coke :quant 2 )  )  :op2 bill
tip :quant 00
and :op2 ( and :op1 ( appetizer :quant 1 )  :op2 ( entree :quant 2 )  :op2 ( coke :quant 2 )  )  :op2 bill
tip :quant 00
and :op2 ( and :op1 ( appetizer :quant 1 )  :op2 ( entree :quant 2 )  :op2 ( coke :quant 2 )  )  :op2 bill
tip :quant 00
and :mod ( good :degree most )  :op1 rice :op2 ( soup :mod sour :mod spicy :location town )
and :mod ( good :degree most )  :op1 rice :op2 ( soup :mod sour :mod spicy :location town )
start :arg1 ( wine :location ( above :degree slight )  :arg1-of average )  :arg1 ( select :arg1 wine :mod only :quant 1 :arg1-of list )
excellent :arg1 ( salad :mod whitefish )  :arg1 ( whitefish :mod all :prep-with ( mayo :mod little )  )
excellent :arg1 ( salad :mod whitefish )  :arg1 ( whitefish :mod all :prep-with ( mayo :mod little )  )
excellent :arg1 ( salad :mod whitefish )  :arg1 ( whitefish :mod all :prep-with ( mayo :mod little )  )
and :mod all :op1 ( come :arg1 ( thing :arg2-of price :arg1-of ( reasonable :degree very )  )  :arg3 ( and :op1 noodle :op2 dish )  :null_edge ( more-than :null_edge - )  :null_edge 3 )
and :mod all :op1 ( come :arg1 ( thing :arg2-of price :arg1-of ( reasonable :degree very )  )  :arg3 ( and :op1 noodle :op2 dish )  :null_edge ( more-than :null_edge - )  :null_edge 3 )
and :mod all :op1 ( come :arg1 ( thing :arg2-of price :arg1-of ( reasonable :degree very )  )  :arg3 ( and :op1 noodle :op2 dish )  :null_edge ( more-than :null_edge - )  :null_edge 3 )
edible :null_edge ( have :arg1 ( and :op2 ( chicken :mod parm )  :op2 ( pasta :mod box )  :op2 ( and :op1 ( sauce :arg1-of possible :mod tomato )  )  :op3 chicken )  :arg2 ( mushroom :mod portobello :arg1-of ( consist :arg2 ( chicken :arg1-of dry :mod inedible :prep-with ( sauce :mod terrible )  )  )  )  )
edible :null_edge ( have :arg1 ( and :op2 ( chicken :mod parm )  :op2 ( pasta :mod box )  :op2 ( and :op1 ( sauce :arg1-of possible :mod tomato )  )  :op3 chicken )  :arg2 ( mushroom :mod portobello :arg1-of ( consist :arg2 ( chicken :arg1-of dry :mod inedible :prep-with ( sauce :mod terrible )  )  )  )  )
edible :null_edge ( have :arg1 ( and :op2 ( chicken :mod parm )  :op2 ( pasta :mod box )  :op2 ( and :op1 ( sauce :arg1-of possible :mod tomato )  )  :op3 chicken )  :arg2 ( mushroom :mod portobello :arg1-of ( consist :arg2 ( chicken :arg1-of dry :mod inedible :prep-with ( sauce :mod terrible )  )  )  )  )
edible :null_edge ( have :arg1 ( and :op2 ( chicken :mod parm )  :op2 ( pasta :mod box )  :op2 ( and :op1 ( sauce :arg1-of possible :mod tomato )  )  :op3 chicken )  :arg2 ( mushroom :mod portobello :arg1-of ( consist :arg2 ( chicken :arg1-of dry :mod inedible :prep-with ( sauce :mod terrible )  )  )  )  )
edible :null_edge ( have :arg1 ( and :op2 ( chicken :mod parm )  :op2 ( pasta :mod box )  :op2 ( and :op1 ( sauce :arg1-of possible :mod tomato )  )  :op3 chicken )  :arg2 ( mushroom :mod portobello :arg1-of ( consist :arg2 ( chicken :arg1-of dry :mod inedible :prep-with ( sauce :mod terrible )  )  )  )  )
recommend :arg0 i :arg1 ( place :mod this )  :arg2 ( everyone :arg0-of ( ask :arg1 ( go :arg4 ( meal :mod good )  )  )  )
nice :domain waitress :domain ( get :arg1 waitress :mod also :arg0 you :arg1-of possible :mod just :arg1 ( sit :arg1 ( service :arg2-of counterbalance )  )  )
nice :domain waitress :domain ( get :arg1 waitress :mod also :arg0 you :arg1-of possible :mod just :arg1 ( sit :arg1 ( service :arg2-of counterbalance )  )  )
guy :arg0-of ( have-org-role :arg2 member :mod only :arg1 ( staff :arg1-of friendly )  )  :location bar
guy :arg0-of ( have-org-role :arg2 member :mod only :arg1 ( staff :arg1-of friendly )  )  :location bar
guy :arg0-of ( have-org-role :arg2 member :mod only :arg1 ( staff :arg1-of friendly )  )  :location bar
contrast :arg1 ( possible :arg1 ( find :arg0 you :mod certain :arg1 ( restaurant :arg0-of ( offer :arg1 ( experience :arg1-of superior :arg1-of fine :mod dine )  )  )  )  )  :arg1 ( possible :arg1 ( beat :purpose ( food :mod superb :arg1-of ( thing :arg2-of price :arg1-of reasonable )  )  :arg0 ( villa :mod la )  )  )
contrast :arg1 ( possible :arg1 ( find :arg0 you :mod certain :arg1 ( restaurant :arg0-of ( offer :arg1 ( experience :arg1-of superior :arg1-of fine :mod dine )  )  )  )  )  :arg1 ( possible :arg1 ( beat :purpose ( food :mod superb :arg1-of ( thing :arg2-of price :arg1-of reasonable )  )  :arg0 ( villa :mod la )  )  )
or :op2 win :op1 t :op1 possible :op2 ( directory :mod service )
possible :arg1 ( imagine :arg0 i :arg1 ( staff :arg1-of friendlier :arg0-of ( work :location restaurant )  )  )
suggest :arg0 i :arg1 ( ask :arg1 ( seat :location upstairs )  :arg1 ( look :arg0 you :arg1 ( cozy :degree little )  )  )
and :op2 ( and :op2 ( curry :mod red :mod weak )  :op2 tasteless :op1 ( stick :arg1 thaus :arg1 ( and :op1 together :op2 lumpy )  )  :op1 ( overcooked :frequency often )  :op2 ( sketchy :arg1 seafood :degree pretty )  )
and :op2 ( and :op2 ( curry :mod red :mod weak )  :op2 tasteless :op1 ( stick :arg1 thaus :arg1 ( and :op1 together :op2 lumpy )  )  :op1 ( overcooked :frequency often )  :op2 ( sketchy :arg1 seafood :degree pretty )  )
and :op2 ( and :op2 ( curry :mod red :mod weak )  :op2 tasteless :op1 ( stick :arg1 thaus :arg1 ( and :op1 together :op2 lumpy )  )  :op1 ( overcooked :frequency often )  :op2 ( sketchy :arg1 seafood :degree pretty )  )
and :op2 ( and :op2 ( curry :mod red :mod weak )  :op2 tasteless :op1 ( stick :arg1 thaus :arg1 ( and :op1 together :op2 lumpy )  )  :op1 ( overcooked :frequency often )  :op2 ( sketchy :arg1 seafood :degree pretty )  )
and :op1 ( extensive :domain ( list :arg2 wine )  )  :op2 ( possible :arg1 ( hike :arg1 ( meal :mod ( reasonable :degree otherwise )  :arg1-of price )  )  )
and :op1 ( extensive :domain ( list :arg2 wine )  )  :op2 ( possible :arg1 ( hike :arg1 ( meal :mod ( reasonable :degree otherwise )  :arg1-of price )  )  )
contrast :arg2 ( good :domain saul :degree pretty )  :arg2 ( great :manner definite )
recommend :arg0 i :arg1 ( s :null_edge roxy )  :arg1 food
get :arg0 we :time always :arg1 ( sample :arg1 ( and :op1 appetizer :op2 share )  )
and :op1 ( impress :mod overall :arg1 i :arg1 ( qpr :mod great :arg1 ( quality :poss ( ratio :mod price )  )  )  )  :op2 ( return :arg1 i )
possible :arg2 ( get :mod near :arg1 table )  :arg1 ( pass :time ( have :arg0 you )  :arg1 ( chance :time ever :arg1 ( go :location here :arg1 dinner )  )  :arg1 it )
possible :arg2 ( get :mod near :arg1 table )  :arg1 ( pass :time ( have :arg0 you )  :arg1 ( chance :time ever :arg1 ( go :location here :arg1 dinner )  )  :arg1 it )
and :op2 ( pad :arg1 penang )  :op1 delicious :op2 ( fantastic :arg1 ( everything :mod else )  )
contrast :arg1 ( leave :arg0 ( wall :mod puke :mod ( person :name ( name :op1 green )  )  :quant lot )  )  :arg2 ( good :domain food :degree very )  :arg1 ( have-condition :arg2 desire )
contrast :arg1 ( leave :arg0 ( wall :mod puke :mod ( person :name ( name :op1 green )  )  :quant lot )  )  :arg2 ( good :domain food :degree very )  :arg1 ( have-condition :arg2 desire )
and :op1 ( fresh :domain flavor :degree very )  :op2 ( inobtrusive :domain flavor :degree pretty )  :op2 ( nothing :mod flashy )
jsut :arg0-of ( work :arg1 ( evil :mod incompetence )  )  :arg1-of ( resemble :arg2 ( noir :mod cafe )  :arg1 wrong )
xconcept
and :domain ( steak :mod hanger :domain tuna )  :op1 rubber
and :domain ( steak :mod hanger :domain tuna )  :op1 rubber
and :op1 ( like :arg1 ( and :op1 ( love :arg1 pizza )  :op2 ( have :arg0 we :arg1 ( neapolitan :arg1-of certify :location ( city :mod home )  )  )  :op1 ( person :arg0-of ( have-rel-role :arg2 son )  )  )  :arg0 we :arg1 this )  :degree near :op1 ( more :topic ( prefer :arg1 differ :arg1-of personal )  :compared-to ( reflect :mod any :compared-to restaurant )  )
and :op1 ( big :domain ( food :mod good :arg1-of lunch )  )  :op2 soft
place :domain ( snob :polarity - :mod food :arg1-of allow )  :mod this :location-of ( appreciate :arg1 ( food :mod good )  )
place :domain ( snob :polarity - :mod food :arg1-of allow )  :mod this :location-of ( appreciate :arg1 ( food :mod good )  )
like :arg0 i :arg1 food :location ( restaurant :mod this :mod quasus )
like :arg0 i :arg1 food :location ( restaurant :mod this :mod quasus )
have :arg0 ( salad :mod ( good :degree most :degree far )  )  :arg0 ( i :location ( restaurant :mod ( food :mod fast )  )  )
have :arg0 ( salad :mod ( good :degree most :degree far )  )  :arg0 ( i :location ( restaurant :mod ( food :mod fast )  )  )
idea :topic bar :domain this :mod another :arg1-of bad
contrast :arg1 ( fine :arg1 bagel :arg1 ( and :op1 ( overcooked :degree little :mod really :arg1 ( experience :arg1-of special :arg1 bagel )  )  )  )
give :location block :arg0 ( place :mod this )  :mod actual :arg2 you :arg1 ( and :op1 hearty :op2 hot :op2 ( bagel :arg1-of ( know :arg1 ( town :mod this )  )  )  )
and :op1 ( spice :arg1 ( salmon :arg1-of barebecue )  :manner elegantly :arg1 dry )
own :arg1-of same :arg1 ( guy :arg0-of ( own :arg1 ( aircraft-type :name ( name :op1 typhoon )  :direction ( down :mod just :op1 ( street :null_edge st )  )  )  )  )
ave :arg1 ( and :op1 ( thing :arg0-of mark )  )
portion :arg2-of generous
load :arg0 ( person :arg0-of work :location there )  :mod also :arg1 ( bagel :mod absolute )  :arg2 ( cheese-off :mod cream :arg1-of ( get :arg1 ( messy :degree little )  )  )
load :arg0 ( person :arg0-of work :location there )  :mod also :arg1 ( bagel :mod absolute )  :arg2 ( cheese-off :mod cream :arg1-of ( get :arg1 ( messy :degree little )  )  )
load :arg0 ( person :arg0-of work :location there )  :mod also :arg1 ( bagel :mod absolute )  :arg2 ( cheese-off :mod cream :arg1-of ( get :arg1 ( messy :degree little )  )  )
good :domain wine :domain service :degree very :degree too
good :domain wine :domain service :degree very :degree too
and :op1 ( write :degree so :arg1 menu :destination ( chalk-up :location ( above :op1 head )  )  )  :op2 ( sound :quant all :arg2 delicious )
great :domain ( tea :mod ( chaus :arg1-of ( spiced :degree high )  )  )  :degree too
and :quant ( many :location ( there :arg0 i )  )  :op2 ( and :op1 ( good :domain food )  :op2 consistent )
good :degree most :manner serious :domain this :domain ( eat :mod all :arg1-of possible :location town :condition ( say :arg0 everyone :arg1 ( and :op2 ( roll :mod spicy :mod tuna :mod hand )  :op1 ( good :degree most )  :op2 ( break :mod even )  )  )  )
hope :arg0 ( and :op1 ( lack :arg0 sapphire :mod certain :arg1 ambiance )  :op2 ( have :arg1 ( decor :mod ( good :degree most :mod probable )  :poss ( restaurant :mod any :mod ( country :name ( name :op1 indian )  )  :location ( city :location new :location york )  )  )  )  :op1 food )  :arg0 i
hope :arg0 ( and :op1 ( lack :arg0 sapphire :mod certain :arg1 ambiance )  :op2 ( have :arg1 ( decor :mod ( good :degree most :mod probable )  :poss ( restaurant :mod any :mod ( country :name ( name :op1 indian )  )  :location ( city :location new :location york )  )  )  )  :op1 food )  :arg0 i
hope :arg0 ( and :op1 ( lack :arg0 sapphire :mod certain :arg1 ambiance )  :op2 ( have :arg1 ( decor :mod ( good :degree most :mod probable )  :poss ( restaurant :mod any :mod ( country :name ( name :op1 indian )  )  :location ( city :location new :location york )  )  )  )  :op1 food )  :arg0 i
recommend :arg0 i :degree high :arg1 ( place :mod this )  :arg1 ( anyone :arg0-of ( look :arg1 ( atmosphere :mod casual :arg0-of ( whisk :arg2 ( bank :mod left :mod ( river :mod seine )  )  )  )  )  )
dish :consist-of meat :mod only :degree so
complete :arg1 ( atmosphere :mod comforting )  :manner ( warm :null_edge gracious )  :arg0 ( person :arg0-of ( have-rel-role :arg2 wife )  )
complete :arg1 ( atmosphere :mod comforting )  :manner ( warm :null_edge gracious )  :arg0 ( person :arg0-of ( have-rel-role :arg2 wife )  )
consist :arg1 menu :arg2 ( food :arg1-of standard :mod brassiere )  :arg2 ( good :compared-to place )
consist :arg1 menu :arg2 ( food :arg1-of standard :mod brassiere )  :arg2 ( good :compared-to place )
and :op1 ( fan :domain i :mod longtime :mod ( basil :mod holy )  :location ( village :location east )  )  :op2 ( hesitant :condition ( believe :arg0 i :arg1 ( slip :arg1 food :degree slight :arg1 ( quality :mod disloyal )  )  )  )
and :op1 ( fan :domain i :mod longtime :mod ( basil :mod holy )  :location ( village :location east )  )  :op2 ( hesitant :condition ( believe :arg0 i :arg1 ( slip :arg1 food :degree slight :arg1 ( quality :mod disloyal )  )  )  )
contrast :arg1 ( atmosphere :null_edge ( l :mod ( good :degree most )  )  :time ( late :op1 night )  :arg1-of ( free :manner delightful :arg2 bt )  )
visit :arg0 we :mod even :source ( manage :arg0-of ( want :arg1 ( make :arg1 ( sure :arg1 ( enjoy :arg0 we )  )  )  )  )
and :op2 ( person :arg2-of staff )  :op1 ( attentive :degree very :prep-to earth )  :op1 down
go :arg1 ( don :arg0 you :arg1 ( serve :arg2 mizu :arg1-of excellent )  )  :arg0 you :arg4 ( feel :arg0 ( and :op1 ( amount :mod large )  :op1 food :op2 ( atmosphere :arg1-of amiable )  :op2 hole )  :arg1 wall :arg1 place )
go :arg1 ( don :arg0 you :arg1 ( serve :arg2 mizu :arg1-of excellent )  )  :arg0 you :arg4 ( feel :arg0 ( and :op1 ( amount :mod large )  :op1 food :op2 ( atmosphere :arg1-of amiable )  :op2 hole )  :arg1 wall :arg1 place )
go :arg1 ( don :arg0 you :arg1 ( serve :arg2 mizu :arg1-of excellent )  )  :arg0 you :arg4 ( feel :arg0 ( and :op1 ( amount :mod large )  :op1 food :op2 ( atmosphere :arg1-of amiable )  :op2 hole )  :arg1 wall :arg1 place )
and :op1 ( bad :arg1 service :time always )  :op2 ( expect :arg0 ( t :null_edge don )  :arg1 ( anything :quant much )  :source server )  :op2 ( recommend :arg0 service :arg1 ( bring :arg1 date :location here :mod either )  )
and :op1 ( bad :arg1 service :time always )  :op2 ( expect :arg0 ( t :null_edge don )  :arg1 ( anything :quant much )  :source server )  :op2 ( recommend :arg0 service :arg1 ( bring :arg1 date :location here :mod either )  )
bargain :domain ( night :mod ( event :name ( name :op1 monday )  )  )  :location ( prix :arg1-of fix )  :null_edge ( include :arg2 this :arg1 ( meal :quant 3 :mod plus :arg1 ( wine :quant ( glasses :quant 3 :arg1-of ( pair :arg2 ( course :mod each )  )  )  )  )  )
bargain :domain ( night :mod ( event :name ( name :op1 monday )  )  )  :location ( prix :arg1-of fix )  :null_edge ( include :arg2 this :arg1 ( meal :quant 3 :mod plus :arg1 ( wine :quant ( glasses :quant 3 :arg1-of ( pair :arg2 ( course :mod each )  )  )  )  )  )
bargain :domain ( night :mod ( event :name ( name :op1 monday )  )  )  :location ( prix :arg1-of fix )  :null_edge ( include :arg2 this :arg1 ( meal :quant 3 :mod plus :arg1 ( wine :quant ( glasses :quant 3 :arg1-of ( pair :arg2 ( course :mod each )  )  )  )  )  )
bargain :domain ( night :mod ( event :name ( name :op1 monday )  )  )  :location ( prix :arg1-of fix )  :null_edge ( include :arg2 this :arg1 ( meal :quant 3 :mod plus :arg1 ( wine :quant ( glasses :quant 3 :arg1-of ( pair :arg2 ( course :mod each )  )  )  )  )  )
take :arg1 ( temporal-quantity :unit minute :quant 15 )  :purpose ( put :arg1 water :arg2 glass )
descend :domain service :arg1-of ( pack :mod even :arg1 ( place :mod this :mod small )  )
descend :domain service :arg1-of ( pack :mod even :arg1 ( place :mod this :mod small )  )
sushi :domain this :mod ( good :degree most )  :location ( city :location new :location york )  :arg0 hand
eat :arg0 i :arg1 ( pizza :quant lot )  :location here
value :mod great :arg2 ( ingredient :mod quality )
and :op1 ( unremarkable :domain thalus :mod small :degree thorough :null_edge date-entity )
xconcept :x 95
great :domain sushi :mod also
amaze :null_edge ( entree :source ( app :arg1 ( chef :arg1-of complimentary )  :arg1 ( ravioli :mod ( squash :mod delicate :mod butternut )  )  :location ( sauce :mod delicious :mod truffle :arg2 ( and :op1 ( buttery :mod amazing )  :op2 tender :op1 ( dessert :null_edge ( remember :arg1-of possible :arg1-of ( cause :arg0 ( cabernet :mod ( cakebread :mod fabulous )  :arg1-of ( drink :arg0 we )  )  )  )  )  )  )  )  )  :time ( evening :mod whole )
amaze :null_edge ( entree :source ( app :arg1 ( chef :arg1-of complimentary )  :arg1 ( ravioli :mod ( squash :mod delicate :mod butternut )  )  :location ( sauce :mod delicious :mod truffle :arg2 ( and :op1 ( buttery :mod amazing )  :op2 tender :op1 ( dessert :null_edge ( remember :arg1-of possible :arg1-of ( cause :arg0 ( cabernet :mod ( cakebread :mod fabulous )  :arg1-of ( drink :arg0 we )  )  )  )  )  )  )  )  )  :time ( evening :mod whole )
amaze :null_edge ( entree :source ( app :arg1 ( chef :arg1-of complimentary )  :arg1 ( ravioli :mod ( squash :mod delicate :mod butternut )  )  :location ( sauce :mod delicious :mod truffle :arg2 ( and :op1 ( buttery :mod amazing )  :op2 tender :op1 ( dessert :null_edge ( remember :arg1-of possible :arg1-of ( cause :arg0 ( cabernet :mod ( cakebread :mod fabulous )  :arg1-of ( drink :arg0 we )  )  )  )  )  )  )  )  )  :time ( evening :mod whole )
amaze :null_edge ( entree :source ( app :arg1 ( chef :arg1-of complimentary )  :arg1 ( ravioli :mod ( squash :mod delicate :mod butternut )  )  :location ( sauce :mod delicious :mod truffle :arg2 ( and :op1 ( buttery :mod amazing )  :op2 tender :op1 ( dessert :null_edge ( remember :arg1-of possible :arg1-of ( cause :arg0 ( cabernet :mod ( cakebread :mod fabulous )  :arg1-of ( drink :arg0 we )  )  )  )  )  )  )  )  )  :time ( evening :mod whole )
amaze :null_edge ( entree :source ( app :arg1 ( chef :arg1-of complimentary )  :arg1 ( ravioli :mod ( squash :mod delicate :mod butternut )  )  :location ( sauce :mod delicious :mod truffle :arg2 ( and :op1 ( buttery :mod amazing )  :op2 tender :op1 ( dessert :null_edge ( remember :arg1-of possible :arg1-of ( cause :arg0 ( cabernet :mod ( cakebread :mod fabulous )  :arg1-of ( drink :arg0 we )  )  )  )  )  )  )  )  )  :time ( evening :mod whole )
mark :arg1 ( waiter :mod attentive )
contrast :arg1 ( good :domain food :location here :mod ( only :time ( like :arg0 you :arg1 ( wait :arg0 you )  )  )  )
and :op1 ( get :arg0 i :arg1 ( piece :arg1-of excellent :mod cheesecake )  )  :op2 ( have :arg0 we :arg1 ( pastry :quant several :mod other :arg1-of nice )  )
and :op1 ( get :arg0 i :arg1 ( piece :arg1-of excellent :mod cheesecake )  )  :op2 ( have :arg0 we :arg1 ( pastry :quant several :mod other :arg1-of nice )  )
and :op1 ( know :arg1 ( prompt :arg0 ( and :op2 ( person :arg2-of staff )  :op1 ( kind :degree very )  :op2 ( train :arg1 person )  :op1 ( re :manner fast )  )  :time always :arg1 ( and :op1 ( jump :location ( behind :op1 bar )  )  :op2 ( fix :arg1 drink )  )  )  :arg0 they :arg1 ( detail :arg1 ( item :mod every :part-of menu )  )  :arg1 ( recomendation :mod excelent )  )
and :op1 ( know :arg1 ( prompt :arg0 ( and :op2 ( person :arg2-of staff )  :op1 ( kind :degree very )  :op2 ( train :arg1 person )  :op1 ( re :manner fast )  )  :time always :arg1 ( and :op1 ( jump :location ( behind :op1 bar )  )  :op2 ( fix :arg1 drink )  )  )  :arg0 they :arg1 ( detail :arg1 ( item :mod every :part-of menu )  )  :arg1 ( recomendation :mod excelent )  )
and :op1 ( know :arg1 ( prompt :arg0 ( and :op2 ( person :arg2-of staff )  :op1 ( kind :degree very )  :op2 ( train :arg1 person )  :op1 ( re :manner fast )  )  :time always :arg1 ( and :op1 ( jump :location ( behind :op1 bar )  )  :op2 ( fix :arg1 drink )  )  )  :arg0 they :arg1 ( detail :arg1 ( item :mod every :part-of menu )  )  :arg1 ( recomendation :mod excelent )  )
and :op1 ( know :arg1 ( prompt :arg0 ( and :op2 ( person :arg2-of staff )  :op1 ( kind :degree very )  :op2 ( train :arg1 person )  :op1 ( re :manner fast )  )  :time always :arg1 ( and :op1 ( jump :location ( behind :op1 bar )  )  :op2 ( fix :arg1 drink )  )  )  :arg0 they :arg1 ( detail :arg1 ( item :mod every :part-of menu )  )  :arg1 ( recomendation :mod excelent )  )
makhanus :null_edge ( bland :arg1 korma )
makhanus :null_edge ( bland :arg1 korma )
contrast :arg1 ( inventive :domain food )  :arg2 ( keep :arg1 food :mod still :arg1 ( flavoring :mod tradition :mod ( country :name ( name :op1 indian )  )  )  )
decor :location ( place :mod this )  :degree very :destination-of ( and :op1 ( ish :domain ( place :mod kind :arg1-of ( expect :arg0 you :location ( village :location east )  )  )  )  :op1 romantic :op2 ( simple :mod just )  :op2 small :op2 sparse )
decor :location ( place :mod this )  :degree very :destination-of ( and :op1 ( ish :domain ( place :mod kind :arg1-of ( expect :arg0 you :location ( village :location east )  )  )  )  :op1 romantic :op2 ( simple :mod just )  :op2 small :op2 sparse )
contrast :arg1 ( and :op1 ( place :domain this :mod cute :location-of ( possible :arg1 good )  )  :op2 ( need :arg1 ( get :arg1 act :arg1 together )  )  )
fresh :domain lox :time always :degree too
friendly :domain service :degree very
m :mod all :arg0 i :domain ( try :arg0 i :arg1 ( say :arg1 ( restaurant :domain ( restaurant :mod this )  :mod ( good :degree most )  :mod thai :mod food :time ever )  )  )
cook :arg1 food :arg1 fish
cook :arg1 food :arg1 fish
and :op1 ( leave :arg0 we :mod actual :arg1 hunger )  :op2 ( go :arg0 we :arg4 ( across :op1 street )  :arg4 ( hop :location ( street :mod ( mott :quant 15 )  )  )  :purpose ( food :quant some :mod good :mod ( country :name ( name :op1 chinese )  )  )  )
and :op1 ( amaze :arg0 ( confit :mod duck )  :time always )  :op2 ( gra :mod foie :arg1 fig :arg0 ( world :mod this )  )
and :op1 ( amaze :arg0 ( confit :mod duck )  :time always )  :op2 ( gra :mod foie :arg1 fig :arg0 ( world :mod this )  )
and :op1 ( unprofessional :domain ( whole :arg1-of set )  )  :op2 ( wish :arg1 ( get :arg1 cafe :arg1 ( staff :quant some :mod good )  )  :arg1-of ( cause :arg0 ( place :time current :domain this :mod great )  )  )
offer :arg0 ( person :arg2-of staff )  :arg1 ( service :arg0-of impeccable )
offer :arg0 ( person :arg2-of staff )  :arg1 ( service :arg0-of impeccable )
end :arg0 we :arg1 ( experience :arg0 we :degree great )  :arg1 ( have :arg0 we :arg1 ( dessert :mod gulab :arg1-of ( recommend :arg0 waiter )  )  )
end :arg0 we :arg1 ( experience :arg0 we :degree great )  :arg1 ( have :arg0 we :arg1 ( dessert :mod gulab :arg1-of ( recommend :arg0 waiter )  )  )
contrast :arg1 ( compare :arg0 ( t :domain ( place :mod this )  )  )  :arg2 ( and :op1 price :op1 ( value :arg1 freshness )  :op2 quality )  :arg2 ( opine :arg0 t :mod just )
contrast :arg1 ( compare :arg0 ( t :domain ( place :mod this )  )  )  :arg2 ( and :op1 price :op1 ( value :arg1 freshness )  :op2 quality )  :arg2 ( opine :arg0 t :mod just )
contrast :arg1 ( compare :arg0 ( t :domain ( place :mod this )  )  )  :arg2 ( and :op1 price :op1 ( value :arg1 freshness )  :op2 quality )  :arg2 ( opine :arg0 t :mod just )
contrast :arg1 ( compare :arg0 ( t :domain ( place :mod this )  )  )  :arg2 ( and :op1 price :op1 ( value :arg1 freshness )  :op2 quality )  :arg2 ( opine :arg0 t :mod just )
and :op1 ( sleek :domain place )  :op2 modern :op2 ( and :op2 playfull )  :op2 ( return :arg1 i :mod again :arg1-of frequent )
continue :arg1 ( serve :arg1 ( and :op1 ( know :arg0 i :arg2 ( secret :mod this )  :time ( year :mod last :null_edge null_tag )  )  :op1 food :op2 wine :op1 ( person :name ( name :op1 gods )  :arg1-of ( thing :arg2-of price :mod mortal )  )  )  )
continue :arg1 ( serve :arg1 ( and :op1 ( know :arg0 i :arg2 ( secret :mod this )  :time ( year :mod last :null_edge null_tag )  )  :op1 food :op2 wine :op1 ( person :name ( name :op1 gods )  :arg1-of ( thing :arg2-of price :mod mortal )  )  )  )
continue :arg1 ( serve :arg1 ( and :op1 ( know :arg0 i :arg2 ( secret :mod this )  :time ( year :mod last :null_edge null_tag )  )  :op1 food :op2 wine :op1 ( person :name ( name :op1 gods )  :arg1-of ( thing :arg2-of price :mod mortal )  )  )  )
and :op1 cute :op2 sweet :op2 ( touch-on :arg0 ( and :op1 brioche :op2 lolly :op2 ( favor :arg1 party )  )  :arg1 ( meal :mod ( memorable :degree most )  )  )
and :op1 cute :op2 sweet :op2 ( touch-on :arg0 ( and :op1 brioche :op2 lolly :op2 ( favor :arg1 party )  )  :arg1 ( meal :mod ( memorable :degree most )  )  )
squish :time ( after :op1 ( and :op1 ( tell :arg1 ( seat :arg1 ( party :quant 3 )  :time ( temporal-quantity :unit minute :quant 10 )  )  )  :op2 ( watch :arg1 ( party :mod other :quant ( multiple :arg1 ( and :op1 2 :op2 high )  )  :arg1-of ( seat :duration ( temporal-quantity :unit minute :quant 40 :quant 3 )  )  )  )  )  )  :arg2 ( table :mod small :null_edge null_tag :poss person )
and :op1 ( outragous :arg0 bill )
and :op1 ( attentive :arg0 service :null_edge ( and :op1 ( extensive :arg1 ( list :arg2 wine )  )  :op2 price )  )  :op2 ( unimposing :domain service )  :op2 ( good :domain service :domain food :compared-to ( restaurant :quant many :mod notorious :location midtown )  )
and :op1 ( attentive :arg0 service :null_edge ( and :op1 ( extensive :arg1 ( list :arg2 wine )  )  :op2 price )  )  :op2 ( unimposing :domain service )  :op2 ( good :domain service :domain food :compared-to ( restaurant :quant many :mod notorious :location midtown )  )
and :op1 ( attentive :arg0 service :null_edge ( and :op1 ( extensive :arg1 ( list :arg2 wine )  )  :op2 price )  )  :op2 ( unimposing :domain service )  :op2 ( good :domain service :domain food :compared-to ( restaurant :quant many :mod notorious :location midtown )  )
wait :mod kind-of :mod attentive :arg1 staff
fantastic :arg1 salad
and :op2 ( and :op1 ( person :arg0-of own )  :op2 ( person :arg1-of employ )  )  :op1 friendly :op2 ( fantastic :domain pizza )
and :op2 ( and :op1 ( person :arg0-of own )  :op2 ( person :arg1-of employ )  )  :op1 friendly :op2 ( fantastic :domain pizza )
and :op2 ( and :op1 ( person :arg0-of own )  :op2 ( person :arg1-of employ )  )  :op1 friendly :op2 ( fantastic :domain pizza )
perfection :arg1 ( mussel :domain food :mod yummy )  :location ( and :arg1-of ( cook :mod especially )  :op1 ( sauce :mod spicy :mod tomato )  :op2 ( fries :mod shoestring :mod crispy )  )
perfection :arg1 ( mussel :domain food :mod yummy )  :location ( and :arg1-of ( cook :mod especially )  :op1 ( sauce :mod spicy :mod tomato )  :op2 ( fries :mod shoestring :mod crispy )  )
perfection :arg1 ( mussel :domain food :mod yummy )  :location ( and :arg1-of ( cook :mod especially )  :op1 ( sauce :mod spicy :mod tomato )  :op2 ( fries :mod shoestring :mod crispy )  )
delicious :domain food :null_edge authentic :mod ( country :name ( name :op1 italian )  )
skip :arg1 dessert
complete :arg0 i :arg1 ( experience :arg2-of total :arg1 bagel :arg0 ( toast :manner light )  )
and :op2 ( forget :arg0 server :arg1 ( work :mod actual )  )  :op2 ( want :arg0 server :arg1-of instead-of :arg1 ( and :op1 hang :op2 cool )  )
and :op1 ( good :domain service )  :op2 ( good :domain ambience :arg2 ( or :op1 date :op2 group :op2 outing )  )
and :op1 ( good :domain service )  :op2 ( good :domain ambience :arg2 ( or :op1 date :op2 group :op2 outing )  )
and :op1 ( way :mod great :manner-of ( make :arg1 ( money :mod some )  )  )  :op1 ( buy :arg1 ( case :consist-of snapple )  :arg2 costco )  :op2 ( sell :location ( outside :mod right )  :mod ( only :null_edge 2 )  )
xconcept :x 50
s :arg1 ( food :quant all )
xconcept
service :mod fast
excellent :arg1 ( person :arg2-of staff )  :arg1 ( specjal :domain ( girl :mod that :location ( behind :op1 bar )  )  :mod ( chic :mod ( continent :name ( name :op1 european )  )  )  )
excellent :arg1 ( person :arg2-of staff )  :arg1 ( specjal :domain ( girl :mod that :location ( behind :op1 bar )  )  :mod ( chic :mod ( continent :name ( name :op1 european )  )  )  )
stick :arg2 ( and :op1 chicken :op2 beef :op2 ( dish :mod lamb )  )
stick :arg2 ( and :op1 chicken :op2 beef :op2 ( dish :mod lamb )  )
stick :arg2 ( and :op1 chicken :op2 beef :op2 ( dish :mod lamb )  )
xconcept :x ( person :arg1-of sit :arg1 ( bad :arg1 service )  :arg1 we :arg2 ( level :mod upper )  )  :x ( and :arg1 ( take :arg1 food :null_edge ( come :arg1 food )  )  )
xconcept :x ( person :arg1-of sit :arg1 ( bad :arg1 service )  :arg1 we :arg2 ( level :mod upper )  )  :x ( and :arg1 ( take :arg1 food :null_edge ( come :arg1 food )  )  )
xcept :arg0 ( change :arg0 we :arg1 menu )  :arg1 ( or :op1 1 :op1 ( special :quant 2 )  :op2 ( and :op2 ( quality :arg1-of ( put :arg2 thier :arg1 food :arg2 evidence )  )  :op2 care )  )
xcept :arg0 ( change :arg0 we :arg1 menu )  :arg1 ( or :op1 1 :op1 ( special :quant 2 )  :op2 ( and :op2 ( quality :arg1-of ( put :arg2 thier :arg1 food :arg2 evidence )  )  :op2 care )  )
xcept :arg0 ( change :arg0 we :arg1 menu )  :arg1 ( or :op1 1 :op1 ( special :quant 2 )  :op2 ( and :op2 ( quality :arg1-of ( put :arg2 thier :arg1 food :arg2 evidence )  )  :op2 care )  )
xcept :arg0 ( change :arg0 we :arg1 menu )  :arg1 ( or :op1 1 :op1 ( special :quant 2 )  :op2 ( and :op2 ( quality :arg1-of ( put :arg2 thier :arg1 food :arg2 evidence )  )  :op2 care )  )
and :op1 ( place :domain ( restaurant :mod this )  :arg1-of wonderful :quant many )  :op2 ( price :arg3 reasonable )
serve :mod bottom :mod ( b :arg1 food )
serve :mod bottom :mod ( b :arg1 food )
wipe-out :arg1 ( thing :mod only :arg1-of ( do :arg0 ( t :null_edge don )  :arg2 you )  )  :arg1 chin :condition ( leave :arg0 you )
stick :arg2 dimsum :arg1 ( noodle :mod super-power :mod overpriced )
stick :arg2 dimsum :arg1 ( noodle :mod super-power :mod overpriced )
and :op1 ( fine :arg1 service )  :op2 ( allow :arg0 service :arg1 ( enjoy :arg0 you :arg1 view )  )
and :op1 ( fine :arg1 service )  :op2 ( allow :arg0 service :arg1 ( enjoy :arg0 you :arg1 view )  )
and :op1 ( arrive :arg1 we :arg1 ( be :null_edge 4 )  :time noon )  :op2 empty :op2 ( act :arg0 ( person :arg2-of staff )  :arg1 ( and :op1 ( impose :arg0 we )  :op2 ( rude :degree very )  )  )
food :mod delicious :arg1-of simple :location ( atmosphere :arg1-of nice :mod outdoor )
food :mod delicious :arg1-of simple :location ( atmosphere :arg1-of nice :mod outdoor )
price :domain ( fallback :mod only :arg1 ( restaurant :mod this )  )
naple :arg0 i :quant 45 :mod dinner
and :op1 hot :op2 sour :op2 soup :op1 ( and :op1 ( hot :degree unbearably )  :op2 ( taste :arg0 ( and :op1 ( pepper :mod only )  :op2 nothing )  )  )
and :op1 hot :op2 sour :op2 soup :op1 ( and :op1 ( hot :degree unbearably )  :op2 ( taste :arg0 ( and :op1 ( pepper :mod only )  :op2 nothing )  )  )
try :arg1 ( roll :mod sushimus :arg1 cucumber )
delicious :domain food
and :op1 ( accompaniment :domain ( wine :arg0 glass )  :mod great )  :op2 ( possible :arg1 ( eat :null_edge ( king :arg2 wine )  :null_edge 9 :null_edge 30 )  )
and :op1 ( accompaniment :domain ( wine :arg0 glass )  :mod great )  :op2 ( possible :arg1 ( eat :null_edge ( king :arg2 wine )  :null_edge 9 :null_edge 30 )  )
have :arg0 ( place :mod this )  :arg1 ( and :op1 ( ambience :arg1-of correct )  :op2 ( person :arg2-of staff :arg1-of excellent )  )  :purpose ( make :arg1 ( feel :arg0 you :arg1 ( and :op1 ( guest :poss ( person :arg0-of ( have-rel-role :arg2 friend :time ( time :arg1-of same )  )  )  )  )  )  )
have :arg0 ( place :mod this )  :arg1 ( and :op1 ( ambience :arg1-of correct )  :op2 ( person :arg2-of staff :arg1-of excellent )  )  :purpose ( make :arg1 ( feel :arg0 you :arg1 ( and :op1 ( guest :poss ( person :arg0-of ( have-rel-role :arg2 friend :time ( time :arg1-of same )  )  )  )  )  )  )
have :arg0 ( place :mod this )  :arg1 ( and :op1 ( ambience :arg1-of correct )  :op2 ( person :arg2-of staff :arg1-of excellent )  )  :purpose ( make :arg1 ( feel :arg0 you :arg1 ( and :op1 ( guest :poss ( person :arg0-of ( have-rel-role :arg2 friend :time ( time :arg1-of same )  )  )  )  )  )  )
contrast :arg1 ( great :mod yeah :domain shanghaus :mod also :arg1-of ( cause :arg2 ( use :arg1 ( salt :quant ( amount :arg1-of same )  :manner sweetness )  :arg2 balance )  )  )  :arg2 ( good :mod quite )
eat :null_edge believe :arg0 we :arg1 sushi :arg1 ( over :op1 15 )
good :domain atmosphere :compared-to sripraphaus :domain ( and :op1 ( modern :degree more )  :op2 ( sleek :degree more )  )  :degree ( more :degree much )
and :op1 ( outstanding :domain food )  :op2 ( friendly :arg1 food :arg1 ( service :arg1-of quick )  :mod ( professional :degree very )  )
and :op1 ( outstanding :domain food )  :op2 ( friendly :arg1 food :arg1 ( service :arg1-of quick )  :mod ( professional :degree very )  )
bagel :arg1-of ( warm :arg1-of ( soft :location inside )  :null_edge ( crispy :location outside )  :mod enormous )  :time size
have :arg0 i :arg1 ( dinner :time late :location ( stike :mod luck )  :name ( name :mod great :beneficiary joint :null_edge ( see :null_edge ever :arg0 i :arg1 one )  )  )
and :op1 ( fast :domain service )  :op2 ( friendly :arg1 service )
person :arg2-of staff :name ( name :op1 english )  :arg0-of speak
and :op1 ( have :arg0 they :arg1 ( chip :mod home :consist-of potato )  )  :time ( bar :location-of ( thing :mod ( delicious :degree most )  :location world )  )
and :op1 ( have :arg0 they :arg1 ( chip :mod home :consist-of potato )  )  :time ( bar :location-of ( thing :mod ( delicious :degree most )  :location world )  )
and :op1 ( enjoy :arg0 ( and :op2 i :op1 ( person :arg0-of ( have-rel-role :arg2 husband )  )  )  :arg1 ( portion :mod each :quant 6 :mod ( size :arg1 taste )  )  )  :op2 ( leave :degree ( full :arg1-of complete )  )
and :op1 ( go :arg0 i :location here :arg2 friend :arg4 whim )  :op2 ( go :arg0 i :arg0 we :direction ( someplace :mod else )  )  :op2 ( get :arg0 i :arg1 ( t :null_edge couldn )  :arg1 table )
eat :arg0 ( we :mod all )  :arg1 ( pasta :mod entre :mod e :mod great )
include :arg2 ( person :arg0-of have-org-role :arg1-of ( contrast :arg1 ( and :op1 ( excellent :arg1 steak :null_edge 1 )  )  :arg2 ( taste :arg0 i :arg1 butter )  :arg2 intitally :arg2 ( do :arg1 intitally :polarity - :manner way :arg1 ( overwhelm :arg1 ( flavor :arg1 meat )  )  )  )  )
include :arg2 ( person :arg0-of have-org-role :arg1-of ( contrast :arg1 ( and :op1 ( excellent :arg1 steak :null_edge 1 )  )  :arg2 ( taste :arg0 i :arg1 butter )  :arg2 intitally :arg2 ( do :arg1 intitally :polarity - :manner way :arg1 ( overwhelm :arg1 ( flavor :arg1 meat )  )  )  )  )
include :arg2 ( person :arg0-of have-org-role :arg1-of ( contrast :arg1 ( and :op1 ( excellent :arg1 steak :null_edge 1 )  )  :arg2 ( taste :arg0 i :arg1 butter )  :arg2 intitally :arg2 ( do :arg1 intitally :polarity - :manner way :arg1 ( overwhelm :arg1 ( flavor :arg1 meat )  )  )  )  )
include :arg2 ( person :arg0-of have-org-role :arg1-of ( contrast :arg1 ( and :op1 ( excellent :arg1 steak :null_edge 1 )  )  :arg2 ( taste :arg0 i :arg1 butter )  :arg2 intitally :arg2 ( do :arg1 intitally :polarity - :manner way :arg1 ( overwhelm :arg1 ( flavor :arg1 meat )  )  )  )  )
and :op1 ( bore :arg0 food )  :op2 ( expensive :domain food )
ambience :arg1 ( and :op1 pretty :op2 ( nice :arg1 ambience )  :time ( lunch :beneficiary converse :mod casual :location here :mod probable :mod ( good :degree most )  )  )
ambience :arg1 ( and :op1 pretty :op2 ( nice :arg1 ambience )  :time ( lunch :beneficiary converse :mod casual :location here :mod probable :mod ( good :degree most )  )  )
menu :arg1-of terrific :mod ( full :arg1 ( and :op1 ( roll :mod unique )  :op2 ( dish :arg1-of special )  )  )
menu :arg1-of terrific :mod ( full :arg1 ( and :op1 ( roll :mod unique )  :op2 ( dish :arg1-of special )  )  )
menu :arg1-of terrific :mod ( full :arg1 ( and :op1 ( roll :mod unique )  :op2 ( dish :arg1-of special )  )  )
contrast :arg1 service :arg2 ( possible :arg1 good )
love :arg0 we :arg1 ( and :op1 food :op2 drink :op2 atmosphere )
love :arg0 we :arg1 ( and :op1 food :op2 drink :op2 atmosphere )
love :arg0 we :arg1 ( and :op1 food :op2 drink :op2 atmosphere )
and :domain i :mod ( back :op1 ( few :op1 ( temporal-quantity :unit week :null_edge here )  )  )  :op3 ( experience :arg0 we :arg1-of bad :mod ( service :mod customer )  :arg1 restaurant :time ever )
go :arg4 ( binge :mod ( day :quant 3 )  :mod oyster )  :null_edge ( and :prep-with ( fish :arg0-of ( bring :arg1 close )  )  :op2 ( glad :arg1 ( place :domain this :mod ( o :domain trip )  )  :arg1-of ( cause :arg0 great )  )  )
go :arg4 ( binge :mod ( day :quant 3 )  :mod oyster )  :null_edge ( and :prep-with ( fish :arg0-of ( bring :arg1 close )  )  :op2 ( glad :arg1 ( place :domain this :mod ( o :domain trip )  )  :arg1-of ( cause :arg0 great )  )  )
go :arg4 ( binge :mod ( day :quant 3 )  :mod oyster )  :null_edge ( and :prep-with ( fish :arg0-of ( bring :arg1 close )  )  :op2 ( glad :arg1 ( place :domain this :mod ( o :domain trip )  )  :arg1-of ( cause :arg0 great )  )  )
and :op1 ( take :duration ( day :mod date-entity )  :arg1 ( person :arg0-of ( have-rel-role :arg2 mom )  )  :arg1 ( person :arg0-of ( have-rel-role :arg2 mother )  )  )  :op2 ( rude :null_edge maitre :degree pretty )
and :op1 ( couple :domain ( and :op2 i :op1 ( person :arg0-of ( have-rel-role :arg2 husband :location there )  )  )  )  :op2 ( time :mod each :time-of ( and :op1 ( person :arg1-of sit :arg1 we :arg2 ( bar :arg0 we :mod sushi :arg1 chef )  )  :op2 ( order :arg1 we :arg1 ( everything :mod ( carte :arg1 alum )  )  )  )  )
and :op1 ( couple :domain ( and :op2 i :op1 ( person :arg0-of ( have-rel-role :arg2 husband :location there )  )  )  )  :op2 ( time :mod each :time-of ( and :op1 ( person :arg1-of sit :arg1 we :arg2 ( bar :arg0 we :mod sushi :arg1 chef )  )  :op2 ( order :arg1 we :arg1 ( everything :mod ( carte :arg1 alum )  )  )  )  )
and :op2 cozy :op2 ( and :op1 ( relax :arg1 vibe :degree very )  :op2 ( great :domain service )  :op1 ( excellent :arg1 food )  )
and :op2 cozy :op2 ( and :op1 ( relax :arg1 vibe :degree very )  :op2 ( great :domain service )  :op1 ( excellent :arg1 food )  )
and :op2 cozy :op2 ( and :op1 ( relax :arg1 vibe :degree very )  :op2 ( great :domain service )  :op1 ( excellent :arg1 food )  )
try :condition ( nice :arg1 weather )  :arg1 ( snag :arg1 ( table :mod outside )  )
eat :condition ( look :arg0 you :arg1 ( quality :mod good )  )  :arg1 cheap :arg1 ( place :domain this )
and :op1 ( friendly :arg0 service :domain atmosphere )
and :op1 ( friendly :arg0 service :domain atmosphere )
and :op1 ( buy :time ( live :arg0 i :manner upstate :duration while )  :arg0 i :arg1 freeze :arg1 bagel )  :op2 ( good :mod still :compared-to ( else :mod any )  )
recommend :arg0 i :arg1 ( see :arg1 ( or :op2 ew :op2 ( chop-down :mod pork )  :op2 ( plate :mod tofu )  )  )
recommend :arg0 i :arg1 ( see :arg1 ( or :op2 ew :op2 ( chop-down :mod pork )  :op2 ( plate :mod tofu )  )  )
recommend :arg0 i :arg1 ( see :arg1 ( or :op2 ew :op2 ( chop-down :mod pork )  :op2 ( plate :mod tofu )  )  )
think :arg2 life :arg0 i :arg1 ( possible :arg1 ( satisfy :arg1 ( and :op1 taste :op2 quantity )  :null_edge 9 :null_edge 3 )  )
00 :null_edge nyc
think :arg2 life :arg0 i :arg1 ( possible :arg1 ( satisfy :arg1 ( and :op1 taste :op2 quantity )  :null_edge 9 :null_edge 3 )  )
00 :null_edge nyc
hear :arg1 ( place :domain this :mod ( good :degree most )  :mod secret :location midtown )  :arg0 i :arg2 bartender :time ( after :op1 ( have :arg1 ( and :op1 ( food :arg1-of brilliant )  :op1 ( try :arg1 ( steak :prep-with ( mushroom :mod portobello )  )  )  :op2 ( drink :arg1-of ( bar :weekday ( person :name ( name :op1 tuesday )  :mod last )  )  )  )  )  )
hear :arg1 ( place :domain this :mod ( good :degree most )  :mod secret :location midtown )  :arg0 i :arg2 bartender :time ( after :op1 ( have :arg1 ( and :op1 ( food :arg1-of brilliant )  :op1 ( try :arg1 ( steak :prep-with ( mushroom :mod portobello )  )  )  :op2 ( drink :arg1-of ( bar :weekday ( person :name ( name :op1 tuesday )  :mod last )  )  )  )  )  )
hear :arg1 ( place :domain this :mod ( good :degree most )  :mod secret :location midtown )  :arg0 i :arg2 bartender :time ( after :op1 ( have :arg1 ( and :op1 ( food :arg1-of brilliant )  :op1 ( try :arg1 ( steak :prep-with ( mushroom :mod portobello )  )  )  :op2 ( drink :arg1-of ( bar :weekday ( person :name ( name :op1 tuesday )  :mod last )  )  )  )  )  )
hear :arg1 ( place :domain this :mod ( good :degree most )  :mod secret :location midtown )  :arg0 i :arg2 bartender :time ( after :op1 ( have :arg1 ( and :op1 ( food :arg1-of brilliant )  :op1 ( try :arg1 ( steak :prep-with ( mushroom :mod portobello )  )  )  :op2 ( drink :arg1-of ( bar :weekday ( person :name ( name :op1 tuesday )  :mod last )  )  )  )  )  )
hear :arg1 ( place :domain this :mod ( good :degree most )  :mod secret :location midtown )  :arg0 i :arg2 bartender :time ( after :op1 ( have :arg1 ( and :op1 ( food :arg1-of brilliant )  :op1 ( try :arg1 ( steak :prep-with ( mushroom :mod portobello )  )  )  :op2 ( drink :arg1-of ( bar :weekday ( person :name ( name :op1 tuesday )  :mod last )  )  )  )  )  )
and :op1 ( excellent :arg1 service )  :op2 ( friendly :arg1 service )  :op2 attentive
and :op1 ( course :mod main :arg0-of ( have :arg1 ( overall :mod decency )  )  )  :quant ( portion :arg1-of average )
and :op1 ( course :mod main :arg0-of ( have :arg1 ( overall :mod decency )  )  )  :quant ( portion :arg1-of average )
temporal-quantity :unit minute :quant 20 :prep-for ( reserve :arg2 ( give :arg1 ( time :time-of ( and :op1 ( have :arg1 ( cocktail :quant few )  )  :op2 ( enjoy :arg1 ( and :op1 ( thing :arg1-of surround :mod other )  )  )  )  )  )  )
temporal-quantity :unit minute :quant 20 :prep-for ( reserve :arg2 ( give :arg1 ( time :time-of ( and :op1 ( have :arg1 ( cocktail :quant few )  )  :op2 ( enjoy :arg1 ( and :op1 ( thing :arg1-of surround :mod other )  )  )  )  )  )  )
temporal-quantity :unit minute :quant 20 :prep-for ( reserve :arg2 ( give :arg1 ( time :time-of ( and :op1 ( have :arg1 ( cocktail :quant few )  )  :op2 ( enjoy :arg1 ( and :op1 ( thing :arg1-of surround :mod other )  )  )  )  )  )  )
attentive :domain waitstaff :mod great :degree very
and :op1 ( diverse :arg0 ( menu :mod dinner )  )  :op2 top :op2 notch
cuisine :arg1-of modern :null_edge all
and :op1 ( like :arg0 i :arg0 ( t :null_edge don )  :arg1 ( food :source ( country :name ( name :op1 indian )  )  )  :degree ( much :degree too )  )  :op2 ( want :arg1 ( delicious :domain this )  :arg0 you :arg1 ( factor :arg0 you :arg2 equation )  )
possible :arg1 ( rejoice :location taj :arg0 vegetarian :arg1 ( manna :arg1 ( dish :quant all )  :arg1 heaven )  )
win :arg0 i :arg1 ( go :arg0 i :direction back :condition ( distance-quantity :unit foot :arg0 ( someone :mod else )  :arg1 bill )  )
and :op1 ( live :arg0 we :location ( jersey :mod new )  )  :op3 ( buy :arg0 we :condition ( go :arg0 we :arg4 ( city :arg1-of new :location york )  )  :arg0 we :arg1 ( bagel :arg2 ( and :op1 eat :op1 hot :op2 ( freeze :arg1 ( tell :arg1 ( look :arg0 ( t :null_edge ( bring :condition ( call :arg0 i )  :arg0 they :arg1 it :arg2 car :arg0 i )  )  :arg1 parking )  )  )  )  )  )
hand :arg1 ( spot :arg1-of ( hot :degree most )  :time night :null_edge bronx )
and :op1 ( have :arg0 i :null_edge ( agree :arg0 i :arg2 mass :arg1 ( heel :arg1 serve :domain deliver :arg1 ( event :name ( name :op1 achilles )  )  )  )  )
and :op1 ( have :arg0 i :null_edge ( agree :arg0 i :arg2 mass :arg1 ( heel :arg1 serve :domain deliver :arg1 ( event :name ( name :op1 achilles )  )  )  )  )
contrast :arg1 ( steep :arg0 bill :degree bit )  :arg2 ( great :domain experience )
bar :arg1-of nice :quant little :arg2 ( and :arg1-of nice :op2 ( bartender :mod good )  :op2 francoi :op2 ( service :mod good )  )
bar :arg1-of nice :quant little :arg2 ( and :arg1-of nice :op2 ( bartender :mod good )  :op2 francoi :op2 ( service :mod good )  )
bar :arg1-of nice :quant little :arg2 ( and :arg1-of nice :op2 ( bartender :mod good )  :op2 francoi :op2 ( service :mod good )  )
bar :arg1-of nice :quant little :arg2 ( and :arg1-of nice :op2 ( bartender :mod good )  :op2 francoi :op2 ( service :mod good )  )
and :op1 ( come :arg1 calamarus :accompanier ( sauce :mod incredible )  :arg1 ( noodle :mod duck )  )
and :op1 ( come :arg1 calamarus :accompanier ( sauce :mod incredible )  :arg1 ( noodle :mod duck )  )
and :op1 ( come :arg1 calamarus :accompanier ( sauce :mod incredible )  :arg1 ( noodle :mod duck )  )
go :arg0 i :mod definite :direction back :arg1 ( martini :mod only :quant some :mod exotic :arg1 blackboard )
and :op1 ( food :arg1-of simple :mod comfort )  :op2 ( portion :domain ( and :op1 hot :op2 lage )  )
and :op1 ( food :arg1-of simple :mod comfort )  :op2 ( portion :domain ( and :op1 hot :op2 lage )  )
stay :arg1 ( roll :quant 2 :mod specialty :arg1 menu )  :arg1 ( and :op1 ( avocado :quant ( much :degree too )  )  :op2 rice :op1 ( fill :arg1 you :arg1-of ( quick :mod right )  )  )
stay :arg1 ( roll :quant 2 :mod specialty :arg1 menu )  :arg1 ( and :op1 ( avocado :quant ( much :degree too )  )  :op2 rice :op1 ( fill :arg1 you :arg1-of ( quick :mod right )  )  )
stay :arg1 ( roll :quant 2 :mod specialty :arg1 menu )  :arg1 ( and :op1 ( avocado :quant ( much :degree too )  )  :op2 rice :op1 ( fill :arg1 you :arg1-of ( quick :mod right )  )  )
stay :arg1 ( roll :quant 2 :mod specialty :arg1 menu )  :arg1 ( and :op1 ( avocado :quant ( much :degree too )  )  :op2 rice :op1 ( fill :arg1 you :arg1-of ( quick :mod right )  )  )
and :op1 ( get :arg0 we :arg1 ( refill :arg1 drink )  )  :op2 ( didn :arg0 she )  :op2 ( contrast :arg1 ( offer :arg1 ( option :mod dessert )  )  )
and :op1 ( get :arg0 we :arg1 ( refill :arg1 drink )  )  :op2 ( didn :arg0 she )  :op2 ( contrast :arg1 ( offer :arg1 ( option :mod dessert )  )  )
price :arg1 bagel :mod also :manner reasonable :purpose nyc
price :arg1 bagel :mod also :manner reasonable :purpose nyc
or :op1 ( place :location-of ( possible :arg1 ( handle :arg0 you )  )  :domain it :mod great :beneficiary ( dinner :mod business )  :mod simple )  :op2 ( fun :domain ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  :op2 ( table :null_edge 2 )
or :op1 ( place :location-of ( possible :arg1 ( handle :arg0 you )  )  :domain it :mod great :beneficiary ( dinner :mod business )  :mod simple )  :op2 ( fun :domain ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  :op2 ( table :null_edge 2 )
leave :arg0 decor :arg1 ( something :arg1-of desire )
specify :mod also :condition ( like :arg0 you :arg1 ( spicy :mod food :arg2 ( don :arg1-of ( bland :arg2 you )  )  )  )
contrast :arg1 ( fine :arg1 waiter :arg1 ( look :arg1 nice :arg1 ( try :mod that :mod too :arg1-of hard )  )  )  :arg2 ( recommend :arg1 ( expect :arg1 ( thing :arg2-of price )  :arg1 ( more :quant little )  :arg1 food )  )
contrast :arg1 ( fine :arg1 waiter :arg1 ( look :arg1 nice :arg1 ( try :mod that :mod too :arg1-of hard )  )  )  :arg2 ( recommend :arg1 ( expect :arg1 ( thing :arg2-of price )  :arg1 ( more :quant little )  :arg1 food )  )
contrast :arg1 ( fine :arg1 waiter :arg1 ( look :arg1 nice :arg1 ( try :mod that :mod too :arg1-of hard )  )  )  :arg2 ( recommend :arg1 ( expect :arg1 ( thing :arg2-of price )  :arg1 ( more :quant little )  :arg1 food )  )
contrast :arg1 ( fine :arg1 waiter :arg1 ( look :arg1 nice :arg1 ( try :mod that :mod too :arg1-of hard )  )  )  :arg2 ( recommend :arg1 ( expect :arg1 ( thing :arg2-of price )  :arg1 ( more :quant little )  :arg1 food )  )
come :arg3 boston :arg1 ( place :mod this )  :null_edge ( have :arg1 ( topping :mod ( funky :degree more )  )  )  :source ( resemble :arg2 ( pizza :location ( square :mod kendall :location cambridge )  )  )
spend :arg1 ( and :op1 ( go :arg4 there :arg0 ( person :arg0-of ( have-rel-role :arg2 husband )  )  )  )  :arg0 we :null_edge 60
possible :arg1 ( ummmmm :arg1-of ( need :arg1-of ( have :arg1 ( tail :mod lobster )  )  :arg1-of ( say :arg0 i :arg1 more )  )  )  :arg1 ( say :quant ( more :mod any )  :arg1 ( place :domain it :location-of ( forget :arg0 you :arg1 ( miss :condition ( go :arg0 you :arg0 you )  :arg0 you :mod ll :arg1 ( meal :poss life )  :frequency time )  )  )  )
spend :arg1 ( and :op1 ( go :arg4 there :arg0 ( person :arg0-of ( have-rel-role :arg2 husband )  )  )  )  :arg0 we :null_edge 60
possible :arg1 ( ummmmm :arg1-of ( need :arg1-of ( have :arg1 ( tail :mod lobster )  )  :arg1-of ( say :arg0 i :arg1 more )  )  )  :arg1 ( say :quant ( more :mod any )  :arg1 ( place :domain it :location-of ( forget :arg0 you :arg1 ( miss :condition ( go :arg0 you :arg0 you )  :arg0 you :mod ll :arg1 ( meal :poss life )  :frequency time )  )  )  )
spend :arg1 ( and :op1 ( go :arg4 there :arg0 ( person :arg0-of ( have-rel-role :arg2 husband )  )  )  )  :arg0 we :null_edge 60
possible :arg1 ( ummmmm :arg1-of ( need :arg1-of ( have :arg1 ( tail :mod lobster )  )  :arg1-of ( say :arg0 i :arg1 more )  )  )  :arg1 ( say :quant ( more :mod any )  :arg1 ( place :domain it :location-of ( forget :arg0 you :arg1 ( miss :condition ( go :arg0 you :arg0 you )  :arg0 you :mod ll :arg1 ( meal :poss life )  :frequency time )  )  )  )
offer :concession ( effort :purpose ( increase :arg1 turnover )  )  :arg0 restaurant :polarity - :arg1 dessert :arg3 ( beyond :op1 ( cup :mod ( espresso :arg1-of complimentary )  :arg1-of ( fill :arg2 ( mousse :mod chocolate )  )  )  )
offer :concession ( effort :purpose ( increase :arg1 turnover )  )  :arg0 restaurant :polarity - :arg1 dessert :arg3 ( beyond :op1 ( cup :mod ( espresso :arg1-of complimentary )  :arg1-of ( fill :arg2 ( mousse :mod chocolate )  )  )  )
and :op1 ( time :arg0 i :arg2 ( restaurant :mod this )  )  :op2 ( go :arg0 i :arg1 more-than :condition ( craving :beneficiary ( or :op1 pho :op2 ( chicken :mod ( grass :mod lemon )  )  :op2 ( cube :arg1 beef :arg1 rice )  )  )  :arg1 this )
and :op1 ( time :arg0 i :arg2 ( restaurant :mod this )  )  :op2 ( go :arg0 i :arg1 more-than :condition ( craving :beneficiary ( or :op1 pho :op2 ( chicken :mod ( grass :mod lemon )  )  :op2 ( cube :arg1 beef :arg1 rice )  )  )  :arg1 this )
and :op1 ( time :arg0 i :arg2 ( restaurant :mod this )  )  :op2 ( go :arg0 i :arg1 more-than :condition ( craving :beneficiary ( or :op1 pho :op2 ( chicken :mod ( grass :mod lemon )  )  :op2 ( cube :arg1 beef :arg1 rice )  )  )  :arg1 this )
and :op2 ( and :op1 ( portrait :quant plenty )  :op1 ( actor :mod ( country :name ( name :op1 indian )  )  :arg0-of ( adorn :location ( person :mod white :null_edge classic :arg1-of black )  )  )  :op1 ( love :arg1 ( some :arg1-of include )  :arg1 ( know :arg1 obtain )  )  )  :arg1-of ( cause :arg0 ( fan :domain you :topic ( star :mod ( country :name ( name :op1 indian )  )  :mod oldy :mod film )  )  )
and :op1 ( spectacular :domain food :arg2 ( appitizer :prep-to ( course :mod main )  )  )
and :op1 ( spectacular :domain food :arg2 ( appitizer :prep-to ( course :mod main )  )  )
and :op1 ( spectacular :domain food :arg2 ( appitizer :prep-to ( course :mod main )  )  )
and :op1 ( spectacular :domain food :arg2 ( appitizer :prep-to ( course :mod main )  )  )
delicious :domain fish :location ( sauce :mod incredible :mod curry )
delicious :domain fish :location ( sauce :mod incredible :mod curry )
look :arg1 ( and :op1 ( search :arg0 you :arg0-of ( experience :arg0 you :null_edge ( authentic :degree most )  )  )  :polarity - :op1 famous :op2 history )  :direction down :prep-on ( side :arg1-of low :mod east )
good :domain ( deliver :mod even )  :domain ( bun :mod juicy :mod pork )  :degree quite
xconcept
contrast :arg1 ( food :mod ( good :arg1-of average )  :mod thai )  :arg2 ( deliver :mod terrible )
contrast :arg1 ( food :mod ( good :arg1-of average )  :mod thai )  :arg2 ( deliver :mod terrible )
contrast :arg2 space :arg1 ( nice :arg1 ( order :arg0 we :arg1 drink :arg0 we :arg1 surprise )  )
contrast :arg2 space :arg1 ( nice :arg1 ( order :arg0 we :arg1 drink :arg0 we :arg1 surprise )  )
feel :arg0 ( and :op1 ( place :mod entire :location-of ( treat :arg0 we )  )  )  :arg2 ( belt :mod conveyor )
use :arg0 ( pizza :poss joe )  :arg2 ( have :arg0 pizza :arg1 ( slice :mod ( good :degree most )  )  )  :time ( until :op1 ( open :arg1 ( pizzeria :mod this )  )  )
and :op1 ( provide :arg1 ( dessert :mod delicious :location house )  )
and :op1 ( live :arg0 they :mod still :location ( age :mod dark )  )  :op2 ( have :arg0 they :arg1 ( machine :mod answering )  )  :op2 ( limit :condition ( want :arg0 you :arg1 reserve )  :arg0 you )
amaze :arg0 food :arg1 ( and :op1 ( pasta :mod rich )  :op2 ( pizza :arg1-of fresh )  )
amaze :arg0 food :arg1 ( and :op1 ( pasta :mod rich )  :op2 ( pizza :arg1-of fresh )  )
amaze :arg0 food :arg1 ( and :op1 ( pasta :mod rich )  :op2 ( pizza :arg1-of fresh )  )
contrast :arg2 ( good :domain food :degree very :domain ( consider :arg0 i :arg2 ( world :mod this )  )  )
have :arg0 i :arg1 ( bisque :mod ( lobster :accompanier ( oz :quant 2 )  )  )
lobster :mod maine
have :arg0 i :arg1 ( bisque :mod ( lobster :accompanier ( oz :quant 2 )  )  )
lobster :mod maine
and :op1 ( try :arg1 thaus :arg1 ( price :arg1 ( cheap :degree so )  )  )  :op2 fabulous
and :op1 ( try :arg1 thaus :arg1 ( price :arg1 ( cheap :degree so )  )  )  :op2 fabulous
and :op1 ( great :domain food )  :op2 inexpensive
price :arg1-of ( reasonable :degree very )
possible :arg1 ( miss :null_edge ( save :arg1 room )  )
xconcept
xconcept
contrast :arg1 ( possible :arg1 ( confuse :arg0 it :mod little :purpose ( order :arg0 one )  )  :condition ( order :time once :arg1 food :arg0 you :arg2 ( thing :arg2-of treat )  )  )
organic :domain ingredient :mod ( plus :mod real )
bad :degree so :arg1 ( refuse :arg0 i :mod actual :arg1 ( pay :arg0 i :arg3 food )  )
recommend :arg0 i :arg1 ( spot :mod this )  :arg1 ( anyone :arg0-of ( enjoy :arg1 ( cuisine :arg1-of fine )  :arg1 ( thing :arg2-of price :arg1-of reasonable )  )  )
recommend :arg0 i :arg1 ( spot :mod this )  :arg1 ( anyone :arg0-of ( enjoy :arg1 ( cuisine :arg1-of fine )  :arg1 ( thing :arg2-of price :arg1-of reasonable )  )  )
and :op1 ( attentive :domain ( person :arg2-of staff )  :degree very :arg1 ( ambience :mod lovely )  )  :op2 ( superb :mod food )
and :op1 ( attentive :domain ( person :arg2-of staff )  :degree very :arg1 ( ambience :mod lovely )  )  :op2 ( superb :mod food )
and :op1 ( attentive :domain ( person :arg2-of staff )  :degree very :arg1 ( ambience :mod lovely )  )  :op2 ( superb :mod food )
love :arg0 i :null_edge ( think :arg0 i :arg0 restaurant :arg1 ( make :arg0 ( use :arg1 ( ingrediant :arg1-of fancy :mod expensive )  )  :arg1 ( cuisine :mod ( fine :arg1 food :arg1 ( idea :mod even :polarity - :arg1-of use )  )  )  )  )
love :arg0 i :null_edge ( think :arg0 i :arg0 restaurant :arg1 ( make :arg0 ( use :arg1 ( ingrediant :arg1-of fancy :mod expensive )  )  :arg1 ( cuisine :mod ( fine :arg1 food :arg1 ( idea :mod even :polarity - :arg1-of use )  )  )  )  )
love :arg0 i :null_edge ( think :arg0 i :arg0 restaurant :arg1 ( make :arg0 ( use :arg1 ( ingrediant :arg1-of fancy :mod expensive )  )  :arg1 ( cuisine :mod ( fine :arg1 food :arg1 ( idea :mod even :polarity - :arg1-of use )  )  )  )  )
contrast :arg1 ( and :op1 ( pizza :arg1-of excellent :poss ( area :domain ( service :mod too )  :mod really :arg0-of make :domain ( place :mod this )  :mod backyard :mod dine )  )  :op2 wine )
contrast :arg1 ( and :op1 ( pizza :arg1-of excellent :poss ( area :domain ( service :mod too )  :mod really :arg0-of make :domain ( place :mod this )  :mod backyard :mod dine )  )  :op2 wine )
contrast :arg1 ( and :op1 ( pizza :arg1-of excellent :poss ( area :domain ( service :mod too )  :mod really :arg0-of make :domain ( place :mod this )  :mod backyard :mod dine )  )  :op2 wine )
contrast :arg1 ( and :op1 ( pizza :arg1-of excellent :poss ( area :domain ( service :mod too )  :mod really :arg0-of make :domain ( place :mod this )  :mod backyard :mod dine )  )  :op2 wine )
and :op1 ( sweet :arg1 waiter )  :op2 ( tasty :arg1 waiter :domain food )  :op2 ( large :domain waiter :domain bill :degree too )
and :op1 ( sweet :arg1 waiter )  :op2 ( tasty :arg1 waiter :domain food )  :op2 ( large :domain waiter :domain bill :degree too )
and :op1 ( sweet :arg1 waiter )  :op2 ( tasty :arg1 waiter :domain food )  :op2 ( large :domain waiter :domain bill :degree too )
treat :arg1 ( superb :domain service )  :arg2 family
and :null_edge ( we :mod all )  :op2 ( menu :mod tasting )  :op2 ( feel :arg0 we :quant ( some :arg1-of ( include :arg2 ( review :mod other )  )  )  :arg1 ( more :compared-to ( food :quant enough )  )  )
and :null_edge ( we :mod all )  :op2 ( menu :mod tasting )  :op2 ( feel :arg0 we :quant ( some :arg1-of ( include :arg2 ( review :mod other )  )  )  :arg1 ( more :compared-to ( food :quant enough )  )  )
contrast :arg1 ( take :mod only :arg1 ( temporal-quantity :unit minute :null_edge ( about :null_edge ( or :null_edge 5 :op2 so )  )  )  :arg0 ( get :arg1 ( table :arg1-of empty )  )  )  :arg2 ( stand :arg1 ( bad :degree too )  )
contrast :arg1 ( possible :arg1 ( small :domain menu )  :arg1 ( delicious :arg1 everything )  )
scrap :arg1 ( bottom :arg1 vessel )  :arg1 ( rice :poss we :mod ( chunk :mod large )  :arg1-of ( burnt :time ( bowl :arg0-of serve )  )  )
scrap :arg1 ( bottom :arg1 vessel )  :arg1 ( rice :poss we :mod ( chunk :mod large )  :arg1-of ( burnt :time ( bowl :arg0-of serve )  )  )
thing :arg1-of surround :null_edge warm :arg0-of comfortable :arg1 ( appointment :arg1-of nice :mod ( person :arg0-of witness :arg1 ( and :op1 ( glass :arg1-of etched :arg1-of ( separate :arg1 ( room :mod dine )  )  )  :op2 brickwork )  )  )
thing :arg1-of surround :null_edge warm :arg0-of comfortable :arg1 ( appointment :arg1-of nice :mod ( person :arg0-of witness :arg1 ( and :op1 ( glass :arg1-of etched :arg1-of ( separate :arg1 ( room :mod dine )  )  )  :op2 brickwork )  )  )
contrast :arg1 ( run :arg0 we :time ( late :degree little )  :purpose reserve )  :arg2 ( t :arg1 ( problem :arg1-of ( get :arg1 table :time immediate )  )  )
contrast :arg1 ( run :arg0 we :time ( late :degree little )  :purpose reserve )  :arg2 ( t :arg1 ( problem :arg1-of ( get :arg1 table :time immediate )  )  )
and :op1 ( arrive :arg1 we :time time :purpose reserve )  :op2 ( seat :manner prompt )
xconcept
go :arg0 i :mod definite :direction back :arg4 ( occasion :arg1-of ( special :degree very )  :beneficiary ( dine :arg1-of regular :arg1-of fine )  )
staff :mod mannered :arg1-of pleasant :arg0-of ( have :null_edge ( employ :arg0 tony )  )
flavor :arg1 ( and :op1 robust :op2 subtle )
possible :mod all :arg1 ( say :arg0 i :arg1 ( and :op1 ( pint :quant 2 :time ( temporal-quantity :unit hour :mod happy )  :mod ( oyster :quant some :arg1-of ( cheap :degree most )  :purpose ( find :arg0 you :arg1 ll :location city :arg1 ( quality :mod some :mod ( good :degree most )  )  )  )  )  )  )
possible :mod all :arg1 ( say :arg0 i :arg1 ( and :op1 ( pint :quant 2 :time ( temporal-quantity :unit hour :mod happy )  :mod ( oyster :quant some :arg1-of ( cheap :degree most )  :purpose ( find :arg0 you :arg1 ll :location city :arg1 ( quality :mod some :mod ( good :degree most )  )  )  )  )  )  )
great :domain ( wait :arg1 i :arg2 ( eat :arg0 i )  )  :mod just :degree that
conclude :arg0 we :arg2 ( cake :mod tiramisu :mod chocolate )  :manner ( delicious :domain both )
bad :arg1 ( service :null_edge null_tag )
fantastic :null_edge ( great :domain service :location here )  :domain food
fantastic :null_edge ( great :domain service :location here )  :domain food
place :domain this :mod such :mod lovely :mod peaceful :location-of ( eat :location outside )
and :op1 ( delicious :domain sauce )  :op2 ( perfect :arg1 sauce :arg1 crust )
and :op1 ( delicious :domain sauce )  :op2 ( perfect :arg1 sauce :arg1 crust )
chance :time ( since :op1 dinner )  :arg0 i :arg1 ( 3x :arg1 brunch :mod orsay )
chance :time ( since :op1 dinner )  :arg0 i :arg1 ( 3x :arg1 brunch :mod orsay )
contrast :arg2 ( pay :arg0 you :arg3 ( decore :quant lot )  :arg1 ( or :op1 ( good :domain food :polarity - )  :op2 bad :op2 ( and :quant lot :op2 ( country :name ( name :op1 chinese )  )  :op2 ( place :mod other :name ( name :op1 asian )  :mod fusion )  :location ny )  )  )
contrast :arg2 ( pay :arg0 you :arg3 ( decore :quant lot )  :arg1 ( or :op1 ( good :domain food :polarity - )  :op2 bad :op2 ( and :quant lot :op2 ( country :name ( name :op1 chinese )  )  :op2 ( place :mod other :name ( name :op1 asian )  :mod fusion )  :location ny )  )  )
have :arg0 they :arg1 ( entree :quant some :mod great )  :location here
excellent :domain service :manner consistent :null_edge ( decency :mod just )
good :domain ( food :arg1-of ( serve :arg1 ( portion :mod small :mod tasting :part-of option )  )  )  :degree very :arg2 ( good :arg1 ( dish :mod each )  :compared-to next )
good :domain ( food :arg1-of ( serve :arg1 ( portion :mod small :mod tasting :part-of option )  )  )  :degree very :arg2 ( good :arg1 ( dish :mod each )  :compared-to next )
good :domain ( food :arg1-of ( serve :arg1 ( portion :mod small :mod tasting :part-of option )  )  )  :degree very :arg2 ( good :arg1 ( dish :mod each )  :compared-to next )
good :domain ( food :arg1-of ( serve :arg1 ( portion :mod small :mod tasting :part-of option )  )  )  :degree very :arg2 ( good :arg1 ( dish :mod each )  :compared-to next )
contrast :arg2 ( cater :arg0 they :arg2 palate )  :arg2 ( will :arg0 ( you :null_edge hot )  :arg1 know :degree more :arg1 ( oblige :arg0 you )  )
xconcept :x ( and :op1 ( chicken :mod mango )  )  :x ( and :domain i :op2 ( possible :arg1 ( go :arg1 ( tell :arg2 you :arg1 ( delicious :arg1 that )  )  )  )  :op2 presentation )
xconcept :x ( and :op1 ( chicken :mod mango )  )  :x ( and :domain i :op2 ( possible :arg1 ( go :arg1 ( tell :arg2 you :arg1 ( delicious :arg1 that )  )  )  )  :op2 presentation )
care :arg0 i :degree more :arg1 ( and :op1 food :op2 ambience )
care :arg0 i :degree more :arg1 ( and :op1 food :op2 ambience )
contrast :mod oh :arg2 wait :null_edge we :arg2 ( thing :arg1-of drink :arg1-of ( overpriced :mod also :manner delightful )  )
fantastic :arg0 service
hand :domain ( potatoe :mod garlic :mod mashed )  :arg1 ( good :degree most :location city )
okay :arg1 ( and :op1 food :op2 service )
okay :arg1 ( and :op1 food :op2 service )
and :op1 ( under :arg1 ( meat :consist-of lamb )  )  :op2 ( cook :arg1 meat )  :op2 chewy
have :null_edge ( thai :mod ( good :degree most )  )  :arg0 i :time ever
and :op1 ( decrease :time time :arg1 ( quality :mod food )  :degree substantial :arg1 ( service :mod definite :poss reason )  )  :op1 ( crowd :degree ( less :quant lot )  :domain use )
and :op1 ( decrease :time time :arg1 ( quality :mod food )  :degree substantial :arg1 ( service :mod definite :poss reason )  )  :op1 ( crowd :degree ( less :quant lot )  :domain use )
and :op1 ( pizza :mod great )  :op2 ( service :arg1-of fantastic )
and :op1 ( pizza :mod great )  :op2 ( service :arg1-of fantastic )
and :op1 ( seat :arg1 we :location outside )  :op2 ( spill :arg1 we :arg1 waiter :arg1 ( and :op1 ( wine :mod red )  :op2 ( tea :arg1-of hot )  )  :arg2 ( and :op2 date )  )
and :op1 ( seat :arg1 we :location outside )  :op2 ( spill :arg1 we :arg1 waiter :arg1 ( and :op1 ( wine :mod red )  :op2 ( tea :arg1-of hot )  )  :arg2 ( and :op2 date )  )
and :op1 ( seat :arg1 we :location outside )  :op2 ( spill :arg1 we :arg1 waiter :arg1 ( and :op1 ( wine :mod red )  :op2 ( tea :arg1-of hot )  )  :arg2 ( and :op2 date )  )
and :op1 ( seat :arg1 we :location outside )  :op2 ( spill :arg1 we :arg1 waiter :arg1 ( and :op1 ( wine :mod red )  :op2 ( tea :arg1-of hot )  )  :arg2 ( and :op2 date )  )
ask :arg0 i :mod just :time ( time :polarity - :null_edge oil :mod next )
horrible :domain ( place :domain this :mod pretty :manner ( way :mod that :mod ( cute :degree over )  :mod ( country :name ( name :op1 france )  )  )  )  :domain food
horrible :domain ( place :domain this :mod pretty :manner ( way :mod that :mod ( cute :degree over )  :mod ( country :name ( name :op1 france )  )  )  )  :domain food
and :op1 ( go :arg0 i :arg4 there :purpose lunch )  :op2 ( good :compared-to ( expect :arg0 i :source ( review :arg0-of ( read :arg0 i )  )  )  )
and :op1 ( t :domain ( list :arg2 wine )  :domain isn :null_edge great )  :op2 ( ship :arg0 isn :arg1 dessert :time ( down :op1 ( street :mod ( good :arg1-of use )  )  )  )
and :op1 ( t :domain ( list :arg2 wine )  :domain isn :null_edge great )  :op2 ( ship :arg0 isn :arg1 dessert :time ( down :op1 ( street :mod ( good :arg1-of use )  )  )  )
and :op2 ( ask :arg1 4 )  :op2 ( contrast :arg1 ( order :arg0 i :arg1 lassus )  :arg2 get )
good :domain coffee :degree quite :degree too
fine :arg1 ( list :mod great :arg2 wine :mod ( country :name ( name :op1 italian )  )  :consist-of ( food :mod good )  )  :time initial
fine :arg1 ( list :mod great :arg2 wine :mod ( country :name ( name :op1 italian )  )  :consist-of ( food :mod good )  )  :time initial
overcrowded :null_edge ( large :domain space )  :domain they :degree ve :prep-with ( table :location floor )
overcrowded :null_edge ( large :domain space )  :domain they :degree ve :prep-with ( table :location floor )
and :op1 ( helpful :domain they :arg1-of ( have-condition :arg1 you :location ( around :op1 ( run :mod grand )  )  :arg2 ( regret :arg0 you :arg1 ( roll-out :mod ( date :mod event )  :location ( around :op1 date :op1 you )  )  :mod only :arg1 ( chose :arg1 ( place :mod this )  )  :arg1 ( become :mod also :arg2 hostile )  )  )  )
have :arg0 i :null_edge ( ask :arg0 i :time ( before :op1 3 :arg0 she :time final :direction back :op1 ( dish :arg1-of request )  )  )
and :op1 ( improper :null_edge normal :domain that )  :op2 ( delicious :degree all )  :op2 ( complain :arg0 ( person :arg0-of host )  )
delicious :arg1 taxan
possible :arg1 ( get :location ( place :mod other :location nyc :location-of ( want :arg1 sandwich :arg0 you :mod only :arg1 ( triple :null_edge decker )  )  )  :arg0 ( you :location here )  :arg1 ( want :arg0 you :prep-in reasonable )  :arg1 ( portion :arg1-of size )  :arg1 ( and :op2 price )  )
possible :arg1 ( get :location ( place :mod other :location nyc :location-of ( want :arg1 sandwich :arg0 you :mod only :arg1 ( triple :null_edge decker )  )  )  :arg0 ( you :location here )  :arg1 ( want :arg0 you :prep-in reasonable )  :arg1 ( portion :arg1-of size )  :arg1 ( and :op2 price )  )
possible :arg1 ( get :location ( place :mod other :location nyc :location-of ( want :arg1 sandwich :arg0 you :mod only :arg1 ( triple :null_edge decker )  )  )  :arg0 ( you :location here )  :arg1 ( want :arg0 you :prep-in reasonable )  :arg1 ( portion :arg1-of size )  :arg1 ( and :op2 price )  )
cuisine :location south :mod ( country :name ( name :op1 indian )  )  :mod still :location there :mod too
neighborhood :arg1 ( bother :arg0 ( snob :mod restaurant )  :condition need )  :domain ( place :mod ( kind :domain this :mod small )  )
couldn :arg0 they :null_edge ( make :mod even :arg1 ( salad :arg0-of appeal )  )
buck :null_edge ( tip :null_edge 2 )  :quant ( less :null_edge 25 )
sushi :arg0-of kill
packed :arg1-of ( cause :arg0 ( delicious :domain food )  )
friendly :arg1 ( have-org-role :arg2 staff :concession-of ( cover :arg0 have-org-role :arg0 taste :arg1 all )  )
friendly :arg1 ( have-org-role :arg2 staff :concession-of ( cover :arg0 have-org-role :arg0 taste :arg1 all )  )
play :arg0 jukebox :arg1 ( everything :source ( opera :mod ( country :name ( name :op1 italian )  )  :arg4 stroke )  )
martini :arg0 they :arg1-of perfect
sure :arg0 i :arg1 ( call :arg1 i :arg0 i :arg1 food :arg2 ( seem :arg1 ( country :name ( name :op1 indian )  :location here )  :arg1 fusion :arg1 ( country :name ( name :null_edge ( or :null_edge france :op2 ( country :name ( name :op1 indian )  )  :op2 exotic :op2 touch )  )  )  )  )
xconcept :x ve :x ( and :op1 ( eat :arg0 i :null_edge ( thai :null_edge many )  )  :op2 ( familiarize :degree very :arg2 cuisine )  )
attentive :domain waiter
good :degree most :domain margarita :null_edge ( have :arg0 i :concession ( return :arg1 i :arg4 naple )  )
make :arg0 taste :arg1 ( mouth :arg1 ( water :degree more )  )
contrast :arg1 ( extensive :domain ( list :arg2 sake )  )  :arg2 ( look :arg0 we :arg1 ( haze :mod purple :arg1-of ( list :arg1-of ( contrast :arg1-of make )  :arg2 request )  )  )
and :op1 ( cram :arg1 table :arg1 way :arg1-of ( close :degree too )  )  :op1 ( typical :arg1 menu :arg1 ( restaurant :mod any :mod ( country :name ( name :op1 italian )  )  )  )  :op2 ( overprice :arg1 ( list :arg2 wine )  :mod simple )
and :op1 ( cram :arg1 table :arg1 way :arg1-of ( close :degree too )  )  :op1 ( typical :arg1 menu :arg1 ( restaurant :mod any :mod ( country :name ( name :op1 italian )  )  )  )  :op2 ( overprice :arg1 ( list :arg2 wine )  :mod simple )
and :op1 ( cram :arg1 table :arg1 way :arg1-of ( close :degree too )  )  :op1 ( typical :arg1 menu :arg1 ( restaurant :mod any :mod ( country :name ( name :op1 italian )  )  )  )  :op2 ( overprice :arg1 ( list :arg2 wine )  :mod simple )
aweful :domain food :mod actual
and :op1 ( serve :arg1 they :arg1 ( appetizer :arg1-of free )  )  :op1 ( perfect :arg1 portion :arg2 lunch )
and :op1 ( serve :arg1 they :arg1 ( appetizer :arg1-of free )  )  :op1 ( perfect :arg1 portion :arg2 lunch )
and :op1 ( serve :arg1 they :arg1 ( appetizer :arg1-of free )  )  :op1 ( perfect :arg1 portion :arg2 lunch )
and :op1 ( serve :arg1 they :arg1 ( appetizer :arg1-of free )  )  :op1 ( perfect :arg1 portion :arg2 lunch )
and :op2 ( space :mod actual :purpose breathe )  :op2 ( set :arg0 decor :arg1 tone :arg2 ( dinner :mod intimate )  )
and :op2 ( space :mod actual :purpose breathe )  :op2 ( set :arg0 decor :arg1 tone :arg2 ( dinner :mod intimate )  )
and :op2 ( space :mod actual :purpose breathe )  :op2 ( set :arg0 decor :arg1 tone :arg2 ( dinner :mod intimate )  )
and :op1 ( go :arg0 we :null_edge around :time ( date-entity :null_edge 30 )  :time ( date-entity :weekday date-entity )  )  :op2 ( die :arg1 bit :time then :condition ( great :domain service )  )
order :arg0 ( and :op2 i :op1 ( person :arg0-of ( have-rel-role :arg2 husband )  )  )  :arg1 ( medium :mod steak )
and :op1 rice :op2 ( season :polarity - )  :op1 ( bland :domain sushi )  :op2 ( disgust :arg1 sushi )
and :op1 rice :op2 ( season :polarity - )  :op1 ( bland :domain sushi )  :op2 ( disgust :arg1 sushi )
and :op1 rice :op2 ( season :polarity - )  :op1 ( bland :domain sushi )  :op2 ( disgust :arg1 sushi )
have :arg0 ( place :mod this )  :mod really :arg1 ( and :op1 ( sushi :arg1-of fresh )  :op2 ( menu :arg1-of nice :mod large :arg1 ( cuisine :mod ( country :name ( name :op1 japanese )  )  :mod classic )  )  )
have :arg0 ( place :mod this )  :mod really :arg1 ( and :op1 ( sushi :arg1-of fresh )  :op2 ( menu :arg1-of nice :mod large :arg1 ( cuisine :mod ( country :name ( name :op1 japanese )  )  :mod classic )  )  )
have :arg0 ( place :mod this )  :mod really :arg1 ( and :op1 ( sushi :arg1-of fresh )  :op2 ( menu :arg1-of nice :mod large :arg1 ( cuisine :mod ( country :name ( name :op1 japanese )  )  :mod classic )  )  )
contrast :arg1 sushi :arg1 ( and :op1 average )  :arg2 price :arg2 anything
contrast :arg1 sushi :arg1 ( and :op1 average )  :arg2 price :arg2 anything
enjoy :arg0 ( and :op2 i :op1 ( person :arg0-of ( have-rel-role :arg2 wife )  )  )  :mod also :arg1 ( and :op1 spinach :op2 ( mein :null_edge shanghai :arg1-of low )  :op2 ( thing :arg0-of attract )  )
enjoy :arg0 ( and :op2 i :op1 ( person :arg0-of ( have-rel-role :arg2 wife )  )  )  :mod also :arg1 ( and :op1 spinach :op2 ( mein :null_edge shanghai :arg1-of low )  :op2 ( thing :arg0-of attract )  )
have :arg0 ( person :arg0-of own )  :arg1 coem :location ( website :mod this )  :null_edge ( give :arg1 credit )
turn :arg1 ( and :op1 ( service :mod full )  :op1 upstairs :op2 sit )
have :arg1 ( piece :arg1 ( order :quant ( several :op1 ( sum :mod dim )  )  )  :null_edge ( about :null_edge 6 )  :quant 8 )
suggest :condition ( have :arg0 you :arg1 ( fetish :mod dumple )  )  :arg0 i :arg1 ( try :arg0 you :arg1 some :location here )
menu :quant 3 :mod page :mod wine :arg1 ( and :op2 ( page :quant 1 )  )
menu :quant 3 :mod page :mod wine :arg1 ( and :op2 ( page :quant 1 )  )
menu :quant 3 :mod page :mod wine :arg1 ( and :op2 ( page :quant 1 )  )
wonderful :domain food :manner consistent :arg1 ( and :op1 ( come-out :arg1 i :location here :arg1 ( and :op1 ( accommodate :arg0 ( person :arg0-of own )  :time always )  :op2 friendly )  :duration ( multiple :op1 ( temporal-quantity :unit year )  )  )  )
wonderful :domain food :manner consistent :arg1 ( and :op1 ( come-out :arg1 i :location here :arg1 ( and :op1 ( accommodate :arg0 ( person :arg0-of own )  :time always )  :op2 friendly )  :duration ( multiple :op1 ( temporal-quantity :unit year )  )  )  )
and :op1 ( nonchalant :arg0 ( and :op1 waiter :op2 ( person :arg0-of own )  )  :arg0 this )  :op2 ( promise :arg1 ( call :arg1 ( or :op1 ( dismayed :null_edge ( exterminator :null_edge ( contrast :arg2 weren :arg1 ( expect :arg0 i )  )  )  )  :op2 apologetic )  )  )
and :op1 ( nonchalant :arg0 ( and :op1 waiter :op2 ( person :arg0-of own )  )  :arg0 this )  :op2 ( promise :arg1 ( call :arg1 ( or :op1 ( dismayed :null_edge ( exterminator :null_edge ( contrast :arg2 weren :arg1 ( expect :arg0 i )  )  )  )  :op2 apologetic )  )  )
and :op1 ( fantastic :domain food )
style :arg0 kong :arg1 ( and :op1 ( product :name ( name :op1 milk )  )  :op2 tea )  :instrument ( pearl :mod tapioca :arg1-of hot )
style :arg0 kong :arg1 ( and :op1 ( product :name ( name :op1 milk )  )  :op2 tea )  :instrument ( pearl :mod tapioca :arg1-of hot )
style :arg0 kong :arg1 ( and :op1 ( product :name ( name :op1 milk )  )  :op2 tea )  :instrument ( pearl :mod tapioca :arg1-of hot )
recommend :medium ( urchin :mod sea )  :arg0 chef :arg1 ( fish :mod assortment )  :arg1 ( tail :mod yellow :arg1 shrimp :arg2 ( fin :mod blue )  :mod ( eel :mod sea )  )
recommend :medium ( urchin :mod sea )  :arg0 chef :arg1 ( fish :mod assortment )  :arg1 ( tail :mod yellow :arg1 shrimp :arg2 ( fin :mod blue )  :mod ( eel :mod sea )  )
recommend :medium ( urchin :mod sea )  :arg0 chef :arg1 ( fish :mod assortment )  :arg1 ( tail :mod yellow :arg1 shrimp :arg2 ( fin :mod blue )  :mod ( eel :mod sea )  )
recommend :medium ( urchin :mod sea )  :arg0 chef :arg1 ( fish :mod assortment )  :arg1 ( tail :mod yellow :arg1 shrimp :arg2 ( fin :mod blue )  :mod ( eel :mod sea )  )
recommend :medium ( urchin :mod sea )  :arg0 chef :arg1 ( fish :mod assortment )  :arg1 ( tail :mod yellow :arg1 shrimp :arg2 ( fin :mod blue )  :mod ( eel :mod sea )  )
recommend :medium ( urchin :mod sea )  :arg0 chef :arg1 ( fish :mod assortment )  :arg1 ( tail :mod yellow :arg1 shrimp :arg2 ( fin :mod blue )  :mod ( eel :mod sea )  )
recommend :medium ( urchin :mod sea )  :arg0 chef :arg1 ( fish :mod assortment )  :arg1 ( tail :mod yellow :arg1 shrimp :arg2 ( fin :mod blue )  :mod ( eel :mod sea )  )
re :domain they :mod also :arg1 ( friendlier :location here :arg1 own )  :mod especially
xconcept :x ( null_tag :null_edge ( comfortable :mod particular :arg1 you )  :arg0 you :null_edge ( seat :arg1 you :arg1 re :arg1 ( forget :arg0 you :arg1 ll :arg1 everything :null_edge ( except :arg1 plate )  )  )  )
xconcept :x ( null_tag :null_edge ( comfortable :mod particular :arg1 you )  :arg0 you :null_edge ( seat :arg1 you :arg1 re :arg1 ( forget :arg0 you :arg1 ll :arg1 everything :null_edge ( except :arg1 plate )  )  )  )
and :op1 ( live :arg0 i :location nyc )  :quant all :op1 ( see :arg0 i :time before :arg1 ( waterbug :quant ( many :degree so )  )  :arg2 ( place :quant 1 )  :arg2-of ( except :arg1 ( dream :arg1-of ( bad :degree really )  )  )  )
crew :arg0 ( and :op1 winnie :op2 ( person :arg2-of staff )  )  :mod ( good :degree most )  :arg0-of ( find :arg0 you :arg1-of possible :arg1 ( serve :arg1 you )  )
crew :arg0 ( and :op1 winnie :op2 ( person :arg2-of staff )  )  :mod ( good :degree most )  :arg0-of ( find :arg0 you :arg1-of possible :arg1 ( serve :arg1 you )  )
crew :arg0 ( and :op1 winnie :op2 ( person :arg2-of staff )  )  :mod ( good :degree most )  :arg0-of ( find :arg0 you :arg1-of possible :arg1 ( serve :arg1 you )  )
contrast :arg1 ( minimal :arg0 ambiance )  :arg1 ( phenomenal :domain food )  :arg2 ( good :domain ( dish :quant some )  :degree quite :arg2 ( parmesan :mod eggplant )  :domain ( veal :null_edge ( saltimbocca :mod carozza :mod chicken )  )  )
contrast :arg1 ( minimal :arg0 ambiance )  :arg1 ( phenomenal :domain food )  :arg2 ( good :domain ( dish :quant some )  :degree quite :arg2 ( parmesan :mod eggplant )  :domain ( veal :null_edge ( saltimbocca :mod carozza :mod chicken )  )  )
contrast :arg1 ( minimal :arg0 ambiance )  :arg1 ( phenomenal :domain food )  :arg2 ( good :domain ( dish :quant some )  :degree quite :arg2 ( parmesan :mod eggplant )  :domain ( veal :null_edge ( saltimbocca :mod carozza :mod chicken )  )  )
contrast :arg1 ( minimal :arg0 ambiance )  :arg1 ( phenomenal :domain food )  :arg2 ( good :domain ( dish :quant some )  :degree quite :arg2 ( parmesan :mod eggplant )  :domain ( veal :null_edge ( saltimbocca :mod carozza :mod chicken )  )  )
contrast :arg1 ( minimal :arg0 ambiance )  :arg1 ( phenomenal :domain food )  :arg2 ( good :domain ( dish :quant some )  :degree quite :arg2 ( parmesan :mod eggplant )  :domain ( veal :null_edge ( saltimbocca :mod carozza :mod chicken )  )  )
and :op1 ( ask :arg0 ( person :arg0-of host )  :arg1 ( appetizer :beneficiary group )  :arg1 ( order :arg0 waiter :mod only :arg0 we )  :arg2 contrast )  :op2 ( order :arg0 ( item :quant some :mod other )  )
and :op1 ( ask :arg0 ( person :arg0-of host )  :arg1 ( appetizer :beneficiary group )  :arg1 ( order :arg0 waiter :mod only :arg0 we )  :arg2 contrast )  :op2 ( order :arg0 ( item :quant some :mod other )  )
and :op1 ( ask :arg0 ( person :arg0-of host )  :arg1 ( appetizer :beneficiary group )  :arg1 ( order :arg0 waiter :mod only :arg0 we )  :arg2 contrast )  :op2 ( order :arg0 ( item :quant some :mod other )  )
possible :arg1 ( get :arg0 you :mod even :arg1 ( package :part-of chutney )  :arg1 ( stock :arg1 fridge )  )
and :op1 ( have :arg0 bar :arg1 ( selection :mod various )  )  :op2 ( catcher :arg1-of ( special :mod ( drink :arg3-of mix )  )  )
xconcept :x 2 :x 1
and :op1 ( have :arg0 bar :arg1 ( selection :mod various )  )  :op2 ( catcher :arg1-of ( special :mod ( drink :arg3-of mix )  )  )
xconcept :x 2 :x 1
or :op1 service :op2 ( ambience :concession ( t :arg1 food )  )
or :op1 service :op2 ( ambience :concession ( t :arg1 food )  )
or :op1 service :op2 ( ambience :concession ( t :arg1 food )  )
and :op1 ( change :duration ( temporal-quantity :unit month :quant 3 )  :arg0 ( and :op1 chef :op2 ( person :arg2-of staff )  )  :manner good )
and :op1 ( change :duration ( temporal-quantity :unit month :quant 3 )  :arg0 ( and :op1 chef :op2 ( person :arg2-of staff )  )  :manner good )
and :domain i :op1 ( dark :domain ambience :degree very )  :op2 original
money :quant ( worth :mod overall )
place :mod this :location-of ( thing :arg2-of price )
leave :arg0 we :time ( after :op1 ( drink :quant 1 )  )
pick :arg1 bagel :arg1 ( bagel :mod ( good :degree most )  :location city )
have :null_edge yes :null_edge you :null_edge ( wait :arg2 ( and :op1 ( seat :arg1-of ( cause :arg1 ( small :location there )  :arg0 ( area :polarity - :arg1-of wait )  :arg0 ( and :op2 ( take :arg1 ( seat :arg2 bar )  :mod all )  )  )  )  )  )
have :null_edge yes :null_edge you :null_edge ( wait :arg2 ( and :op1 ( seat :arg1-of ( cause :arg1 ( small :location there )  :arg0 ( area :polarity - :arg1-of wait )  :arg0 ( and :op2 ( take :arg1 ( seat :arg2 bar )  :mod all )  )  )  )  )  )
have :null_edge yes :null_edge you :null_edge ( wait :arg2 ( and :op1 ( seat :arg1-of ( cause :arg1 ( small :location there )  :arg0 ( area :polarity - :arg1-of wait )  :arg0 ( and :op2 ( take :arg1 ( seat :arg2 bar )  :mod all )  )  )  )  )  )
have :null_edge yes :null_edge you :null_edge ( wait :arg2 ( and :op1 ( seat :arg1-of ( cause :arg1 ( small :location there )  :arg0 ( area :polarity - :arg1-of wait )  :arg0 ( and :op2 ( take :arg1 ( seat :arg2 bar )  :mod all )  )  )  )  )  )
and :op1 ( spicy :mod ( last :quant 2 :arg1-of ( order :arg0 i :arg2 ( food :location here )  )  )  :null_edge ( possible :arg1 ( eat :manner bare )  )  :domain ( spice :source ( flavor :arg1 dish )  )  )
and :op1 ( spicy :mod ( last :quant 2 :arg1-of ( order :arg0 i :arg2 ( food :location here )  )  )  :null_edge ( possible :arg1 ( eat :manner bare )  )  :domain ( spice :source ( flavor :arg1 dish )  )  )
and :op1 ( spicy :mod ( last :quant 2 :arg1-of ( order :arg0 i :arg2 ( food :location here )  )  )  :null_edge ( possible :arg1 ( eat :manner bare )  )  :domain ( spice :source ( flavor :arg1 dish )  )  )
and :op1 ( spicy :mod ( last :quant 2 :arg1-of ( order :arg0 i :arg2 ( food :location here )  )  )  :null_edge ( possible :arg1 ( eat :manner bare )  )  :domain ( spice :source ( flavor :arg1 dish )  )  )
great :domain ( dumpling :mod fried )
have :arg0 ( place :mod this )  :arg1 ( rib :poss place :mod ( good :degree most )  :mod ( country :name ( name :op1 chinese )  )  :mod style :mod bbq :location city )
many :location here :degree so :arg1-of ( know :arg0 waiter :arg1 name )
figure-out :arg0 we :arg1 ( have :arg0 we :arg1 ( pizza :mod ( country :name ( name :op1 argentinian )  )  )  :time ( before :op1 ( and :op1 ( grab :arg0 we :arg1 lunch :location there :arg1 ( cheese-off :mod ( goat :quant one )  :domain ( cheese-off :mod other :mod blue )  )  )  :op2 ( share :arg0 we :arg1 ( pelligrino :mod large :mod ( pizza :arg1-of ( special :quant 2 )  )  )  )  :op2 ( excellent :arg1 share :domain both )  )  )  )
figure-out :arg0 we :arg1 ( have :arg0 we :arg1 ( pizza :mod ( country :name ( name :op1 argentinian )  )  )  :time ( before :op1 ( and :op1 ( grab :arg0 we :arg1 lunch :location there :arg1 ( cheese-off :mod ( goat :quant one )  :domain ( cheese-off :mod other :mod blue )  )  )  :op2 ( share :arg0 we :arg1 ( pelligrino :mod large :mod ( pizza :arg1-of ( special :quant 2 )  )  )  )  :op2 ( excellent :arg1 share :domain both )  )  )  )
figure-out :arg0 we :arg1 ( have :arg0 we :arg1 ( pizza :mod ( country :name ( name :op1 argentinian )  )  )  :time ( before :op1 ( and :op1 ( grab :arg0 we :arg1 lunch :location there :arg1 ( cheese-off :mod ( goat :quant one )  :domain ( cheese-off :mod other :mod blue )  )  )  :op2 ( share :arg0 we :arg1 ( pelligrino :mod large :mod ( pizza :arg1-of ( special :quant 2 )  )  )  )  :op2 ( excellent :arg1 share :domain both )  )  )  )
figure-out :arg0 we :arg1 ( have :arg0 we :arg1 ( pizza :mod ( country :name ( name :op1 argentinian )  )  )  :time ( before :op1 ( and :op1 ( grab :arg0 we :arg1 lunch :location there :arg1 ( cheese-off :mod ( goat :quant one )  :domain ( cheese-off :mod other :mod blue )  )  )  :op2 ( share :arg0 we :arg1 ( pelligrino :mod large :mod ( pizza :arg1-of ( special :quant 2 )  )  )  )  :op2 ( excellent :arg1 share :domain both )  )  )  )
figure-out :arg0 we :arg1 ( have :arg0 we :arg1 ( pizza :mod ( country :name ( name :op1 argentinian )  )  )  :time ( before :op1 ( and :op1 ( grab :arg0 we :arg1 lunch :location there :arg1 ( cheese-off :mod ( goat :quant one )  :domain ( cheese-off :mod other :mod blue )  )  )  :op2 ( share :arg0 we :arg1 ( pelligrino :mod large :mod ( pizza :arg1-of ( special :quant 2 )  )  )  )  :op2 ( excellent :arg1 share :domain both )  )  )  )
figure-out :arg0 we :arg1 ( have :arg0 we :arg1 ( pizza :mod ( country :name ( name :op1 argentinian )  )  )  :time ( before :op1 ( and :op1 ( grab :arg0 we :arg1 lunch :location there :arg1 ( cheese-off :mod ( goat :quant one )  :domain ( cheese-off :mod other :mod blue )  )  )  :op2 ( share :arg0 we :arg1 ( pelligrino :mod large :mod ( pizza :arg1-of ( special :quant 2 )  )  )  )  :op2 ( excellent :arg1 share :domain both )  )  )  )
and :op1 ( excellent :arg1 ( and :op1 kamasutra :op2 cosmopolitan )  )  :op2 ( tipsy :arg0 you :time ( time :polarity - )  )
spot :domain this :arg1-of perfect :arg1 date :beneficiary ( couple :mod williamsburg )
sum :mod dim :location here :mod only :degree so
contrast :arg1 ( and :li 6 )  :snt1 ( food :quant much :arg1-of tasty )  :arg1 ( and :quant all :op1 fresh :op2 ( refill :arg1 all :manner continue )  )
food :arg1-of ( straight :mod just )  :arg1-of cheap :mod good
ok :null_edge seating :null_edge ( s :mod even :frequency sometimes )
possible :arg1 ( call :mod ( even :null_edge ( wine :quant ( botle :mod ( inexpensive :degree relative )  )  )  )  :arg0 you )
inexpensive :li 00 :arg1 cost :time ( through :op1 roof )  :prep-for ( fare :mod good :arg1-of average )
contrast :arg2 service :arg1 slow :arg2 ( friendly :arg1 service )
contrast :arg2 service :arg1 slow :arg2 ( friendly :arg1 service )
and :op1 ( fatty :arg0 steak :degree very )  :op2 ( and :op1 sauce :op1 ( overpower :null_edge ( tasty :arg1 sauce :degree very )  )  )
and :op1 ( fatty :arg0 steak :degree very )  :op2 ( and :op1 sauce :op1 ( overpower :null_edge ( tasty :arg1 sauce :degree very )  )  )
and :op1 ( make :arg0 ( person :arg2-of staff )  :arg1 ( feel :arg0 you :location home )  :arg0 atmosphere )  :op2 ( great :domain food )
and :op1 ( make :arg0 ( person :arg2-of staff )  :arg1 ( feel :arg0 you :location home )  :arg0 atmosphere )  :op2 ( great :domain food )
and :op1 ( make :arg0 ( person :arg2-of staff )  :arg1 ( feel :arg0 you :location home )  :arg0 atmosphere )  :op2 ( great :domain food )
multi-sentence :arg1 ( alright :domain food :arg1 ( some :arg1-of ( resemble :arg2 ( dish :mod steak :arg0-of ( tend :arg1 dry )  )  )  )  )  :snt2 ( good :domain ( stuff :mod some )  )
have :arg0 they :arg1 ( menu :mod ( diverse :degree ( very :prep-on ( something :mod everybody )  )  )  )
busy :domain ( person :arg2-of staff )  :degree too :null_edge ( and :op1 ( order :arg1 sushi :arg1 dinner )  :op2 ( lay :time then :purpose ( eat :arg1 bar :arg1 ( bring :arg0 bar :mod even :arg1 check )  )  )  )
busy :domain ( person :arg2-of staff )  :degree too :null_edge ( and :op1 ( order :arg1 sushi :arg1 dinner )  :op2 ( lay :time then :purpose ( eat :arg1 bar :arg1 ( bring :arg0 bar :mod even :arg1 check )  )  )  )
busy :domain ( person :arg2-of staff )  :degree too :null_edge ( and :op1 ( order :arg1 sushi :arg1 dinner )  :op2 ( lay :time then :purpose ( eat :arg1 bar :arg1 ( bring :arg0 bar :mod even :arg1 check )  )  )  )
busy :domain ( person :arg2-of staff )  :degree too :null_edge ( and :op1 ( order :arg1 sushi :arg1 dinner )  :op2 ( lay :time then :purpose ( eat :arg1 bar :arg1 ( bring :arg0 bar :mod even :arg1 check )  )  )  )
busy :domain ( person :arg2-of staff )  :degree too :null_edge ( and :op1 ( order :arg1 sushi :arg1 dinner )  :op2 ( lay :time then :purpose ( eat :arg1 bar :arg1 ( bring :arg0 bar :mod even :arg1 check )  )  )  )
figure-out :prep-as ( patron :arg1-of long :mod time )  :time always :arg1 ( find :arg1 ( spot :mod ( good :degree most )  :time late :time night :consist-of food )  :location city )
huge :domain bagel
get :arg1 ( tuna :part-of garus )
and :domain i :op1 somosa :op2 chaus :op2 chole :op3 ( dissapointing :arg2 ( and :op1 dhosa :op2 dhal )  :mod kinda )
and :domain i :op1 somosa :op2 chaus :op2 chole :op3 ( dissapointing :arg2 ( and :op1 dhosa :op2 dhal )  :mod kinda )
and :domain i :op1 somosa :op2 chaus :op2 chole :op3 ( dissapointing :arg2 ( and :op1 dhosa :op2 dhal )  :mod kinda )
and :domain i :op1 somosa :op2 chaus :op2 chole :op3 ( dissapointing :arg2 ( and :op1 dhosa :op2 dhal )  :mod kinda )
and :domain i :op1 somosa :op2 chaus :op2 chole :op3 ( dissapointing :arg2 ( and :op1 dhosa :op2 dhal )  :mod kinda )
edible :mod really :compared-to ( thing :arg2-of price :location area )
contrast :arg2 ( and :op1 ( nice :arg1 ( person :arg2-of staff )  )  :op2 ( seem :arg1 ( stress :mod really )  )  :op2 ( need :arg0 ( bathroom :mod unisex )  :arg1 ( clean :arg1 bathroom :frequency ( often :degree more )  )  )  )
thing :domain service :mod only :mod ( good :arg2 ( restaurant :mod this )  )
service :arg1 ( and :op1 friendly :op2 attentive )
and :op1 ( food :mod great :null_edge ( decor :mod great )  )  :arg1 ( service :mod great )
and :op1 ( food :mod great :null_edge ( decor :mod great )  )  :arg1 ( service :mod great )
and :op1 ( food :mod great :null_edge ( decor :mod great )  )  :arg1 ( service :mod great )
and :op1 ( leave :arg1 ( and :op1 ( open :arg1 ( table :mod atlhough )  :location next-to )  :op2 ( ask :arg0 we :arg1 ( space :mod ( large :degree ( more :degree slight )  )  )  )  )  :arg0 they :mod awkardly :arg1 seat )
and :op1 ( leave :arg1 ( and :op1 ( open :arg1 ( table :mod atlhough )  :location next-to )  :op2 ( ask :arg0 we :arg1 ( space :mod ( large :degree ( more :degree slight )  )  )  )  )  :arg0 they :mod awkardly :arg1 seat )
and :op1 ( standard :domain ( paneer :mod palak )  )  :op2 ( fan :arg1 ( kofta :mod malaus )  )
and :op1 ( standard :domain ( paneer :mod palak )  )  :op2 ( fan :arg1 ( kofta :mod malaus )  )
dine :arg0 i :location ( restaurant :null_edge alain )  :arg2 ( thing :arg2-of price :arg1 half :arg1 ( experience :arg1-of same :arg1-of excellent :mod dine )  )
dine :arg0 i :location ( restaurant :null_edge alain )  :arg2 ( thing :arg2-of price :arg1 half :arg1 ( experience :arg1-of same :arg1-of excellent :mod dine )  )
possible :arg1 ( slow :mod yeah :frequency sometimes :arg1 service )
ambiance :polarity -
have :arg1 ( and :op1 ( save :arg1 money )  :op2 ( waste :poss don :arg1 calorie :purpose ( go :arg1 ( street :mod washington )  :arg1-of instead-of )  )  )  :arg0 they :arg1 ( and :op1 ( food :mod amazing )  :op2 ( service :mod ( good :degree most )  )  )
have :arg1 ( and :op1 ( save :arg1 money )  :op2 ( waste :poss don :arg1 calorie :purpose ( go :arg1 ( street :mod washington )  :arg1-of instead-of )  )  )  :arg0 they :arg1 ( and :op1 ( food :mod amazing )  :op2 ( service :mod ( good :degree most )  )  )
and :op1 ( attentive :arg0 service :manner overbear )  :op2 ( wonderful :domain ( dish :mod each :arg0-of ( try :arg0 we )  )  :arg2 ( roll :mod spring :mod ( product :name ( name :op1 cod )  )  )  :prep-with ( tempura :mod pineapple )  )
and :op1 ( attentive :arg0 service :manner overbear )  :op2 ( wonderful :domain ( dish :mod each :arg0-of ( try :arg0 we )  )  :arg2 ( roll :mod spring :mod ( product :name ( name :op1 cod )  )  )  :prep-with ( tempura :mod pineapple )  )
and :op1 ( attentive :arg0 service :manner overbear )  :op2 ( wonderful :domain ( dish :mod each :arg0-of ( try :arg0 we )  )  :arg2 ( roll :mod spring :mod ( product :name ( name :op1 cod )  )  )  :prep-with ( tempura :mod pineapple )  )
and :op1 ( attentive :arg0 service :manner overbear )  :op2 ( wonderful :domain ( dish :mod each :arg0-of ( try :arg0 we )  )  :arg2 ( roll :mod spring :mod ( product :name ( name :op1 cod )  )  )  :prep-with ( tempura :mod pineapple )  )
multiply :arg1 ( thing :mod ( weird :mod only )  )  :time ( get :arg0 we :arg1 bottle )  :arg0 waitress :mod simple :arg1 ( price :arg1 glass :arg1 x4 )  :arg2 ( sense :polarity - :degree whatsoever )
multiply :arg1 ( thing :mod ( weird :mod only )  )  :time ( get :arg0 we :arg1 bottle )  :arg0 waitress :mod simple :arg1 ( price :arg1 glass :arg1 x4 )  :arg2 ( sense :polarity - :degree whatsoever )
multiply :arg1 ( thing :mod ( weird :mod only )  )  :time ( get :arg0 we :arg1 bottle )  :arg0 waitress :mod simple :arg1 ( price :arg1 glass :arg1 x4 )  :arg2 ( sense :polarity - :degree whatsoever )
sell :arg0 they :arg1 ( sushi :arg1-of special )  :null_edge ( have :null_edge everything :arg1 ( and :op1 top :op2 sauce )  )
sell :arg0 they :arg1 ( sushi :arg1-of special )  :null_edge ( have :null_edge everything :arg1 ( and :op1 top :op2 sauce )  )
sell :arg0 they :arg1 ( sushi :arg1-of special )  :null_edge ( have :null_edge everything :arg1 ( and :op1 top :op2 sauce )  )
try :arg1-of ( possible :arg1 ( re :arg0 you :arg1 ( hang :arg0 you :mod just :location there :manner ( state :name ( resemble :arg0 ( rest :part-of ( hipster :arg1-of ( sense :mod apparent :polarity - :arg1 taste )  )  )  )  )  )  )  )
and :op2 ( and :op2 intimate :op2 ( contrast :arg1 ( small :domain place )  :arg2 ( possible :arg1 ( feel :arg0 you :arg1 ( crowd :degree little )  )  )  :arg2 ( excellent :arg1 service )  :arg2 and :arg2 ( great :condition ( or :op1 out :op2 ( date :mod romantic )  :op2 ( occassion :arg1-of special )  )  )  )  )
and :op2 ( and :op2 intimate :op2 ( contrast :arg1 ( small :domain place )  :arg2 ( possible :arg1 ( feel :arg0 you :arg1 ( crowd :degree little )  )  )  :arg2 ( excellent :arg1 service )  :arg2 and :arg2 ( great :condition ( or :op1 out :op2 ( date :mod romantic )  :op2 ( occassion :arg1-of special )  )  )  )  )
and :op1 ( excellent :arg1 service )  :op2 ( delicious :domain service :domain food )
and :op1 ( excellent :arg1 service )  :op2 ( delicious :domain service :domain food )
good :domain service :mod also :degree very
and :op1 ( take :arg0 i :location there :arg1 birthday :time ( night :mod last )  :arg1 ( meal :arg0 we :mod relaxing :mod ( good :mod really )  )  :arg1 ( person :arg0-of ( have-rel-role :arg2 girlfriend )  )  )
contrast :arg1 ( disappoint :arg1 i :degree so :arg2 portion :condition ( good :domain quality :mod enough :arg2 ( make :arg0 quality )  )  )
contrast :arg1 ( disappoint :arg1 i :degree so :arg2 portion :condition ( good :domain quality :mod enough :arg2 ( make :arg0 quality )  )  )
xconcept :x ( null_tag :arg0 i :null_edge ( have :arg0 i :arg0 m :arg1 nosh :location neighborhood )  :null_edge ( and :op2 ( comforting :arg1 i :domain food :degree very )  )  )
strict :domain ( atmosphere :mod good )  :domain ( combine :arg1 ( code :mod all :arg1-of ( hot :degree most )  :mod music :mod dress )  )  :degree relative :arg2-of ( except :arg1 ( broadcast-program :name ( name :op1 fridays )  )  )
strict :domain ( atmosphere :mod good )  :domain ( combine :arg1 ( code :mod all :arg1-of ( hot :degree most )  :mod dress )  )  :degree relative :arg2-of ( except :arg1 ( broadcast-program :name ( name :op1 fridays )  )  )
strict :domain ( atmosphere :mod good )  :domain ( combine :null_edge ( music :null_edge ( all :null_edge code/n )  :mod ( hot :degree most )  :null_edge dress/n )  )  :degree relative :arg2-of ( except :arg1 ( broadcast-program :name ( name :op1 fridays )  )  )
love :arg1 food
recommend :arg0 i :degree high :arg1 ( s :null_edge nina )  :arg2 ( anyone :arg0-of ( want :arg1 ( warm :arg1 ( dinner :mod romantic )  :mod heart :arg1-of ( surround :arg1-of ( fill :arg2 ( and :op1 candle :op2 ( picture :arg1 family )  )  )  )  )  )  )
recommend :arg0 i :degree high :arg1 ( s :null_edge nina )  :arg2 ( anyone :arg0-of ( want :arg1 ( warm :arg1 ( dinner :mod romantic )  :mod heart :arg1-of ( surround :arg1-of ( fill :arg2 ( and :op1 candle :op2 ( picture :arg1 family )  )  )  )  )  )  )
recommend :arg0 i :degree high :arg1 ( s :null_edge nina )  :arg2 ( anyone :arg0-of ( want :arg1 ( warm :arg1 ( dinner :mod romantic )  :mod heart :arg1-of ( surround :arg1-of ( fill :arg2 ( and :op1 candle :op2 ( picture :arg1 family )  )  )  )  )  )  )
recommend :arg0 i :degree high :arg1 ( s :null_edge nina )  :arg2 ( anyone :arg0-of ( want :arg1 ( warm :arg1 ( dinner :mod romantic )  :mod heart :arg1-of ( surround :arg1-of ( fill :arg2 ( and :op1 candle :op2 ( picture :arg1 family )  )  )  )  )  )  )
try :arg1 ( dessert :quant all )  :arg0 group :arg1 ( get :arg1 ( review :mod favorable )  )
s :arg1 ( something :arg1-of ( smooth :topic ( side :arg0-of sip :mod sake :mod upper :mod east :mod style )  )  )
place :domain it :arg1-of nice :arg1 ( and :op1 ( relax :arg1 converse )  )
sandwich :mod ( good :degree most )  :arg1-of reuben :time ever
place :domain ( person :name ( name :op1 strike )  :mod luck )  :mod great :mod casual :location-of ( grab :mod just :arg1 ( bite :arg1-of eat )  )
strawberry :arg1-of wonderful :mod ( daiquiry :mod well )
assume :arg2 volare :arg1 ( go :arg4 ( house :poss ( person :arg0-of ( have-rel-role :arg2 aunt :mod favor )  )  )  :arg4 dinner )  :arg1 ( person :arg0-of cook :mod great :mod ( country :name ( name :op1 italian )  )  :arg0 ( person :arg0-of ( have-rel-role :arg2 aunt )  )  )
sushi :arg1-of ( average :arg1 ( service :mod ( wait :arg2 ( below :op1 average )  :time always )  )  )  :domain ( atmosphere :arg1-of ( nice :arg2 ( irritating :mod really :compared-to ( horrid :time ( sit :arg2 area :arg2 ( beyond :op1 kitchen )  :arg1 acousitc )  :arg1 acousitc :compared-to ( loud :domain ( echo :arg1 everything )  :degree extreme )  )  )  )  )
sushi :arg1-of ( average :arg1 ( service :mod ( wait :arg2 ( below :op1 average )  :time always )  )  )  :domain ( atmosphere :arg1-of ( nice :arg2 ( irritating :mod really :compared-to ( horrid :time ( sit :arg2 area :arg2 ( beyond :op1 kitchen )  :arg1 acousitc )  :arg1 acousitc :compared-to ( loud :domain ( echo :arg1 everything )  :degree extreme )  )  )  )  )
sushi :arg1-of ( average :arg1 ( service :mod ( wait :arg2 ( below :op1 average )  :time always )  )  )  :domain ( atmosphere :arg1-of ( nice :arg2 ( irritating :mod really :compared-to ( horrid :time ( sit :arg2 area :arg2 ( beyond :op1 kitchen )  :arg1 acousitc )  :arg1 acousitc :compared-to ( loud :domain ( echo :arg1 everything )  :degree extreme )  )  )  )  )
delicious :domain frite :arg1-of ( cause :degree ( bit :location ( side :arg1-of thick )  )  )
get :location here :arg0 you :arg1 feel :manner ( feel :arg1 rigid )
recommend :arg0 i :arg1 ( and :op2 name :op1 down :op2 ( get :arg1 drink :arg1-of ( cause :arg0 ( time :duration-of ( wait :arg2 ( bar :arg1-of local )  )  )  )  )  )
recommend :arg0 i :arg1 ( and :op2 name :op1 down :op2 ( get :arg1 drink :arg1-of ( cause :arg0 ( time :duration-of ( wait :arg2 ( bar :arg1-of local )  )  )  )  )  )
recommend :arg0 i :arg1 ( and :op2 name :op1 down :op2 ( get :arg1 drink :arg1-of ( cause :arg0 ( time :duration-of ( wait :arg2 ( bar :arg1-of local )  )  )  )  )  )
fall :arg1 i :arg1 ( love :arg0 i )  :arg2 ( noodle :mod egg :accompanier ( and :op1 ( broth :mod beef )  :op1 ( dumpling :mod shrimp )  :op2 ( pork :quant slice :mod bbq :mod roast )  )  )
keep :arg0 i :arg1 ( cross :arg1 finger :arg1 ( ride :arg1 ( subway :mod whole )  )  :arg1 ( hope :arg1 ( table :consist-of ( obligate :arg1 possible :arg2 ( share :arg1 ( soup :mod congee )  )  )  )  )  )
keep :arg0 i :arg1 ( cross :arg1 finger :arg1 ( ride :arg1 ( subway :mod whole )  )  :arg1 ( hope :arg1 ( table :consist-of ( obligate :arg1 possible :arg2 ( share :arg1 ( soup :mod congee )  )  )  )  )  )
bagel :mod overall :mod ( good :degree most )  :location town
remind :arg1 light :arg1 ( roll :mod refreshing :mod fry :time ( date-entity :season summer )  )  :arg1 ( place :mod ( country :name ( name :op1 vietnamese )  )  :null_edge pari )
and :op1 ( seem :arg1 ( fresh :domain sushi :degree pretty :null_edge ( proportion :manner adequate )  )  )
contrast :arg1 ( slow :domain service :mod bit )
great :domain ( and :op1 spread :op2 topping :op3 ( pricey :degree bit )  )
great :domain ( and :op1 spread :op2 topping :op3 ( pricey :degree bit )  )
know :time ( see :arg1 ( link :arg1 website :arg2 ciro :location napolus )  )  :arg1 ( pizza :mod good )
ask :polarity - :arg1 ( wrong :time ( leave :arg0 we :arg1 ( touch :arg1 plate )  )  )
and :op1 ( cozy :domain indoor :degree very )  :op2 cute
and :domain we :op1 ( brunch :duration ( temporal-quantity :unit hour :quant 3 )  :arg0-of ( rush :mod definite :arg1 you )  )  :op2 ( keep :name ( name :op1 flowing :arg1 mimosa :arg1 ( time :mod whole )  )  )
and :domain we :op1 ( brunch :duration ( temporal-quantity :unit hour :quant 3 )  :arg0-of ( rush :mod definite :arg1 you )  )  :op2 ( keep :name ( name :op1 flowing :arg1 mimosa :arg1 ( time :mod whole )  )  )
and :op2 ( price :arg1-of ( think :arg1-of ( high :degree very )  :mod actual :arg1 ( possible :arg1 ( get :arg0 they :arg2 away :manner ( charge :arg0 they :arg1 ( price :mod such )  :arg2 ( and :op1 ( food :mod ( terrible :mod such )  )  :op2 service )  )  )  )  )  )
and :op2 ( price :arg1-of ( think :arg1-of ( high :degree very )  :mod actual :arg1 ( possible :arg1 ( get :arg0 they :arg2 away :manner ( charge :arg0 they :arg1 ( price :mod such )  :arg2 ( and :op1 ( food :mod ( terrible :mod such )  )  :op2 service )  )  )  )  )  )
and :op2 ( price :arg1-of ( think :arg1-of ( high :degree very )  :mod actual :arg1 ( possible :arg1 ( get :arg0 they :arg2 away :manner ( charge :arg0 they :arg1 ( price :mod such )  :arg2 ( and :op1 ( food :mod ( terrible :mod such )  )  :op2 service )  )  )  )  )  )
and :op2 ( price :arg1-of ( think :arg1-of ( high :degree very )  :mod actual :arg1 ( possible :arg1 ( get :arg0 they :arg2 away :manner ( charge :arg0 they :arg1 ( price :mod such )  :arg2 ( and :op1 ( food :mod ( terrible :mod such )  )  :op2 service )  )  )  )  )  )
contrast :arg2 ( excellent :arg1 service )  :arg2 ( excellent :arg1 food )  :arg2 ( cool :arg1 ( experience :degree entire )  :degree very )
contrast :arg2 ( excellent :arg1 service )  :arg2 ( excellent :arg1 food )  :arg2 ( cool :arg1 ( experience :degree entire )  :degree very )
and :op1 ( good :domain service )  :op2 ( clean :arg1 resturant )
spot :mod great :arg1 ( look :arg1 ( couple :poss ( or :op1 ( thing :arg1-of drink )  :op2 ( dinner :arg1-of quiet )  )  )  )
spot :mod great :arg1 ( look :arg1 ( couple :poss ( or :op1 ( thing :arg1-of drink )  :op2 ( dinner :arg1-of quiet )  )  )  )
spot :mod great :arg1 ( look :arg1 ( couple :poss ( or :op1 ( thing :arg1-of drink )  :op2 ( dinner :arg1-of quiet )  )  )  )
stick :mod just :arg2 ( dish :mod small )
contrast :arg1 ( nice :domain cafe :degree really )  :arg2 ( and :op1 ( chair :null_edge comfortable :mod outdoor )  :op2 ( table :arg1-of comfortable :mod outdoor )  )  :arg2 ( possible :arg1 ( good :arg1 service )  )
contrast :arg1 ( nice :domain cafe :degree really )  :arg2 ( and :op1 ( chair :null_edge comfortable :mod outdoor )  :op2 ( table :arg1-of comfortable :mod outdoor )  )  :arg2 ( possible :arg1 ( good :arg1 service )  )
contrast :arg1 ( nice :domain cafe :degree really )  :arg2 ( and :op1 ( chair :null_edge comfortable :mod outdoor )  :op2 ( table :arg1-of comfortable :mod outdoor )  )  :arg2 ( possible :arg1 ( good :arg1 service )  )
contrast :arg1 ( nice :domain cafe :degree really )  :arg2 ( and :op1 ( chair :null_edge comfortable :mod outdoor )  :op2 ( table :arg1-of comfortable :mod outdoor )  )  :arg2 ( possible :arg1 ( good :arg1 service )  )
have :arg0 i :arg1-of rare :arg1 ( problem :topic ( person :arg2-of staff :arg1-of slow )  )  :duration ( temporal-quantity :unit year :quant 10 )
excellent :arg1 food
great :condition ( look :arg0 we :arg1 ( and :op1 ( lettuce :arg1-of regular )  :op2 ( walnut :quant some )  )  )  :domain ( salad :arg1-of ( get :arg0 we )  )
great :condition ( look :arg0 we :arg1 ( and :op1 ( lettuce :arg1-of regular )  :op2 ( walnut :quant some )  )  )  :domain ( salad :arg1-of ( get :arg0 we )  )
great :condition ( look :arg0 we :arg1 ( and :op1 ( lettuce :arg1-of regular )  :op2 ( walnut :quant some )  )  )  :domain ( salad :arg1-of ( get :arg0 we )  )
buffet :arg0 ( lunch :arg1-of excellent )  :mod ( only :null_edge 6 )
xconcept :x 95
possible :time ( and :op1 ( encounter :arg0 you :arg1 ( problem :arg0-of ( order :location here )  )  :null_edge ( accept :arg1 ( card :mod credit )  )  )  :op2 ( sure :arg1 ( bring :arg1 ( cash :quant plenty )  :arg2 you :time don )  )  )
and :mod both :op1 ( price :degree very :manner reasonable :arg1 ( around :op1 dinner :op1 ( lunch :null_edge 5 )  )  :arg1 ( and :op1 delicious :op2 fill-in )  )
and :mod both :op1 ( price :degree very :manner reasonable :arg1 ( around :op1 dinner :op1 ( lunch :null_edge 5 )  )  :arg1 ( and :op1 delicious :op2 fill-in )  )
and :mod both :op1 ( price :degree very :manner reasonable :arg1 ( around :op1 dinner :op1 ( lunch :null_edge 5 )  )  :arg1 ( and :op1 delicious :op2 fill-in )  )
and :op1 cute :op2 ( person :name ( name :op1 quaint )  )  :op1 ( good :domain ambience :degree so :arg2 business :arg2 ( vacation :arg0 we )  )
and :op1 ( huge :domain ( size :mod portion :location here )  )  :op2 ( good :domain sushi )
and :op1 ( huge :domain ( size :mod portion :location here )  )  :op2 ( good :domain sushi )
and :op1 ( eat :arg1 tuna :arg0 ( person :arg0-of ( have-rel-role :arg2 boyfriend )  )  )  :op2 ( cook :arg1-of perfect )
contrast :arg1 ( t :domain ( wasn :mod this )  :arg1 ( menu :arg1-of expect :arg1-of ( comprise :arg2 ( and :op1 ( thaus :mod only )  :op2 ( soup :mod ( yum :mod tom )  )  )  )  )  )  :arg2 ( think :arg0 wasn :arg1 ( make :arg1 ( special :domain place :degree so )  )  )
contrast :arg1 ( t :domain ( wasn :mod this )  :arg1 ( menu :arg1-of expect :arg1-of ( comprise :arg2 ( and :op1 ( thaus :mod only )  :op2 ( soup :mod ( yum :mod tom )  )  )  )  )  )  :arg2 ( think :arg0 wasn :arg1 ( make :arg1 ( special :domain place :degree so )  )  )
contrast :arg1 ( t :domain ( wasn :mod this )  :arg1 ( menu :arg1-of expect :arg1-of ( comprise :arg2 ( and :op1 ( thaus :mod only )  :op2 ( soup :mod ( yum :mod tom )  )  )  )  )  )  :arg2 ( think :arg0 wasn :arg1 ( make :arg1 ( special :domain place :degree so )  )  )
food :mod good :location ( restaurant :arg1-of ( want :arg1 ( contrast :arg2 ( expensive :degree bit )  :arg2 great )  :arg0 you :arg1 ( impress :arg0 you :arg1 date )  )  )
recommend :arg0 i :degree high :arg1 ( russe :mod caviar )  :arg1 ( anyone :arg0-of ( want :arg1 ( and :op1 ( caviar :mod delicious :mod top :mod grade )  :op2 ( service :arg1-of fantastic )  )  )  )
recommend :arg0 i :degree high :arg1 ( russe :mod caviar )  :arg1 ( anyone :arg0-of ( want :arg1 ( and :op1 ( caviar :mod delicious :mod top :mod grade )  :op2 ( service :arg1-of fantastic )  )  )  )
and :op1 ( eat :arg0 i :null_edge 3 :null_edge 4 )  :op2 ( good :domain food :time always )
and :snt1 ( thrill :arg1 ( contrast :arg1 ( t :domain i :domain wasn )  :arg2 ( guess :arg0 i :arg0 wasn :arg0 i :arg1 ( price :arg1-of ( pay :arg3 ( place :mod popular )  )  )  )  )  )  :arg2 ( wait :arg2 line :duration ( temporal-quantity :unit minute )  )
eat :mod great :mod good
spicing :arg0 ( fish :mod grilled :mod whole )  :arg1-of wonderful :mod great
contrast :arg1 ( think :arg0 i :arg1 ( good :degree most :domain ( cuisine :mod tuscan )  )  :arg1 ( multiple :op1 ( temporal-quantity :unit year )  )  )  :arg2 ( convert :arg2 ( fare :arg1-of hearty :mod neapolitan :arg2 visit )  )
send :time ( hold :arg1 entree :location kitchen :time ( night :mod busy :mod ( event :name ( name :op1 saturday )  )  )  )  :arg0 ( person :arg0-of own )  :arg1 ( roll :mod complimentary :time ( date-entity :season summer )  )  :arg1 ( hold :mod over )
send :time ( hold :arg1 entree :location kitchen :time ( night :mod busy :mod ( event :name ( name :op1 saturday )  )  )  )  :arg0 ( person :arg0-of own )  :arg1 ( roll :mod complimentary :time ( date-entity :season summer )  )  :arg1 ( hold :mod over )
send :time ( hold :arg1 entree :location kitchen :time ( night :mod busy :mod ( event :name ( name :op1 saturday )  )  )  )  :arg0 ( person :arg0-of own )  :arg1 ( roll :mod complimentary :time ( date-entity :season summer )  )  :arg1 ( hold :mod over )
great :domain service :degree well
try :arg1 ( and :op2 lobster :op2 ( roll :arg1-of rise :arg1-of special )  )
try :arg1 ( and :op2 lobster :op2 ( roll :arg1-of rise :arg1-of special )  )
plus :mod another :null_edge ( approximately :arg1 ( entree :quant most )  )
and :op1 ( delicious :domain food )  :op1 ( relax :arg1 atmosphere )  :op2 ( adopt :arg0 we :time now :arg1 ( plate :quant 347 )  :manner secret )
and :op1 ( delicious :domain food )  :op1 ( relax :arg1 atmosphere )  :op2 ( adopt :arg0 we :time now :arg1 ( plate :quant 347 )  :manner secret )
walk :destination moment :arg0 we :degree ( more :compared-to accommodate :compared-to ( pack :mod even )  )
find :arg0 i :arg1 ( and :op1 ( food :mod exceptional )  :op2 service :op2 value )
find :arg0 i :arg1 ( and :op1 ( food :mod exceptional )  :op2 service :op2 value )
find :arg0 i :arg1 ( and :op1 ( food :mod exceptional )  :op2 service :op2 value )
eat :arg0 we :location ( place :mod this :mod thai )  :arg1-of ( follow :arg2 review )  :null_edge ( happy :polarity - :degree very :arg1 food )
contrast :arg2 ( good :domain food :mod definite )  :arg2 ( leave :arg0 i :arg1 ( disappoint :degree bit )  )
and :op1 ( girl :domain i :null_edge 100 :arg0-of ( have :arg1 ( and :op1 ( wine :mod ( beer :quant glass :quant glass )  )  )  :time ( prior :op1 dinner )  )  )  :op2 ( hunger :arg0 i :mod still :time ( after :op1 ( visit :arg1 ( place :mod this )  )  )  )
and :op1 ( girl :domain i :null_edge 100 :arg0-of ( have :arg1 ( and :op1 ( wine :mod ( beer :quant glass :quant glass )  )  )  :time ( prior :op1 dinner )  )  )  :op2 ( hunger :arg0 i :mod still :time ( after :op1 ( visit :arg1 ( place :mod this )  )  )  )
and :op1 ( girl :domain i :null_edge 100 :arg0-of ( have :arg1 ( and :op1 ( wine :mod ( beer :quant glass :quant glass )  )  )  :time ( prior :op1 dinner )  )  )  :op2 ( hunger :arg0 i :mod still :time ( after :op1 ( visit :arg1 ( place :mod this )  )  )  )
contrast :arg1 ( grace :domain drink :arg0-of save )  :arg2 ( get :arg0 drink :arg1 ( service :arg2-of ( person :arg2-of staff )  )  :arg2 over )
contrast :arg1 ( grace :domain drink :arg0-of save )  :arg2 ( get :arg0 drink :arg1 ( service :arg2-of ( person :arg2-of staff )  )  :arg2 over )
downside :time ( re :domain you :domain ( order :arg0 you )  )  :arg0-of ( have :arg0 ( guy :mod deliver )  :arg1 ( attitude :arg1-of major )  )
warm :arg1 ( person :arg2-of staff :null_edge all :arg0-of start )  :concession-of ( engage :arg1 person )
reasonable :domain price :degree exceptionally :arg2 ( food :poss ( caliber :mod this )  )
reasonable :domain price :degree exceptionally :arg2 ( food :poss ( caliber :mod this )  )
recommend :arg1 focus :arg1 ( margarita :time ( go :arg0 you :arg4 here )  :mod tamarind )
superb :domain ( mignon :mod filet :mod dish )
and :arg1-of ( regular :domain i )  :op1 ( food :mod ( good :manner consistent )  :mod get )  :op2 ease
and :arg1-of ( regular :domain i )  :op1 ( food :mod ( good :manner consistent )  :mod get )  :op2 ease
country :name ( name :op1 japanese )  :domain ( place :mod this )  :degree most :domain ( get :arg1-of possible :time ever )
good :domain food :arg1 ( possible :arg1 ( thing :arg1-of lie )  )
possible :arg1 ( eat :arg0 ( food :mod great )  :arg1 ( more-than :op1 then )  :arg0 ( person :quant 1 )  )
contrast :arg1 ( expect :arg0 i :arg1 ( like :arg1 nosh :arg1 ( do :arg0 i )  )  :arg0 ( person :arg1 ( sandwich :mod challah )  :snt1 soup :arg0-of ( have-rel-role :arg2 mom )  )  )  :arg2 ( and :op2 ( give :arg0 knish :arg1 ( run :arg1 money )  )  )
contrast :arg1 ( expect :arg0 i :arg1 ( like :arg1 nosh :arg1 ( do :arg0 i )  )  :arg0 ( person :arg1 ( sandwich :mod challah )  :snt1 soup :arg0-of ( have-rel-role :arg2 mom )  )  )  :arg2 ( and :op2 ( give :arg0 knish :arg1 ( run :arg1 money )  )  )
contrast :arg1 ( expect :arg0 i :arg1 ( like :arg1 nosh :arg1 ( do :arg0 i )  )  :arg0 ( person :arg1 ( sandwich :mod challah )  :snt1 soup :arg0-of ( have-rel-role :arg2 mom )  )  )  :arg2 ( and :op2 ( give :arg0 knish :arg1 ( run :arg1 money )  )  )
atmosphere :arg1-of special
atomosphere :mod cozy :mod romantic :accompanier ( table :quant ( around :mod only :op1 15 )  :quant most )
atomosphere :mod cozy :mod romantic :accompanier ( table :quant ( around :mod only :op1 15 )  :quant most )
worth :domain ( place :mod this )  :null_edge ( only :mod ( even :beneficiary beer )  )
and :domain i :null_edge really :op1 scallop :op2 ( mahus :null_edge ( yum :mod saffron )  )
xconcept
and :domain i :null_edge really :op1 scallop :op2 ( mahus :null_edge ( yum :mod saffron )  )
xconcept
and :op1 ( fun :domain ambience :degree so )  :op2 ( great :domain price :degree ( top :null_edge ( tasty :domain food :mod really )  )  )
and :op1 ( fun :domain ambience :degree so )  :op2 ( great :domain price :degree ( top :null_edge ( tasty :domain food :mod really )  )  )
and :op1 ( fun :domain ambience :degree so )  :op2 ( great :domain price :degree ( top :null_edge ( tasty :domain food :mod really )  )  )
get :arg1 ( go :arg1 go :arg1 hamburger :concession ( matter :polarity - :arg1 ( say :arg0 review )  )  )
world :domain sandwhich :domain out :mod this
place :location-of ( live :arg0 you :location ( manhattan :mod upper )  )  :domain ( square :mod siam )  :location-of ( food :mod thium )
charm :domain decor
prepare :arg1 food :degree very
and :op1 ( roll :mod ( tasty :degree really )  :time ( date-entity :season spring )  )  :op2 ( noodle :arg2 ( thing :arg2-of price :manner good )  )
and :op1 ( roll :mod ( tasty :degree really )  :time ( date-entity :season spring )  )  :op2 ( noodle :arg2 ( thing :arg2-of price :manner good )  )
and :op1 ( roll :mod ( tasty :degree really )  :time ( date-entity :season spring )  )  :op2 ( noodle :arg2 ( thing :arg2-of price :manner good )  )
contrast :arg1 good :arg1 ( food :arg1-of ( cause :mod hey )  :quant more :arg1-of cause :arg1-of ( suppose :arg2 bad :arg1 ( sum :mod dim )  :arg2 ( possible :arg1 small :arg1 ( try :arg1 ( dish :quant more )  :arg1 ( small :compared-to ( cheap :arg1 ( dish :mod each )  )  )  )  :arg1 and )  )  )
contrast :arg1 good :arg1 ( food :arg1-of ( cause :mod hey )  :quant more :arg1-of cause :arg1-of ( suppose :arg2 bad :arg1 ( sum :mod dim )  :arg2 ( possible :arg1 small :arg1 ( try :arg1 ( dish :quant more )  :arg1 ( small :compared-to ( cheap :arg1 ( dish :mod each )  )  )  )  :arg1 and )  )  )
contrast :arg1 good :arg1 ( food :arg1-of ( cause :mod hey )  :quant more :arg1-of cause :arg1-of ( suppose :arg2 bad :arg1 ( sum :mod dim )  :arg2 ( possible :arg1 small :arg1 ( try :arg1 ( dish :quant more )  :arg1 ( small :compared-to ( cheap :arg1 ( dish :mod each )  )  )  )  :arg1 and )  )  )
contrast :arg1 good :arg1 ( food :arg1-of ( cause :mod hey )  :quant more :arg1-of cause :arg1-of ( suppose :arg2 bad :arg1 ( sum :mod dim )  :arg2 ( possible :arg1 small :arg1 ( try :arg1 ( dish :quant more )  :arg1 ( small :compared-to ( cheap :arg1 ( dish :mod each )  )  )  )  :arg1 and )  )  )
contrast :arg1 good :arg1 ( food :arg1-of ( cause :mod hey )  :quant more :arg1-of cause :arg1-of ( suppose :arg2 bad :arg1 ( sum :mod dim )  :arg2 ( possible :arg1 small :arg1 ( try :arg1 ( dish :quant more )  :arg1 ( small :compared-to ( cheap :arg1 ( dish :mod each )  )  )  )  :arg1 and )  )  )
possible :arg1 ( attest :arg0 most :arg1 ( and :op1 ( spend :arg1 ( over :null_edge 50 )  :arg1 ( thing :arg1-of drink )  :arg2 ( bar :mod new :mod york )  )  :op2 ( feel :mod hardly :arg1 thing )  )  )  :arg1 ( and :op1 ( plentiful :domain ( drink :location here )  )  :op2 unique )
possible :arg1 ( attest :arg0 most :arg1 ( and :op1 ( spend :arg1 ( over :null_edge 50 )  :arg1 ( thing :arg1-of drink )  :arg2 ( bar :mod new :mod york )  )  :op2 ( feel :mod hardly :arg1 thing )  )  )  :arg1 ( and :op1 ( plentiful :domain ( drink :location here )  )  :op2 unique )
possible :arg1 ( attest :arg0 most :arg1 ( and :op1 ( spend :arg1 ( over :null_edge 50 )  :arg1 ( thing :arg1-of drink )  :arg2 ( bar :mod new :mod york )  )  :op2 ( feel :mod hardly :arg1 thing )  )  )  :arg1 ( and :op1 ( plentiful :domain ( drink :location here )  )  :op2 unique )
and :op1 ( keep :arg1 ( stuff :mod complimentary )  :arg1 come )  :op2 ( receive :arg0 stuff :time ( see :arg0 waiter :arg1 ( open :arg1 gift )  )  :arg1 dessert :arg1 ( plate :arg1-of ( write :arg1 ( birthday :mod happy )  :arg2 ( and :op1 ( touch :arg1-of ( nice :arg2 candlevery )  )  :op2 ( person :arg2-of staff :arg1-of candlevery :mod attentive )  )  )  )  )
and :op1 ( keep :arg1 ( stuff :mod complimentary )  :arg1 come )  :op2 ( receive :arg0 stuff :time ( see :arg0 waiter :arg1 ( open :arg1 gift )  )  :arg1 dessert :arg1 ( plate :arg1-of ( write :arg1 ( birthday :mod happy )  :arg2 ( and :op1 ( touch :arg1-of ( nice :arg2 candlevery )  )  :op2 ( person :arg2-of staff :arg1-of candlevery :mod attentive )  )  )  )  )
and :op1 ( keep :arg1 ( stuff :mod complimentary )  :arg1 come )  :op2 ( receive :arg0 stuff :time ( see :arg0 waiter :arg1 ( open :arg1 gift )  )  :arg1 dessert :arg1 ( plate :arg1-of ( write :arg1 ( birthday :mod happy )  :arg2 ( and :op1 ( touch :arg1-of ( nice :arg2 candlevery )  )  :op2 ( person :arg2-of staff :arg1-of candlevery :mod attentive )  )  )  )  )
and :op1 ( keep :arg1 ( stuff :mod complimentary )  :arg1 come )  :op2 ( receive :arg0 stuff :time ( see :arg0 waiter :arg1 ( open :arg1 gift )  )  :arg1 dessert :arg1 ( plate :arg1-of ( write :arg1 ( birthday :mod happy )  :arg2 ( and :op1 ( touch :arg1-of ( nice :arg2 candlevery )  )  :op2 ( person :arg2-of staff :arg1-of candlevery :mod attentive )  )  )  )  )
arrive :arg1 food :arg1 ( temporal-quantity :unit minute :quant 20 )  :time ( after :op1 ( call :arg1 ( and :op1 cold :op2 soggy )  )  )
deal :condition ( go :arg0 you :arg4 ( menu :mod pre :mod theatre )  )  :mod ( great :mod even )
place :condition ( someone :domain you :arg0-of ( appreciate :arg1 ( and :op1 ( simplicity :arg1 ( and :op2 ( and :op1 ( present :mod wonderfully )  :op2 tasting )  :op1 seafood :op2 vegetable )  )  :op2 elegance :op2 ( size :mod portion )  )  )  )  :domain kai
place :condition ( someone :domain you :arg0-of ( appreciate :arg1 ( and :op1 ( simplicity :arg1 ( and :op2 ( and :op1 ( present :mod wonderfully )  :op2 tasting )  :op1 seafood :op2 vegetable )  )  :op2 elegance :op2 ( size :mod portion )  )  )  )  :domain kai
place :condition ( someone :domain you :arg0-of ( appreciate :arg1 ( and :op1 ( simplicity :arg1 ( and :op2 ( and :op1 ( present :mod wonderfully )  :op2 tasting )  :op1 seafood :op2 vegetable )  )  :op2 elegance :op2 ( size :mod portion )  )  )  )  :domain kai
possible :arg1 ( beat :arg0 price :purpose ( and :op1 quality :op2 ( freshness :mod quantity )  :op2 taste )  )
possible :arg1 ( beat :arg0 price :purpose ( and :op1 quality :op2 ( freshness :mod quantity )  :op2 taste )  )
possible :arg1 ( beat :arg0 price :purpose ( and :op1 quality :op2 ( freshness :mod quantity )  :op2 taste )  )
possible :arg1 ( beat :arg0 price :purpose ( and :op1 quality :op2 ( freshness :mod quantity )  :op2 taste )  )
possible :arg1 ( beat :arg0 price :purpose ( and :op1 quality :op2 ( freshness :mod quantity )  :op2 taste )  )
win :null_edge ( hurt :arg1 ( or :op1 check :op1 stomach :op2 wallet )  )
win :null_edge ( hurt :arg1 ( or :op1 check :op1 stomach :op2 wallet )  )
tonino :mod little :null_edge ( awesome :null_edge just :null_edge ( person :arg0-of have-org-role :mod favor :arg1 deliver :null_edge kennsington :mod honest :mod ( good :degree most )  :time ever )  )
quality :poss ( service :mod ( poor :degree incredible )  )  :mod food :poss ( thing :arg2-of price :arg1-of exorbitance )
quality :poss ( service :mod ( poor :degree incredible )  )  :mod food :poss ( thing :arg2-of price :arg1-of exorbitance )
quality :poss ( service :mod ( poor :degree incredible )  )  :mod food :poss ( thing :arg2-of price :arg1-of exorbitance )
and :op1 ( time :arg0 i :quant ( about :op1 4 )  )  :op2 ( person :arg0-of have-org-role :time always :arg1 ( meal :mod great )  )
go :arg0 i :arg1 line :null_edge ( average :null_edge 3 )  :time ( until :op1 ( possible :arg1 ( walk :time anymore )  )  )
and :op1 ( get :arg0 we :mod usual :mod just :arg1 ( special :quant some :mod dinner )  )  :op2 ( and :op1 ( price :degree very :arg3 reasonable )  :op2 ( tasty :degree very )  )
and :op1 ( get :arg0 we :mod usual :mod just :arg1 ( special :quant some :mod dinner )  )  :op2 ( and :op1 ( price :degree very :arg3 reasonable )  :op2 ( tasty :degree very )  )
and :op1 ( food :mod horrible )  :op2 ( service :mod horrible )
and :op1 ( food :mod horrible )  :op2 ( service :mod horrible )
and :op1 ( plentiful :arg1 ( plate :location ( and :op1 wine :op2 cheese-off )  )  )  :op2 ( possible :arg1 ( wait :arg2 ( try :arg1 ( or :op1 fondue :op2 table :op2 grilling )  )  )  )
and :op1 ( plentiful :arg1 ( plate :location ( and :op1 wine :op2 cheese-off )  )  )  :op2 ( possible :arg1 ( wait :arg2 ( try :arg1 ( or :op1 fondue :op2 table :op2 grilling )  )  )  )
and :op1 ( plentiful :arg1 ( plate :location ( and :op1 wine :op2 cheese-off )  )  )  :op2 ( possible :arg1 ( wait :arg2 ( try :arg1 ( or :op1 fondue :op2 table :op2 grilling )  )  )  )
and :op1 ( plentiful :arg1 ( plate :location ( and :op1 wine :op2 cheese-off )  )  )  :op2 ( possible :arg1 ( wait :arg2 ( try :arg1 ( or :op1 fondue :op2 table :op2 grilling )  )  )  )
and :op1 ( treat :arg0 they :arg1 ( and :op1 ( fresh :domain food :degree extreme )  :op2 ( prepare :arg1 food )  )  )
xconcept :x ( salad :mod exotic :mod ( ly :mod basic )  )  :x ( salad :mod little :arg1-of ( person :name ( name :op1 green )  )  :prep-with ( sauce :mod peanut :arg1-of ( perfect :time ( before :op1 ( tofu :arg1-of sweet :quant basil :arg1-of fry )  )  )  )  )
xconcept :x ( salad :mod exotic :mod ( ly :mod basic )  )  :x ( salad :mod little :arg1-of ( person :name ( name :op1 green )  )  :prep-with ( sauce :mod peanut :arg1-of ( perfect :time ( before :op1 ( tofu :arg1-of sweet :quant basil :arg1-of fry )  )  )  )  )
xconcept :x ( salad :mod exotic :mod ( ly :mod basic )  )  :x ( salad :mod little :arg1-of ( person :name ( name :op1 green )  )  :prep-with ( sauce :mod peanut :arg1-of ( perfect :time ( before :op1 ( tofu :arg1-of sweet :quant basil :arg1-of fry )  )  )  )  )
xconcept :x ( salad :mod exotic :mod ( ly :mod basic )  )  :x ( salad :mod little :arg1-of ( person :name ( name :op1 green )  )  :prep-with ( sauce :mod peanut :arg1-of ( perfect :time ( before :op1 ( tofu :arg1-of sweet :quant basil :arg1-of fry )  )  )  )  )
complain :mod big :arg2-of ( available :polarity - :location toasting )
place :domain ( wasn :mod even :mod food :mod ( good :mod this )  )  :domain garden :mod great :arg1 ( and :op1 ( sit :manner outside )  :op2 relax )
place :domain ( wasn :mod even :mod food :mod ( good :mod this )  )  :domain garden :mod great :arg1 ( and :op1 ( sit :manner outside )  :op2 relax )
place :domain ( wasn :mod even :mod food :mod ( good :mod this )  )  :domain garden :mod great :arg1 ( and :op1 ( sit :manner outside )  :op2 relax )
and :op1 ( treat :arg1 ( or :op1 ( virgin :mod volare )  :op2 ( regular :frequency ( rate-entity :arg3 ( temporal-quantity :unit week )  )  )  )  :arg1 everyone :arg1 same )  :op2 ( possible :arg1 ( ask :arg0 you :degree ( more :compared-to that )  :arg1 ( friendly :arg0 service :arg2 this )  )  )
wrong :arg1 ( and :op1 ( come :arg1 food :arg1 ( waiter :null_edge - :arg0-of find )  )  :op2 ( show :arg0 wine :time ( end :arg1 meal )  )  )
wrong :arg1 ( and :op1 ( come :arg1 food :arg1 ( waiter :null_edge - :arg0-of find )  )  :op2 ( show :arg0 wine :time ( end :arg1 meal )  )  )
wrong :arg1 ( and :op1 ( come :arg1 food :arg1 ( waiter :null_edge - :arg0-of find )  )  :op2 ( show :arg0 wine :time ( end :arg1 meal )  )  )
wrong :arg1 ( and :op1 ( come :arg1 food :arg1 ( waiter :null_edge - :arg0-of find )  )  :op2 ( show :arg0 wine :time ( end :arg1 meal )  )  )
and :op2 ( and :op2 ( and :op1 chicken :op2 steak )  :op1 seasoned :op2 ( cook :arg2 perfection )  :op2 ( great :domain ( sandwhich :mod ( lamb :beneficiary ( appetite :mod heartier )  )  )  )  )
and :op2 ( and :op2 ( and :op1 chicken :op2 steak )  :op1 seasoned :op2 ( cook :arg2 perfection )  :op2 ( great :domain ( sandwhich :mod ( lamb :beneficiary ( appetite :mod heartier )  )  )  )  )
and :op2 ( and :op2 ( and :op1 chicken :op2 steak )  :op1 seasoned :op2 ( cook :arg2 perfection )  :op2 ( great :domain ( sandwhich :mod ( lamb :beneficiary ( appetite :mod heartier )  )  )  )  )
see :arg0 we :arg1 ( heat :arg1 ( item :quant 1 :arg1-of freeze )  :null_edge ( sure :arg1 ( dish :mod dim )  )  )
xconcept :x ( null_tag :null_edge - :null_edge you :arg1-of ( cause :arg1 ( go :arg0 you :direction back )  :arg0 ( good :domain food )  )  )
and :op1 ( great :domain food )  :op2 ( good :domain service :mod even )
and :op1 ( great :domain food )  :op2 ( good :domain service :mod even )
deal :condition ( possible :mod hardly :arg1 ( call :arg1 this :arg2 restaurant )  )  :arg1-of possible :mod ( good :degree most )  :arg2 manhatten :arg2 ( plate :quant 4 :arg1-of ( heap :arg2 ( and :op1 rice :op2 2 :op3 ( entree :null_edge null_tag )  )  )  )
deal :condition ( possible :mod hardly :arg1 ( call :arg1 this :arg2 restaurant )  )  :arg1-of possible :mod ( good :degree most )  :arg2 manhatten :arg2 ( plate :quant 4 :arg1-of ( heap :arg2 ( and :op1 rice :op2 2 :op3 ( entree :null_edge null_tag )  )  )  )
pleasant :arg1 ( and :op1 ( noisy :domain hallway )  :op2 ( full :arg1 restaurant )  :op2 ( have :arg0 we :arg2 ( raise :arg0 we :arg1 voice :purpose ( possible :arg1 ( maintain :arg1 converse :arg1-of ( country :mod tradition :name ( name :op1 france )  )  )  )  )  )  )
pleasant :arg1 ( and :op1 ( noisy :domain hallway )  :op2 ( full :arg1 restaurant )  :op2 ( have :arg0 we :arg2 ( raise :arg0 we :arg1 voice :purpose ( possible :arg1 ( maintain :arg1 converse :arg1-of ( country :mod tradition :name ( name :op1 france )  )  )  )  )  )  )
and :op1 ( fresh :arg0 fish )  :op2 ( and :op1 ( slice :arg1 ( piece :mod each )  :arg2 perfection )  :op2 ( seasoned :arg1 ( chef :mod sushi :mod ( usual :mod ( also :arg2 ( and :op1 ( wasabus :mod little :arg1-of fresh )  :op2 ( sauce :mod soy )  )  :frequency sometimes :arg2 ( salt :quant some :mod sea )  )  )  )  )  )
and :op1 ( fresh :arg0 fish )  :op2 ( and :op1 ( slice :arg1 ( piece :mod each )  :arg2 perfection )  :op2 ( seasoned :arg1 ( chef :mod sushi :mod ( usual :mod ( also :arg2 ( and :op1 ( wasabus :mod little :arg1-of fresh )  :op2 ( sauce :mod soy )  )  :frequency sometimes :arg2 ( salt :quant some :mod sea )  )  )  )  )  )
and :op1 ( fresh :arg0 fish )  :op2 ( and :op1 ( slice :arg1 ( piece :mod each )  :arg2 perfection )  :op2 ( seasoned :arg1 ( chef :mod sushi :mod ( usual :mod ( also :arg2 ( and :op1 ( wasabus :mod little :arg1-of fresh )  :op2 ( sauce :mod soy )  )  :frequency sometimes :arg2 ( salt :quant some :mod sea )  )  )  )  )  )
and :op1 ( fresh :arg0 fish )  :op2 ( and :op1 ( slice :arg1 ( piece :mod each )  :arg2 perfection )  :op2 ( seasoned :arg1 ( chef :mod sushi :mod ( usual :mod ( also :arg2 ( and :op1 ( wasabus :mod little :arg1-of fresh )  :op2 ( sauce :mod soy )  )  :frequency sometimes :arg2 ( salt :quant some :mod sea )  )  )  )  )  )
and :op1 ( fresh :arg0 fish )  :op2 ( and :op1 ( slice :arg1 ( piece :mod each )  :arg2 perfection )  :op2 ( seasoned :arg1 ( chef :mod sushi :mod ( usual :mod ( also :arg2 ( and :op1 ( wasabus :mod little :arg1-of fresh )  :op2 ( sauce :mod soy )  )  :frequency sometimes :arg2 ( salt :quant some :mod sea )  )  )  )  )  )
xconcept :x ( cause :op consequently :arg1 ( fall :arg1 burger :arg4 apart :arg2 hand :arg1 ( mess-up :mod such :purpose-of ( feel :arg2 finish )  )  )  )  :x and
and :op1 ( want :arg0 ( and :op2 ( person :arg0-of ( have-rel-role :arg2 girlfriend )  )  :op1 ( person :arg0-of ( have-rel-role :arg2 son )  )  )  :arg1 cheeseburger )  :op2 huge
recommend :arg0 i :mod really :arg1 ( roll :arg1-of ( simple :degree very )  :mod unda :mod egg )
recommend :arg0 i :mod really :arg1 ( roll :arg1-of ( simple :degree very )  :mod unda :mod egg )
good :degree very :domain wine
go :arg1 this :mod ( thaus :mod only )  :degree too :manner nyc
and :op1 ( seat :arg1 we :arg0 waitstaff )  :op2 ignore
cause :arg1 ( perfect :arg1 ( you :prep-in ( group :mod big )  )  :arg1 ( place :mod this )  )  :arg0 ( recommend :arg1 ( share :arg2 ( table :quant most )  :arg1 ( possible :arg1 ( susan :mod lazy )  :arg1 ( multi-sentence :snt2 ( feel :arg0 ( family :mod even )  :arg1 comfortable :location here )  )  )  )  )
cause :arg1 ( perfect :arg1 ( you :prep-in ( group :mod big )  )  :arg1 ( place :mod this )  )  :arg0 ( recommend :arg1 ( share :arg2 ( table :quant most )  :arg1 ( possible :arg1 ( susan :mod lazy )  :arg1 ( multi-sentence :snt2 ( feel :arg0 ( family :mod even )  :arg1 comfortable :location here )  )  )  )  )
show :arg1 ( temporal-quantity :unit minute :quant 15 )  :time ( after :op1 ( melt :arg1 tuna )  )
loin :mod ( steak :mod tasty )  :mod pork
loin :mod ( steak :mod tasty )  :mod pork
xconcept :x ( and :op1 ( go :arg0 i :arg0 ( person :quant 5 :arg0-of ( have-rel-role :arg2 friend )  )  )  :op2 ( linger :arg0 i :arg0 we :arg1 table :purpose bit )  :op2 ( rush :arg1 i :arg1 feel :mod ( even :op1 wait )  )  )  :x and
xconcept :x ( and :op1 ( go :arg0 i :arg0 ( person :quant 5 :arg0-of ( have-rel-role :arg2 friend )  )  )  :op2 ( linger :arg0 i :arg0 we :arg1 table :purpose bit )  :op2 ( rush :arg1 i :arg1 feel :mod ( even :op1 wait )  )  )  :x and
recommend :arg0 ( d :poss i )  :degree high :arg1 ( provide :arg1 ( and :op1 ( occasion :arg1-of special )  :op2 ( and :op1 ( setting :mod intimate )  :op2 ( service :arg1-of nice )  )  )  )
recommend :arg0 ( d :poss i )  :degree high :arg1 ( provide :arg1 ( and :op1 ( occasion :arg1-of special )  :op2 ( and :op1 ( setting :mod intimate )  :op2 ( service :arg1-of nice )  )  )  )
great :domain burger :mod also
give :arg0 they :arg1 ( discount :arg2 ( percentage-entity :value 15 )  )  :time end :manner ( enough :concession ( know :arg1 ( horrible :domain service )  )  )
give :arg0 they :arg1 ( discount :arg2 ( percentage-entity :value 15 )  )  :time end :manner ( enough :concession ( know :arg1 ( horrible :domain service )  )  )
great :arg1-of ( cause :arg0 ( cause :arg2 ( mean :mod just :arg1 cheap :arg2 ( or :op1 portion :op1 small :op2 ( nasty :domain portion :domain food )  )  )  )  )
great :arg1-of ( cause :arg0 ( cause :arg2 ( mean :mod just :arg1 cheap :arg2 ( or :op1 portion :op1 small :op2 ( nasty :domain portion :domain food )  )  )  )  )
great :domain pizza
contrast :arg1 ( have :arg0 i :arg1 ( pureed :mod edamame )  :time before :null_edge ( think :arg0 i :arg1 ( and :op1 ( innovate :domain ( possible :arg1 ( use :arg1 ( salt :degree ( more :degree bit )  )  )  )  )  :op2 tasty )  )  )
service :arg0-of ( leave :arg1 ( taste :arg1-of bad )  :arg1 mouth )
contrast :arg1 ( apologize :time ( notify :arg0 we :arg1 ( mention :arg0 he :arg1 didn :arg1 special )  :arg1 didn )  :arg0 he :time didn :arg1 ( let :arg0 he :arg1 ( know :arg1 ( decide :arg0 we :mod ( good :degree very )  )  )  )  )
reasonable :domain price :degree extreme :arg1 ( and :op1 ( appetizer :arg1-of ( eat :arg0 we )  )  :op2 food )
reasonable :domain price :degree extreme :arg1 ( and :op1 ( appetizer :arg1-of ( eat :arg0 we )  )  :op2 food )
reasonable :domain price :degree extreme :arg1 ( and :op1 ( appetizer :arg1-of ( eat :arg0 we )  )  :op2 food )
dine :arg0 ( t :null_edge don )  :arg1 ( tamarind :arg1 ( dish :mod vegetarian )  )  :arg0 they :mod simple :arg2 ( par :accompanier ( selection :mod veg )  )
dine :arg0 ( t :null_edge don )  :arg1 ( tamarind :arg1 ( dish :mod vegetarian )  )  :arg0 they :mod simple :arg2 ( par :accompanier ( selection :mod veg )  )
and :op2 ( person :arg0-of own :arg1 kenny :time always :location there )  :op2 ( treat :arg1 family :arg1 ( we :mod family )  )
contrast :arg1 ( need :arg0 they :arg1 kick :arg1 out :arg1 ( and :op1 ( good :time ( until :op1 then )  :domain sushi :degree pretty )  :op3 consistent )  )
contrast :arg1 ( need :arg0 they :arg1 kick :arg1 out :arg1 ( and :op1 ( good :time ( until :op1 then )  :domain sushi :degree pretty )  :op3 consistent )  )
contrast :arg2 ( have :arg0 i )  :arg2 ( wait :arg1 i :null_edge ( few :mod only )  :time lunch )  :arg2 ( cause :arg1 ( worth :domain ( place :mod this )  :manner definite :domain wait )  )
contrast :arg2 ( have :arg0 i )  :arg2 ( wait :arg1 i :null_edge ( few :mod only )  :time lunch )  :arg2 ( cause :arg1 ( worth :domain ( place :mod this )  :manner definite :domain wait )  )
and :op2 ( food :quant all :mod all )  :op2 ( return :arg0 i :purpose ( see :arg0 i :arg1 ( operate :instrument ( dinner :quant ( or :op1 4 :op2 less )  )  )  )  )  :op2 ( thing :location ( above :op1 average )  )
and :op2 ( food :quant all :mod all )  :op2 ( return :arg0 i :purpose ( see :arg0 i :arg1 ( operate :instrument ( dinner :quant ( or :op1 4 :op2 less )  )  )  )  )  :op2 ( thing :location ( above :op1 average )  )
make :arg0 ( and :op1 ( food :mod delicious )  :op2 ( service :arg1-of excellent )  :op2 ( atmosphere :mod pretty )  )  :null_edge great :arg1 ( and :op1 dinner :op2 ( country :name ( name :op1 $ )  :null_edge 5 )  :op2 ( choose :arg1 this )  )
make :arg0 ( buffet :arg1-of ( lunch :quant 99 )  )  :arg1 ( good :mod even :beneficiary lunch )
make :arg0 ( and :op1 ( food :mod delicious )  :op2 ( service :arg1-of excellent )  :op2 ( atmosphere :mod pretty )  )  :null_edge great :arg1 ( and :op1 dinner :op2 ( country :name ( name :op1 $ )  :null_edge 5 )  :op2 ( choose :arg1 this )  )
make :arg0 ( buffet :arg1-of ( lunch :quant 99 )  )  :arg1 ( good :mod even :beneficiary lunch )
make :arg0 ( and :op1 ( food :mod delicious )  :op2 ( service :arg1-of excellent )  :op2 ( atmosphere :mod pretty )  )  :null_edge great :arg1 ( and :op1 dinner :op2 ( country :name ( name :op1 $ )  :null_edge 5 )  :op2 ( choose :arg1 this )  )
make :arg0 ( buffet :arg1-of ( lunch :quant 99 )  )  :arg1 ( good :mod even :beneficiary lunch )
make :arg0 ( and :op1 ( food :mod delicious )  :op2 ( service :arg1-of excellent )  :op2 ( atmosphere :mod pretty )  )  :null_edge great :arg1 ( and :op1 dinner :op2 ( country :name ( name :op1 $ )  :null_edge 5 )  :op2 ( choose :arg1 this )  )
make :arg0 ( buffet :arg1-of ( lunch :quant 99 )  )  :arg1 ( good :mod even :beneficiary lunch )
make :arg0 ( and :op1 ( food :mod delicious )  :op2 ( service :arg1-of excellent )  :op2 ( atmosphere :mod pretty )  )  :null_edge great :arg1 ( and :op1 dinner :op2 ( country :name ( name :op1 $ )  :null_edge 5 )  :op2 ( choose :arg1 this )  )
make :arg0 ( buffet :arg1-of ( lunch :quant 99 )  )  :arg1 ( good :mod even :beneficiary lunch )
make :arg0 ( and :op1 ( food :mod delicious )  :op2 ( service :arg1-of excellent )  :op2 ( atmosphere :mod pretty )  )  :null_edge great :arg1 ( and :op1 dinner :op2 ( country :name ( name :op1 $ )  :null_edge 5 )  :op2 ( choose :arg1 this )  )
make :arg0 ( buffet :arg1-of ( lunch :quant 99 )  )  :arg1 ( good :mod even :beneficiary lunch )
recommend :arg2 appetizer :arg0 i :arg1 ( and :op1 ( fritter :mod shrimp )  :op2 dumpling )
recommend :arg2 appetizer :arg0 i :arg1 ( and :op1 ( fritter :mod shrimp )  :op2 dumpling )
recommend :arg2 appetizer :arg0 i :arg1 ( and :op1 ( fritter :mod shrimp )  :op2 dumpling )
contrast :arg1 ( work :arg1-of ( nice :mod such )  :location here )  :arg2 ( have :arg1 ( review :arg1 food )  )
contrast :arg1 ( work :arg1-of ( nice :mod such )  :location here )  :arg2 ( have :arg1 ( review :arg1 food )  )
and :op2 ( and :op1 ( dark :arg1 restaurant )  :op2 ( have :arg0 you :arg1 ( light :arg1-of ( shine :arg2 you :arg1 ( put :arg1 you :arg2 ( light :arg1-of bad :arg1-of possible )  :arg2 ( reach :arg1 sunglass )  )  )  )  )  )  :op2 ( attract :degree very )
lemonade :domain ( try :arg1 ( cocktail :mod square )  )  :mod ginger :arg2 vodka :arg2-of ( available :mod also :arg1 vodka )
lemonade :domain ( try :arg1 ( cocktail :mod square )  )  :mod ginger :arg2 vodka :arg2-of ( available :mod also :arg1 vodka )
good :domain veal :compared-to patsy
great :domain wine :degree great :domain food
great :domain wine :degree great :domain food
and :op1 ( mediocre :arg0 service )  :op2 ( make :arg0 ( lack :arg1 ( conditioning :mod air )  )  :arg2 ( meal :arg0-of ( comfortable :degree less )  )  )
and :op1 ( mediocre :arg0 service )  :op2 ( make :arg0 ( lack :arg1 ( conditioning :mod air )  )  :arg2 ( meal :arg0-of ( comfortable :degree less )  )  )
and :op1 ( mediocre :arg0 service )  :op2 ( make :arg0 ( lack :arg1 ( conditioning :mod air )  )  :arg2 ( meal :arg0-of ( comfortable :degree less )  )  )
surprise :arg0 ( and :op1 food :op2 ( person :arg2-of staff )  )  :time always :prep-with ( height :mod new :arg1-of take )
surprise :arg0 ( and :op1 food :op2 ( person :arg2-of staff )  )  :time always :prep-with ( height :mod new :arg1-of take )
and :op1 ( go :arg4 ottimo )  :op2 ( expect :arg1 ( pizza :mod outstanding )  :arg1 ( love :arg1 ( fresca :mod la :mod pizza )  )  )
sushi :manner honest :arg1-of bad :arg1 ( and :op2 i :op1 ( life :mod entire )  :op1 ( person :arg0-of ( have-rel-role :arg2 husband )  )  )
possible :arg1 ( beat :arg0 ( and :op1 ( want :arg0 you :arg1 ( food :mod great )  )  :op1 ( thing :arg2-of price :mod great )  :op2 ( mind :arg1 don :arg1 decor )  )  :arg0 you :arg1 ( place :mod this )  )
possible :arg1 ( beat :arg0 ( and :op1 ( want :arg0 you :arg1 ( food :mod great )  )  :op1 ( thing :arg2-of price :mod great )  :op2 ( mind :arg1 don :arg1 decor )  )  :arg0 you :arg1 ( place :mod this )  )
possible :arg1 ( beat :arg0 ( and :op1 ( want :arg0 you :arg1 ( food :mod great )  )  :op1 ( thing :arg2-of price :mod great )  :op2 ( mind :arg1 don :arg1 decor )  )  :arg0 you :arg1 ( place :mod this )  )
and :op1 ( cook :domain ( make :arg1 ( restaurant :mod this :arg1-of special )  )  :mod ( sichuan :mod authentic )  :mod ( only :medium ( nyc :arg1-of ( offer :arg1 ( hotpot :null_edge authentic :mod chongqing )  )  )  )  )
and :op1 ( cook :domain ( make :arg1 ( restaurant :mod this :arg1-of special )  )  :mod ( sichuan :mod authentic )  :mod ( only :medium ( nyc :arg1-of ( offer :arg1 ( hotpot :null_edge authentic :mod chongqing )  )  )  )  )
right :arg2 ( table :mod tiny :null_edge ( plate :null_edge 2 :mod dinner :arg3-of ( hang-on :arg2 edge )  )  )  :arg2 ( middle :part-of ( lane :mod ( traffic :mod waiter )  )  )
right :arg2 ( table :mod tiny :null_edge ( plate :null_edge 2 :mod dinner :arg3-of ( hang-on :arg2 edge )  )  )  :arg2 ( middle :part-of ( lane :mod ( traffic :mod waiter )  )  )
right :arg2 ( table :mod tiny :null_edge ( plate :null_edge 2 :mod dinner :arg3-of ( hang-on :arg2 edge )  )  )  :arg2 ( middle :part-of ( lane :mod ( traffic :mod waiter )  )  )
contrast :arg2 ( excellent :arg1 ( collect :arg1 sake )  :domain ( try :mod nanbu )  )  :arg2 pricy
include :arg2 ( dish :mod interesting :mod other :arg1-of change )  :arg1 ( chicken :location ( and :op1 ( sauce :mod curry )  :op2 salmon )  )
include :arg2 ( dish :mod interesting :mod other :arg1-of change )  :arg1 ( chicken :location ( and :op1 ( sauce :mod curry )  :op2 salmon )  )
include :arg2 ( dish :mod interesting :mod other :arg1-of change )  :arg1 ( chicken :location ( and :op1 ( sauce :mod curry )  :op2 salmon )  )
lobster :domain ( favor :quant one )  :mod ( salad :mod cold :mod lobster :mod magnificent )
lobster :domain ( favor :quant one )  :mod ( salad :mod cold :mod lobster :mod magnificent )
ask :arg2 ( bartender :arg1-of usha :mod nice :arg1-of manhattan )
and :op1 ( outstanding :domain service )  :op2 ( possible :arg1 ( good :domain ( crab :arg1 ( benedict :mod cake :mod egg )  )  )  )
and :op1 ( outstanding :domain service )  :op2 ( possible :arg1 ( good :domain ( crab :arg1 ( benedict :mod cake :mod egg )  )  )  )
place :arg1 ( and :op1 decor :op2 ( bathroom :arg0-of hide )  :op1 ( laugh :mod good )  )
place :arg1 ( and :op1 decor :op2 ( bathroom :arg0-of hide )  :op1 ( laugh :mod good )  )
and :op1 ( good :domain location :compared-to ( and :op2 ( and :op2 college :op1 near :op2 ( reasonable :arg1 price :degree very )  )  :op2 ( person :arg0-of study )  :op1 suan :mod ( again :mod again )  )  )
and :op1 ( good :domain location :compared-to ( and :op2 ( and :op2 college :op1 near :op2 ( reasonable :arg1 price :degree very )  )  :op2 ( person :arg0-of study )  :op1 suan :mod ( again :mod again )  )  )
place :arg1-of wonderful
and :op3 ( deliver :frequency often :arg2 ( temporal-quantity :unit hour )  )  :op2 ( high :arg1 price :compared-to ( pizzeria :quant most :mod other :location area )  )
and :op3 ( deliver :frequency often :arg2 ( temporal-quantity :unit hour )  )  :op2 ( high :arg1 price :compared-to ( pizzeria :quant most :mod other :location area )  )
contrast :arg1 ( kind :domain ( place :mod small )  )  :arg2 ( guess :arg0 i :arg1 ( possible :arg1 ( busy :degree too )  :arg1 ( fit :arg1 busy :arg1 ( or :op1 group :op2 kid )  )  )  )
order :arg0 we :mod also :arg1 ( dog :quant 2 :arg1-of hot )  :arg2 ( think :arg1 ( good :degree pretty :domain ( section :mod whole :location menu :arg1-of devote )  )  )
order :arg0 we :mod also :arg1 ( dog :quant 2 :arg1-of hot )  :arg2 ( think :arg1 ( good :degree pretty :domain ( section :mod whole :location menu :arg1-of devote )  )  )
and :domain i :op1 chicken :op1 ( sauce :mod garlic )  :op3 ( chicken :prep-with ( sauce :arg1-of black :mod bean )  )  :op3 ( chicken :mod hunan )
and :domain i :op1 chicken :op1 ( sauce :mod garlic )  :op3 ( chicken :prep-with ( sauce :arg1-of black :mod bean )  )  :op3 ( chicken :mod hunan )
and :domain i :op1 chicken :op1 ( sauce :mod garlic )  :op3 ( chicken :prep-with ( sauce :arg1-of black :mod bean )  )  :op3 ( chicken :mod hunan )
get :arg1-of ( cause :arg0 ( crust :mod delicate :mod thin )  )  :arg2 ( soggy :arg1 pie :arg1 box )
get :arg1-of ( cause :arg0 ( crust :mod delicate :mod thin )  )  :arg2 ( soggy :arg1 pie :arg1 box )
have :arg0 dish :arg1 ( piece :quant 6 :part-of beef )
have :arg0 dish :arg1 ( piece :quant 6 :part-of beef )
and :op1 ( get :arg0 we :manner line )  :op3 ( serve :arg1 line :arg1 ( fritter :mod bannan )  )
and :op1 ( get :arg0 we :manner line )  :op3 ( serve :arg1 line :arg1 ( fritter :mod bannan )  )
spicy :degree little :degree too :arg2 ( friend :null_edge ( thing :arg1-of eat :arg0 you :arg1 ( and :op2 possible :op1 ( rice :degree more )  :op2 ( water :arg1-of keep )  )  )  )
spicy :degree little :degree too :arg2 ( friend :null_edge ( thing :arg1-of eat :arg0 you :arg1 ( and :op2 possible :op1 ( rice :degree more )  :op2 ( water :arg1-of keep )  )  )  )
and :op1 ( crowd :domain ( place :mod this )  :time always :degree very )  :op3 popular
and :op2 ( appetizer :location somewhere :location around :quant 7 )  :op2 ( dish :mod main :quant between :quant 11 :mod ( country :name ( name :op1 $ )  :null_edge 16 )  )
and :op2 ( appetizer :location somewhere :location around :quant 7 )  :op2 ( dish :mod main :quant between :quant 11 :mod ( country :name ( name :op1 $ )  :null_edge 16 )  )
go :arg0 ( and :op2 i :op1 ( person :arg0-of ( have-rel-role :arg2 wife )  )  )  :arg4 orsay :purpose ( dinner :null_edge ( festival :name ( name :op1 valentine )  )  )
contrast :arg1 ( know :arg0 i :arg0 ( t :null_edge don )  :arg0 ( you :mod guy )  :arg1 ( eat :arg0 i :arg0 t :location somewhere :condition ( atmosphere :domain i :location-of food )  )  )
contrast :arg1 ( know :arg0 i :arg0 ( t :null_edge don )  :arg0 ( you :mod guy )  :arg1 ( eat :arg0 i :arg0 t :location somewhere :condition ( atmosphere :domain i :location-of food )  )  )
and :op1 ( come :arg1 ( gentleman :arg0-of ( have-org-role :arg2 ( person :arg0-of manage )  )  )  :arg4 table )  :op2 ( ask :arg2 ( or :op1 ( much :degree so :prep-as smile )  :op2 greet )  )
and :op1 ( come :arg1 ( gentleman :arg0-of ( have-org-role :arg2 ( person :arg0-of manage )  )  )  :arg4 table )  :op2 ( ask :arg2 ( or :op1 ( much :degree so :prep-as smile )  :op2 greet )  )
and :op1 ( tire :arg1 we :arg0 ( get :arg0 we :arg2 restaurant )  :time ( person :arg1-of sit :arg1 we :arg1 ( begin :arg0 we :arg1 ( order :arg1 appetizer )  )  )  )  :op3 cold
have :arg0 i :arg1 ( and :op1 ( pizza :mod both )  :op2 time :op2 ( appetizer :mod salad )  )
have :arg0 i :arg1 ( and :op1 ( pizza :mod both )  :op2 time :op2 ( appetizer :mod salad )  )
thirsty :domain he :degree terrible :time ( after :op1 meal )  :degree too
wasn :arg0 i :domain ( price :arg1 ( event :name ( name :op1 saturday )  )  :arg1 ( contrast :arg1 ( night :arg1-of special )  :arg2 night )  :arg1 ( event :name ( name :op1 tuesday )  )  )
resemble :arg2 you :arg0 ( and :op1 food :op2 ( value :arg2 ( get :arg0 you :arg1 ( restaurant :quant some :mod chinatown )  )  )  )  :arg1 this :arg2 you
resemble :arg2 you :arg0 ( and :op1 food :op2 ( value :arg2 ( get :arg0 you :arg1 ( restaurant :quant some :mod chinatown )  )  )  )  :arg1 this :arg2 you
contrast :arg1 ( change :arg1 select :arg1-of frequent )  :arg2 ( available :arg2 ( dish :mod basic )  :time always )
contrast :arg1 ( change :arg1 select :arg1-of frequent )  :arg2 ( available :arg2 ( dish :mod basic )  :time always )
and :op1 ( get :arg1 ( and :op1 soup :op2 nosh )  )  :op2 ( gold :domain you )
and :op1 ( get :arg1 ( and :op1 soup :op2 nosh )  )  :op2 ( gold :domain you )
have :arg0 i :arg1 ( say :arg0 i :arg1 this :arg1 ( make :arg1 ( easy :arg1 ( get :arg2 saet :arg1 ( lunch :mod mind )  )  )  )  )
eat :arg0 ( and :op1 family :op2 i )  :time ( night :location here :mod last )  :purpose ( dinner :mod ( broadcast-program :name ( name :op1 christmas )  )  :arg1-of ( have-org-role :arg2 member :arg1 family :arg1 ( town :arg0-of ( spend :arg1 holiday :location out :arg2 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  )  )  )
grow :arg1 i :arg1 bagel
tell :arg2 we :arg1 ( and :op1 ( book :arg1 they :arg2 solid )  :op2 ( available :polarity - :arg2 ( table :mod other )  )  )
reserve :mod ( small :domain restaraurant :degree very )
and :op1 ( stand :arg2 ( right :arg1 hostess )  :arg1 hostess :arg2 ( over :op1 busboy )  )  :op2 ( hiss :arg0 hostess :arg1 rapido :null_edge ( and :op1 ( try :arg1 clear )  :op2 ( set :null_edge 6 )  )  )
and :op1 ( stand :arg2 ( right :arg1 hostess )  :arg1 hostess :arg2 ( over :op1 busboy )  )  :op2 ( hiss :arg0 hostess :arg1 rapido :null_edge ( and :op1 ( try :arg1 clear )  :op2 ( set :null_edge 6 )  )  )
and :op1 ( stand :arg2 ( right :arg1 hostess )  :arg1 hostess :arg2 ( over :op1 busboy )  )  :op2 ( hiss :arg0 hostess :arg1 rapido :null_edge ( and :op1 ( try :arg1 clear )  :op2 ( set :null_edge 6 )  )  )
find :time ( after :op1 ( deal :arg2 ( pizza :mod subpar )  :arg2 ( neighborhood :mod all :mod kensington )  )  )  :arg0 i :arg1 ( tonino :mod little )
order :time then :arg0 we :arg1 ( and :op1 ( roll :mod dinosaur )  :op2 ( sashimus :mod white :mod tuna )  )
order :time then :arg0 we :arg1 ( and :op1 ( roll :mod dinosaur )  :op2 ( sashimus :mod white :mod tuna )  )
m :arg0 i :mod ( partial :arg2 gnocchus )
possible :arg1 ( squeeze :li 6 )  :time ( after :op1 ( and :op1 ( call :time night :time ( before :op1 anniversary )  :arg1 ( reserve :time ( night :mod ( event :name ( name :op1 friday )  )  )  )  :null_edge ( tell :arg2 and :arg1 ( treat :arg2 occasion )  )  )  )  )
bring :arg1 ( note :null_edge ( serve :arg0 they :arg1 beer )  )  :arg0 you
eat :arg0 we :location outside :instrument ( bar :poss haru :purpose sake )  :arg1-of ( cause :arg0 ( overflow :arg1 ( door :part-of haru :mod restaurant :mod next )  )  )
short :domain service :arg1-of typical :arg2 ( dinner :mod type )
and :op1 ( share :arg0 we :arg1 ( bottle :domain ( order :consist-of edamame )  )  )  :op2 ( have :arg0 she :arg1 ( plate :mod sushi )  :null_edge ( have :arg0 i :arg1 sashimus )  )
and :op1 ( share :arg0 we :arg1 ( bottle :domain ( order :consist-of edamame )  )  )  :op2 ( have :arg0 she :arg1 ( plate :mod sushi )  :null_edge ( have :arg0 i :arg1 sashimus )  )
and :op1 ( share :arg0 we :arg1 ( bottle :domain ( order :consist-of edamame )  )  )  :op2 ( have :arg0 she :arg1 ( plate :mod sushi )  :null_edge ( have :arg0 i :arg1 sashimus )  )
and :op1 ( share :arg0 we :arg1 ( bottle :domain ( order :consist-of edamame )  )  )  :op2 ( have :arg0 she :arg1 ( plate :mod sushi )  :null_edge ( have :arg0 i :arg1 sashimus )  )
possible :null_edge ( believe :arg0 i :arg1 ( complain :arg1 ( stick :arg1 ( cheese-off :polarity - )  )  )  )
impossible :null_edge ( appetizer :arg0-of ( eat :arg0 we )  )  :null_edge ( and :op2 ( sum :mod dim :mod ( variety :mod other :consist-of food )  )  :op1 ( criticize :arg1 food )  )
impossible :null_edge ( appetizer :arg0-of ( eat :arg0 we )  )  :null_edge ( and :op2 ( sum :mod dim :mod ( variety :mod other :consist-of food )  )  :op1 ( criticize :arg1 food )  )
impossible :null_edge ( appetizer :arg0-of ( eat :arg0 we )  )  :null_edge ( and :op2 ( sum :mod dim :mod ( variety :mod other :consist-of food )  )  :op1 ( criticize :arg1 food )  )
impossible :null_edge ( appetizer :arg0-of ( eat :arg0 we )  )  :null_edge ( and :op2 ( sum :mod dim :mod ( variety :mod other :consist-of food )  )  :op1 ( criticize :arg1 food )  )
and :op1 ( table :mod each )  :op2 ( pot :mod ( boil :arg1 ( water :arg1-of sink )  :arg2 surface )  )  :op2 ( get :arg0 table :arg0 you :arg1 ( platter :arg1 ( and :op1 ( meat :arg1-of thin :mod sliced )  :op2 ( vegetable :mod various )  :op2 ( and :op1 rice :op3 glass :op2 noodle )  )  )  )
and :op1 ( table :mod each )  :op2 ( pot :mod ( boil :arg1 ( water :arg1-of sink )  :arg2 surface )  )  :op2 ( get :arg0 table :arg0 you :arg1 ( platter :arg1 ( and :op1 ( meat :arg1-of thin :mod sliced )  :op2 ( vegetable :mod various )  :op2 ( and :op1 rice :op3 glass :op2 noodle )  )  )  )
and :op1 ( table :mod each )  :op2 ( pot :mod ( boil :arg1 ( water :arg1-of sink )  :arg2 surface )  )  :op2 ( get :arg0 table :arg0 you :arg1 ( platter :arg1 ( and :op1 ( meat :arg1-of thin :mod sliced )  :op2 ( vegetable :mod various )  :op2 ( and :op1 rice :op3 glass :op2 noodle )  )  )  )
and :op1 ( table :mod each )  :op2 ( pot :mod ( boil :arg1 ( water :arg1-of sink )  :arg2 surface )  )  :op2 ( get :arg0 table :arg0 you :arg1 ( platter :arg1 ( and :op1 ( meat :arg1-of thin :mod sliced )  :op2 ( vegetable :mod various )  :op2 ( and :op1 rice :op3 glass :op2 noodle )  )  )  )
and :op1 ( table :mod each )  :op2 ( pot :mod ( boil :arg1 ( water :arg1-of sink )  :arg2 surface )  )  :op2 ( get :arg0 table :arg0 you :arg1 ( platter :arg1 ( and :op1 ( meat :arg1-of thin :mod sliced )  :op2 ( vegetable :mod various )  :op2 ( and :op1 rice :op3 glass :op2 noodle )  )  )  )
and :op1 ( table :mod each )  :op2 ( pot :mod ( boil :arg1 ( water :arg1-of sink )  :arg2 surface )  )  :op2 ( get :arg0 table :arg0 you :arg1 ( platter :arg1 ( and :op1 ( meat :arg1-of thin :mod sliced )  :op2 ( vegetable :mod various )  :op2 ( and :op1 rice :op3 glass :op2 noodle )  )  )  )
